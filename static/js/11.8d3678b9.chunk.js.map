{"version":3,"sources":["utils/string.ts","utils/animal.ts","graphql/types.ts","utils/events.ts","components/animal/ParamTable.tsx","components/animal/events/EventCard.tsx","utils/date.ts","components/animal/events/AnimalEventList.tsx","components/form/SelectFilesDialog.tsx","components/layout/LayoutMultiColRow.tsx","components/animal/details/AnimalDetailsHeader.tsx","components/animal/events/AnimalEventDialog.tsx","components/animal/events/AnimalEventFilters.tsx","components/animal/events/AnimalEventSorting.tsx","components/animal/events/AnimalEvents.tsx","components/animal/AnimalDetails.tsx","pages/AnimalDetailsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","sortAnimalsByDate","animal1","animal2","descending","date1","parseInt","modTime","date2","getAnimalDetails","animal","animalDetails","details","birthDay","title","birthDate","otherDetails","Object","keys","filter","key","map","__typename","AnimalStatus","EventGroup","EventType","MicrochipStatus","RegistrationStatus","sortEventsByDate","event1","event2","dateTime","getEventDetails","event","comments","ParamTable","classes","useStyles","item","index","display","justifyContent","className","p","color","makeStyles","theme","borderBottom","palette","grey","flexDirection","breakpoints","up","flex","fontWeight","typography","fontWeightBold","textAlign","EventCard","useState","expanded","setExpanded","eventName","type","header","subHeader","timestampString","format","timestamp","isNaN","formatFn","getFormattedDate","eventDetails","Card","root","CardHeader","avatar","Avatar","alt","Typography","component","headerText","noWrap","subheader","action","IconButton","onClick","Collapse","in","timeout","unmountOnExit","CardContent","content","width","maxWidth","wordBreak","label","createStyles","AnimalEventList","events","length","List","ListItem","disableGutters","id","Box","mt","variant","PREVIEW_IMAGE_TYPES","INIT_DIALOG_STATE","visible","loading","error","RenderSelected","multiple","files","imageStyles","container","paddingTop","position","height","image","objectFit","borderWidth","borderRadius","shape","borderColor","includes","src","URL","createObjectURL","aspectRatio","cover","style","imageStyle","file","name","SelectFilesDialog","props","ref","onSubmit","accept","useTheme","setFiles","dialogState","setDialogState","FILES_SELECTED","useDropzone","onDrop","selected","getRootProps","getInputProps","updateState","currentState","dialogEvents","setVisible","setLoading","setError","useImperativeHandle","onCancel","dropZoneClassname","clsx","dropZone","dropZoneSelected","dropZoneDisabled","Dialog","fullWidth","open","onExited","onClose","DialogTitle","DialogContent","marginBottom","marginRight","placeHolder","disabled","DialogActions","marginLeft","Button","submitButtonWrap","CircularProgress","size","submitButtonSpinner","cursor","alignItems","borderStyle","outline","transition","backgroundColor","pointerEvents","border","padding","spacing","secondary","main","top","left","marginTop","forwardRef","flexGrow","LayoutMultiColRow","children","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","push","Grid","xs","sm","AnimalDetailsHeader","animalName","gender","species","breed","onBack","backButton","backIcon","flexShrink","flexBasis","innerName","moreVertIcon","flexWrap","mainParams","property","primary","dark","tertiary","light","fontSize","paddingRight","right","AnimalEventDialog","dialogOpen","categoryOptions","typeOptions","onCreate","fullScreen","useMediaQuery","down","animalID","useParams","setType","category","setCategory","expenses","setExpenses","comment","setComment","date","setDate","typeError","setTypeError","categoryError","setCategoryError","expensesError","setExpensesError","commentsError","setCommentsError","dateError","setDateError","useEffect","handleCancel","cleanup","createEvent","_type","_group","_expenses","_comment","_date","author","createTime","animalId","group","parse","toString","FormControl","InputLabel","Select","labelId","onChange","target","option","MenuItem","TextField","multiline","rows","rowsMax","InputLabelProps","shrink","newEventObject","EVENT_FILTER_ALL","button","AnimalEventFilters","activeFilter","Filter","active","Chip","clickable","EventSortingMode","AnimalEventSorting","sortingMode","DESCENDING","ASCENDING","margin","TYPE_OPTIONS","CATEGORY_OPTIONS","AnimalEvents","setActiveFilter","activeSort","setActiveSort","setDialogOpen","sortByDateComparator","useCallback","memoizedEvents","useMemo","sort","filteredEvents","setFilteredEvents","mb","startIcon","showDialog","eventObject","GET_ANIMAL_DETAILS","UPDATE_ANIMAL_IMAGE","AnimalDetails","onLoad","history","useHistory","useMutation","updateAnimalImageMutation","uploadImageDialogRef","useRef","useQuery","variables","onCompleted","undefined","data","Skeleton","animation","onSelectedFilesSubmit","images","a","dialogRef","current","message","goBack","imageContainer","imageUrl","addImageButton","imageIcon","microchip","secondaryProperty","registration","registrationNo","eventsContainer","py","px","animalMeta","eventsHeader","AnimalDetailsPage","Fade","Page"],"mappings":"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","file":"static/js/11.8d3678b9.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { Animal } from '../graphql/types';\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n\nexport const sortAnimalsByDate = (animal1: Animal, animal2: Animal, descending = true) => {\n    if (!animal1 || !animal2) {\n        return 0;\n    }\n\n    const date1 = parseInt(animal1.modTime as string, 10);\n    const date2 = parseInt(animal2.modTime as string, 10);\n\n    return descending ? date2 - date1 : date1 - date2;\n};\n\nexport const getAnimalDetails = (animal: Animal) => {\n    const { details: animalDetails } = animal;\n\n    const birthDay = {\n        title: 'Birthday',\n        value: animalDetails?.birthDate ? getAnimalAge(animalDetails.birthDate) : '',\n    };\n\n    const weight = {\n        title: 'Weight',\n        value: animalDetails?.weight ? getAnimalWeight(animalDetails.weight) : '',\n    };\n\n    const otherDetails = animalDetails\n        ? Object.keys(animalDetails)\n              .filter(key => {\n                  return typeof animalDetails[key] === 'object' && animalDetails[key] !== null;\n              })\n              .map(key => {\n                  return { title: animalDetails[key].__typename, value: animalDetails[key].value };\n              })\n        : [];\n\n    return [birthDay, ...otherDetails, weight];\n};\n","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n    /** Date scalar type is string matching `YYYY-MM-DD` format */\n    Date: any;\n    /** Name scalar is string maxLength: 255 */\n    Name: any;\n    /** Phone scalar is string pattern: /^\\+(370|371)\\d{8,10}$/ */\n    Phone: any;\n    /** Surname scalar is string maxLength: 255 */\n    Surname: any;\n    /** The `Upload` scalar type represents a file upload. */\n    Upload: any;\n};\n\n/** Represents an animal. */\nexport type Animal = {\n    __typename?: 'Animal';\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /**\n     * Animal status by language.\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n    /** Image URL */\n    imageUrl?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n    /** Animal active registration info */\n    registration?: Maybe<AnimalRegistration>;\n    /** Animal implanted microchip info */\n    microchip?: Maybe<AnimalMicrochip>;\n    /** Animal details */\n    details?: Maybe<AnimalDetails>;\n    /** Flag to determine if the current user has marked the animal as one of her/his favorites */\n    isFavorite?: Maybe<Scalars['Boolean']>;\n};\n\n/** Represents an animal. */\nexport type AnimalStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetails = {\n    __typename?: 'AnimalDetails';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /**\n     * Animal breed by language.\n     * Examples: breed(language: \"en\") or just breed - will return default language (\"lt\") translation\n     */\n    breed?: Maybe<Breed>;\n    /**\n     * Animal species by language\n     * Examples: species(language: \"en\") or just species - will return default language (\"lt\") translation\n     */\n    species?: Maybe<Species>;\n    /**\n     * Animal gender by language.\n     * Examples: gender(language: \"en\") or just gender - will return default language (\"lt\") translation\n     */\n    gender?: Maybe<Gender>;\n    /**\n     * Animal color by language\n     * Examples: color(language: \"en\") or just color - will return default language (\"lt\") translation\n     */\n    color?: Maybe<Color>;\n    /** Animal date of birth */\n    birthDate?: Maybe<Scalars['String']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Float']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsBreedArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsSpeciesArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsGenderArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsColorArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalDetailsInput = {\n    /** Animal breed id (any value from 'breeds' query) */\n    breedId?: Maybe<Scalars['Int']>;\n    /** Animal gender (any value from 'genders' query) */\n    genderId?: Maybe<Scalars['Int']>;\n    /** Animal color (any value from 'colors' query) */\n    colorId?: Maybe<Scalars['Int']>;\n    /** Animal date of birth (year) */\n    birthDate?: Maybe<Scalars['Date']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Int']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\n/** An edge in a connection. */\nexport type AnimalEdge = {\n    __typename?: 'AnimalEdge';\n    /** The item at the end of the edge */\n    node?: Maybe<Animal>;\n    /** A cursor for use in pagination */\n    cursor: Scalars['String'];\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochip = {\n    __typename?: 'AnimalMicrochip';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /** Microchip id */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Microchip install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Microchip install place */\n    installPlaceId: Scalars['Int'];\n    /**\n     * Microchip status ('Implanted' or 'Removed') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochipStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents a animal owner. */\nexport type AnimalOwner = {\n    __typename?: 'AnimalOwner';\n    /** Animal owner ID, e.g., 1 */\n    id: Scalars['Int'];\n    name: Scalars['Name'];\n    surname?: Maybe<Scalars['Surname']>;\n    phone?: Maybe<Scalars['Phone']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistration = {\n    __typename?: 'AnimalRegistration';\n    /** Registration number */\n    registrationNo: Scalars['String'];\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /**\n     * Registration status ('Active' or 'Inactive') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistrationStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalRegistrationInput = {\n    /** Registration number (255 characters max) */\n    registrationNo: Scalars['String'];\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration status ('Active' or 'Inactive') */\n    status?: Maybe<RegistrationStatus>;\n};\n\nexport enum AnimalStatus {\n    Healthy = 'healthy',\n    Vaccinated = 'vaccinated',\n    Sick = 'sick',\n    Adopted = 'adopted',\n}\n\n/** A connection to animals. */\nexport type AnimalsConnection = {\n    __typename?: 'AnimalsConnection';\n    /** Information for pagination. */\n    pageInfo: PageInfo;\n    /** A list of animal edges. */\n    edges: Array<AnimalEdge>;\n};\n\n/** Represents an app user */\nexport type Author = {\n    __typename?: 'Author';\n    /** id */\n    id: Scalars['String'];\n    /** User name */\n    name?: Maybe<Scalars['String']>;\n    /** User surname */\n    surname?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Breed = {\n    __typename?: 'Breed';\n    /** Breed id */\n    id: Scalars['Int'];\n    /** Breed abbreviation */\n    abbreviation: Scalars['String'];\n    /** Breed name */\n    value: Scalars['String'];\n};\n\nexport type CheckIn = Event & {\n    __typename?: 'CheckIn';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: CheckInDetails;\n};\n\nexport type CheckInDetails = EventDetails & {\n    __typename?: 'CheckInDetails';\n    registrationData: AnimalRegistration;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type CheckOut = Event & {\n    __typename?: 'CheckOut';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: CheckOutDetails;\n};\n\nexport type CheckOutDetails = EventDetails & {\n    __typename?: 'CheckOutDetails';\n    temporary: Scalars['Boolean'];\n    newOwner: Scalars['String'];\n    /** Will be used similar object as FormerAnimalOwner */\n    document?: Maybe<Document>;\n    comments?: Maybe<Scalars['String']>;\n};\n\n/** Represents a chip company. */\nexport type ChipCompany = {\n    __typename?: 'ChipCompany';\n    /** Chip company id */\n    id: Scalars['String'];\n    /** Chip company value */\n    value: Scalars['String'];\n};\n\n/** Represents a chip install place. */\nexport type ChipInstallPlace = {\n    __typename?: 'ChipInstallPlace';\n    /** Chip install place id */\n    id: Scalars['String'];\n    /** Chip install place value */\n    value: Scalars['String'];\n};\n\n/** Represents a color. */\nexport type Color = {\n    __typename?: 'Color';\n    /** Color id */\n    id: Scalars['Int'];\n    /** Color name */\n    value: Scalars['String'];\n};\n\nexport type CreateAnimalInput = {\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image File */\n    image?: Maybe<Scalars['Upload']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration: AnimalRegistrationInput;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<CreateAnimalMicrochipInput>;\n};\n\nexport type CreateAnimalMicrochipInput = {\n    /** Microchip id (255 characters max) */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Install date (UTC timestamp) */\n    installDate?: Maybe<Scalars['String']>;\n    /** Install place */\n    installPlaceId: Scalars['Int'];\n    /** Microchip status ('Implanted' or 'Removed') */\n    status: MicrochipStatus;\n};\n\nexport type CreateAnimalOwnerInput = {\n    name: Scalars['Name'];\n    surname?: Maybe<Scalars['Surname']>;\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type CreateGiveawayEventInput = {\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: Maybe<Scalars['String']>;\n    /** Former owner id */\n    formerOwnerId: Scalars['Int'];\n    /** Event date in YYYY-MM-DD format */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id, e.g. 2 */\n    animalId: Scalars['Int'];\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganisationInput = {\n    /** Organization name (255 characters max) */\n    name: Scalars['Name'];\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone (64 characters max) */\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type DeleteAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n};\n\nexport type Document = {\n    __typename?: 'Document';\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Event = {\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: EventDetails;\n};\n\nexport type EventDetails = {\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport enum EventGroup {\n    General = 'General',\n    Medical = 'Medical',\n    Registration = 'Registration',\n}\n\nexport enum EventType {\n    Giveaway = 'Giveaway',\n    Streetfind = 'Streetfind',\n    CheckIn = 'CheckIn',\n    CheckOut = 'CheckOut',\n    Died = 'Died',\n    TemporaryCare = 'TemporaryCare',\n    Microchipping = 'Microchipping',\n    LocationChange = 'LocationChange',\n    Medication = 'Medication',\n    Prophylaxis = 'Prophylaxis',\n    Surgery = 'Surgery',\n    GenderElimination = 'GenderElimination',\n    Inspection = 'Inspection',\n}\n\n/** Represents a favorite animal. */\nexport type FavoriteAnimal = {\n    __typename?: 'FavoriteAnimal';\n    /** Animal id */\n    animalId: Scalars['Int'];\n    /** User id */\n    userId: Scalars['String'];\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n};\n\n/** Represents a gender. */\nexport type Gender = {\n    __typename?: 'Gender';\n    /** Gender id */\n    id: Scalars['String'];\n    /** Gender name */\n    value: Scalars['String'];\n};\n\nexport type Giveaway = Event & {\n    __typename?: 'Giveaway';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: GiveawayDetails;\n};\n\nexport type GiveawayDetails = EventDetails & {\n    __typename?: 'GiveawayDetails';\n    registrationDate?: Maybe<Scalars['String']>;\n    registrationNo?: Maybe<Scalars['String']>;\n    formerOwner: AnimalOwner;\n    reason?: Maybe<Scalars['String']>;\n    comments?: Maybe<Scalars['String']>;\n};\n\n/** Represents Giveaway event */\nexport type GiveawayEvent = {\n    __typename?: 'GiveawayEvent';\n    /** Event id */\n    id: Scalars['Int'];\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: Maybe<Scalars['String']>;\n    /** Former owner id */\n    formerOwnerId: Scalars['Int'];\n    /** Event date */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id */\n    animalId: Scalars['Int'];\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n    /** Author */\n    author: Author;\n};\n\nexport type LocationChange = Event & {\n    __typename?: 'LocationChange';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: LocationChangeDetails;\n};\n\nexport type LocationChangeDetails = EventDetails & {\n    __typename?: 'LocationChangeDetails';\n    location: Scalars['String'];\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type Medication = Event & {\n    __typename?: 'Medication';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: MedicationDetails;\n};\n\nexport type MedicationDetails = EventDetails & {\n    __typename?: 'MedicationDetails';\n    treatment: Scalars['String'];\n    expenses?: Maybe<Scalars['Float']>;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport enum MicrochipStatus {\n    Implanted = 'Implanted',\n    Removed = 'Removed',\n}\n\nexport type Microchipping = Event & {\n    __typename?: 'Microchipping';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: MicrochippingDetails;\n};\n\nexport type MicrochippingDetails = EventDetails & {\n    __typename?: 'MicrochippingDetails';\n    microchip: AnimalMicrochip;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    /** Created animal */\n    createAnimal?: Maybe<Animal>;\n    /** Updated animal */\n    updateAnimal?: Maybe<Animal>;\n    /** Deleted animal */\n    deleteAnimal?: Maybe<Animal>;\n    /** Delete animal details */\n    deleteAnimalDetails?: Maybe<AnimalDetails>;\n    /** Deleted microchip */\n    deleteAnimalMicrochip?: Maybe<AnimalMicrochip>;\n    createAnimalOwner?: Maybe<AnimalOwner>;\n    updateAnimalOwner?: Maybe<AnimalOwner>;\n    /** Delete animal registration */\n    deleteAnimalRegistration?: Maybe<AnimalRegistration>;\n    /** Create Giveaway event */\n    createGiveawayEvent?: Maybe<GiveawayEvent>;\n    /** Update Giveaway event */\n    updateGiveawayEvent?: Maybe<GiveawayEvent>;\n    createStreetfindEvent?: Maybe<StreetfindEvent>;\n    /** Added animal to favorite animals */\n    createFavoriteAnimal?: Maybe<FavoriteAnimal>;\n    /** Removed animal from favorite animals */\n    deleteFavoriteAnimal?: Maybe<FavoriteAnimal>;\n    _empty?: Maybe<Scalars['String']>;\n    createOrganization?: Maybe<Organization>;\n    updateOrganization?: Maybe<Organization>;\n    deleteOrganization?: Maybe<Organization>;\n    createUser?: Maybe<User>;\n    updateUser?: Maybe<User>;\n    deleteUser?: Maybe<User>;\n};\n\nexport type MutationCreateAnimalArgs = {\n    input: CreateAnimalInput;\n};\n\nexport type MutationUpdateAnimalArgs = {\n    input: UpdateAnimalInput;\n};\n\nexport type MutationDeleteAnimalArgs = {\n    input: DeleteAnimalInput;\n};\n\nexport type MutationDeleteAnimalDetailsArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationDeleteAnimalMicrochipArgs = {\n    animalId: Scalars['Int'];\n    microchipId: Scalars['String'];\n};\n\nexport type MutationCreateAnimalOwnerArgs = {\n    input: CreateAnimalOwnerInput;\n};\n\nexport type MutationUpdateAnimalOwnerArgs = {\n    input: UpdateAnimalOwnerInput;\n};\n\nexport type MutationDeleteAnimalRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateGiveawayEventArgs = {\n    input: CreateGiveawayEventInput;\n};\n\nexport type MutationUpdateGiveawayEventArgs = {\n    input: UpdateGiveawayEventInput;\n};\n\nexport type MutationCreateStreetfindEventArgs = {\n    input: StreetfindEventInput;\n};\n\nexport type MutationCreateFavoriteAnimalArgs = {\n    animalId: Scalars['Int'];\n};\n\nexport type MutationDeleteFavoriteAnimalArgs = {\n    animalId: Scalars['Int'];\n};\n\nexport type MutationCreateOrganizationArgs = {\n    input: CreateOrganisationInput;\n};\n\nexport type MutationUpdateOrganizationArgs = {\n    input: UpdateOrganizationInput;\n};\n\nexport type MutationDeleteOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationDeleteUserArgs = {\n    id: Scalars['String'];\n};\n\nexport type Organization = {\n    __typename?: 'Organization';\n    id: Scalars['Int'];\n    name?: Maybe<Scalars['Name']>;\n    country?: Maybe<Scalars['String']>;\n    city?: Maybe<Scalars['String']>;\n    streetAddress?: Maybe<Scalars['String']>;\n    phone?: Maybe<Scalars['Phone']>;\n    modTime: Scalars['String'];\n    deleteTime?: Maybe<Scalars['String']>;\n};\n\nexport type OrganizationTask = {\n    __typename?: 'OrganizationTask';\n    id: Scalars['Int'];\n    title?: Maybe<Scalars['String']>;\n    description?: Maybe<Scalars['String']>;\n    organization: Scalars['Int'];\n    isDone?: Maybe<Scalars['Boolean']>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n    __typename?: 'PageInfo';\n    /** When paginating forwards, are there more items? */\n    hasNextPage: Scalars['Boolean'];\n    /** When paginating backwards, are there more items? */\n    hasPreviousPage: Scalars['Boolean'];\n    /** When paginating backwards, the cursor to continue. */\n    startCursor?: Maybe<Scalars['String']>;\n    /** When paginating forwards, the cursor to continue. */\n    endCursor?: Maybe<Scalars['String']>;\n    totalCount: Scalars['Int'];\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    /**\n     * Lookup an animal.\n     *\n     * Examples:\n     *\n     * animal(id: 1)\n     */\n    animal?: Maybe<Animal>;\n    /**\n     * Get all animals or animals filtered by animal ids, species, gender and breed ids.\n     *\n     * Examples:\n     *\n     * animals\n     * animals(ids: [1, 2, 3])\n     * animals(species: [1, 4], gender: [1, 2], breed: [205, 51])\n     * animals(first: 5)\n     */\n    animals?: Maybe<AnimalsConnection>;\n    /**\n     * Get all animal owners.\n     *\n     * Examples:\n     *\n     * animalOwners\n     */\n    animalOwners?: Maybe<Array<Maybe<AnimalOwner>>>;\n    /**\n     * Get a animal owner with a specific ID.\n     *\n     * Examples:\n     *\n     * animalOwner(id: 1)\n     */\n    animalOwner?: Maybe<AnimalOwner>;\n    registration?: Maybe<AnimalRegistration>;\n    /**\n     * Get all breeds.\n     *\n     * Examples:\n     *\n     * breeds(species: \"2\", language: \"lt\")\n     */\n    breeds?: Maybe<Array<Maybe<Breed>>>;\n    /**\n     * Get all chipCompanies.\n     *\n     * Examples:\n     *\n     * chipCompanies(language: \"lt\")\n     */\n    chipCompanies?: Maybe<Array<Maybe<ChipCompany>>>;\n    /**\n     * Get all chipInstallPlaces.\n     *\n     * Examples:\n     *\n     * chipInstallPlaces(language: \"lt\")\n     */\n    chipInstallPlaces?: Maybe<Array<Maybe<ChipInstallPlace>>>;\n    /**\n     * Get all colors.\n     *\n     * Examples:\n     *\n     * colors(language: \"lt\")\n     */\n    colors?: Maybe<Array<Maybe<Color>>>;\n    /**\n     * Get all events\n     *\n     * Example:\n     * events\n     * events(animalId: 1)\n     */\n    events?: Maybe<Array<Maybe<Event>>>;\n    streetfindEvents?: Maybe<Array<Maybe<StreetfindEvent>>>;\n    /**\n     * Get all favorite animals.\n     *\n     * Examples:\n     *\n     * favoriteAnimals\n     */\n    favoriteAnimals?: Maybe<Array<Maybe<Animal>>>;\n    /**\n     * Get all genders.\n     *\n     * Examples:\n     *\n     * genders(language: \"lt\")\n     */\n    genders?: Maybe<Array<Maybe<Gender>>>;\n    municipalities?: Maybe<Array<Maybe<Municipality>>>;\n    /**\n     * Lookup an organization.\n     *\n     * Examples:\n     *\n     * organization(id: 1)\n     */\n    organization?: Maybe<Organization>;\n    /**\n     * Get all organizations.\n     *\n     * Examples:\n     *\n     * organizations\n     */\n    organizations?: Maybe<Array<Maybe<Organization>>>;\n    organizationTasks?: Maybe<Array<Maybe<OrganizationTask>>>;\n    organizationTask?: Maybe<OrganizationTask>;\n    _empty?: Maybe<Scalars['String']>;\n    /**\n     * Get all species.\n     *\n     * Examples:\n     *\n     * species(language: \"lt\")\n     */\n    species?: Maybe<Array<Maybe<Species>>>;\n    /**\n     * Get all statuses.\n     *\n     * Examples:\n     *\n     * statuses(language: \"lt\")\n     */\n    statuses?: Maybe<Array<Maybe<Status>>>;\n    /**\n     * Lookup an user.\n     *\n     * Examples:\n     *\n     * user(id: 1)\n     */\n    user?: Maybe<User>;\n    /**\n     * Get all users.\n     *\n     * Examples:\n     *\n     * users\n     */\n    users?: Maybe<Array<Maybe<User>>>;\n};\n\nexport type QueryAnimalArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryAnimalsArgs = {\n    ids?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    species?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    gender?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    breed?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    after?: Maybe<Scalars['String']>;\n    first?: Maybe<Scalars['Int']>;\n    before?: Maybe<Scalars['String']>;\n    last?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryAnimalOwnerArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryBreedsArgs = {\n    species: Scalars['String'];\n    language: Scalars['String'];\n};\n\nexport type QueryChipCompaniesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryChipInstallPlacesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryColorsArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryEventsArgs = {\n    animalId?: Maybe<Scalars['Int']>;\n    groups?: Maybe<Array<Maybe<EventGroup>>>;\n};\n\nexport type QueryGendersArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryOrganizationTaskArgs = {\n    id?: Maybe<Scalars['Int']>;\n};\n\nexport type QuerySpeciesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryStatusesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryUserArgs = {\n    id: Scalars['String'];\n};\n\nexport type StreetfindEvent = {\n    __typename?: 'StreetfindEvent';\n    id: Scalars['Int'];\n    street: Scalars['String'];\n    houseNo?: Maybe<Scalars['String']>;\n    municipalityId: Scalars['Int'];\n    date?: Maybe<Scalars['Date']>;\n    animalId: Scalars['Int'];\n    author: Author;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateGiveawayEventInput = {\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: Maybe<Scalars['String']>;\n    /** Event id */\n    id: Scalars['Int'];\n    /** Former owner id */\n    formerOwnerId?: Maybe<Scalars['Int']>;\n    /** Event date in YYYY-MM-DD format */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id, e.g. 2 */\n    animalId?: Maybe<Scalars['Int']>;\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n};\n\nexport type Streetfind = Event & {\n    __typename?: 'Streetfind';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: StreetfindDetails;\n};\n\nexport type Municipality = {\n    __typename?: 'municipality';\n    id: Scalars['Int'];\n    name: Scalars['String'];\n};\n\nexport type Subscription = {\n    __typename?: 'Subscription';\n    organizationCreated?: Maybe<Organization>;\n};\n\nexport type StreetfindDetails = EventDetails & {\n    __typename?: 'StreetfindDetails';\n    registrationDate?: Maybe<Scalars['String']>;\n    registrationNo?: Maybe<Scalars['String']>;\n    street?: Maybe<Scalars['String']>;\n    houseNo?: Maybe<Scalars['String']>;\n    municipalityId: Scalars['Int'];\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport enum RegistrationStatus {\n    Active = 'Active',\n    Inactive = 'Inactive',\n}\n\nexport type UpdateOrganizationInput = {\n    id: Scalars['Int'];\n    name?: Maybe<Scalars['Name']>;\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type UpdateAnimalOwnerInput = {\n    /** Animal owner ID, e.g., 1 */\n    id: Scalars['Int'];\n    name?: Maybe<Scalars['Name']>;\n    surname?: Maybe<Scalars['Surname']>;\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type StreetfindEventInput = {\n    /** Max 255 characters */\n    street: Scalars['String'];\n    /** Max 8 characters */\n    houseNo?: Maybe<Scalars['String']>;\n    /** Any id from municipalities query */\n    municipalityId: Scalars['Int'];\n    date?: Maybe<Scalars['Date']>;\n    animalId: Scalars['Int'];\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image File */\n    image?: Maybe<Scalars['Upload']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration?: Maybe<AnimalRegistrationInput>;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<UpdateAnimalMicrochipInput>;\n};\n\n/** Represents a breed. */\nexport type Species = {\n    __typename?: 'Species';\n    /** Species id */\n    id: Scalars['String'];\n    /** Species name */\n    value: Scalars['String'];\n};\n\n/** Represents a status. */\nexport type Status = {\n    __typename?: 'Status';\n    /** Status id */\n    id: Scalars['String'];\n    /** Status name */\n    value: Scalars['String'];\n};\n\n/** Represents an user. */\nexport type User = {\n    __typename?: 'User';\n    id: Scalars['String'];\n    username: Scalars['String'];\n    name?: Maybe<Scalars['Name']>;\n    surname?: Maybe<Scalars['Surname']>;\n    email?: Maybe<Scalars['String']>;\n    roles?: Maybe<Array<Maybe<Role>>>;\n    modTime?: Maybe<Scalars['String']>;\n};\n\n/** Represents an user role. */\nexport type Role = {\n    __typename?: 'Role';\n    organizationId: Scalars['Int'];\n    roleType?: Maybe<Scalars['String']>;\n};\n\nexport type UserInput = {\n    /** User id  (255 characters max) */\n    id: Scalars['String'];\n    /** User username (128 characters max) */\n    username?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['Name']>;\n    surname?: Maybe<Scalars['Surname']>;\n    /** User email (255 characters max) */\n    email?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateAnimalMicrochipInput = {\n    /** Chip company code (255 characters max, any id from query chipCompanies) */\n    chipCompanyCode?: Maybe<Scalars['Int']>;\n    /** Install date */\n    installDate?: Maybe<Scalars['Date']>;\n    /** Install place (any id from query chipInstallPlaces) */\n    installPlaceId?: Maybe<Scalars['Int']>;\n    /** Microchip status ('Implanted' or 'Removed') */\n    status?: Maybe<MicrochipStatus>;\n};\n","import { Event } from '../graphql/types';\n\nexport const sortEventsByDate = (event1: Event, event2: Event, descending = true) => {\n    if (!event1 || !event2) {\n        return 0;\n    }\n\n    const date1 = parseInt(event1.dateTime as string, 10);\n    const date2 = parseInt(event2.dateTime as string, 10);\n\n    return descending ? date2 - date1 : date1 - date2;\n};\n\nexport const getEventDetails = (event: Event) => [\n    {\n        title: 'Comments',\n        value: event.details?.comments || '-',\n    },\n    {\n        title: 'Author',\n        value: '-',\n    },\n];\n","import React from 'react';\n\nimport { Box, makeStyles, Typography } from '@material-ui/core';\n\nexport default function ParamTable({ details }: ParamTableProps) {\n    const classes = useStyles();\n\n    return (\n        <>\n            {details &&\n                details.map((item, index) => (\n                    <Box key={index} display=\"flex\" justifyContent=\"space-between\" className={classes.item} p={1}>\n                        <Typography className={classes.title} color=\"textPrimary\">\n                            {item.title}\n                        </Typography>\n                        <Typography className={classes.value} color=\"textSecondary\">\n                            {item.value}\n                        </Typography>\n                    </Box>\n                ))}\n        </>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    item: {\n        borderBottom: `1px solid ${theme.palette.grey['400']}`,\n        flexDirection: 'column',\n        [theme.breakpoints.up('sm')]: {\n            flexDirection: 'row',\n        },\n    },\n    title: {\n        flex: 1,\n        fontWeight: theme.typography.fontWeightBold,\n    },\n    value: {\n        flex: 1,\n        textAlign: 'left',\n        [theme.breakpoints.up('sm')]: {\n            flex: 3,\n            textAlign: 'right',\n        },\n    },\n}));\n\ninterface ParamTableProps {\n    details?: { title: string; value: string | number }[];\n}\n","import React, { useState } from 'react';\n\nimport { Card, CardContent, CardHeader, Collapse, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Event } from '../../../graphql/types';\nimport { getFormattedDate } from '../../../utils/date';\nimport { getEventDetails } from '../../../utils/events';\nimport ParamTable from '../ParamTable';\n\nexport default function EventCard({ event }: AnimalCardProps) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const eventName = event.type || '';\n    const header = `Event type - ${eventName}`;\n    const subHeader = `${event.dateTime ? getFormattedDate(event.dateTime) : '-'} / Author`;\n    const eventDetails = getEventDetails(event);\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        <LocalHospitalIcon />\n                    </Avatar>\n                }\n                title={\n                    <Typography component=\"h6\" className={classes.headerText} noWrap>\n                        {header}\n                    </Typography>\n                }\n                subheader={subHeader}\n                action={\n                    <IconButton aria-label=\"settings\">\n                        <MoreVertIcon />\n                    </IconButton>\n                }\n                onClick={() => setExpanded(!expanded)}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <ParamTable details={eventDetails} />\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    headerText: {\n        maxWidth: 150,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n        fontSize: 20,\n        lineHeight: '24px',\n        fontWeight: 600,\n    },\n    content: {\n        wordBreak: 'break-word',\n    },\n    label: {\n        fontWeight: theme.typography.fontWeightBold,\n    },\n}));\n\ninterface AnimalCardProps {\n    event: Event;\n}\n","import { format as formatFn } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nexport const getFormattedDate = (timestampString: string, format = 'yyyy-MM-dd'): string => {\n    const timestamp = Number.parseInt(timestampString, 10);\n\n    if (Number.isNaN(timestamp)) {\n        return '';\n    }\n\n    return formatFn(timestamp, format, { locale: ltLocale });\n};\n","import React from 'react';\n\nimport { Box, List, ListItem, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Event } from '../../../graphql/types';\nimport EventCard from './EventCard';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n    })\n);\n\ninterface AnimalEventListProps {\n    events: Event[];\n}\n\nfunction AnimalEventList({ events }: AnimalEventListProps) {\n    const classes = useStyles();\n\n    if (!events?.length) {\n        return (\n            <Box mt={2}>\n                <Typography variant=\"body1\">No events found.</Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <List className={classes.root}>\n            {events.map(event => (\n                <ListItem key={event.id} disableGutters>\n                    <EventCard event={event} />\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AnimalEventList;\n","import clsx from 'clsx';\nimport Image from 'material-ui-image';\nimport React, { forwardRef, Ref, useImperativeHandle, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nimport {\n    Box,\n    Button,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Theme,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n\ninterface SelectFilesDialogProps {\n    multiple?: boolean;\n    title?: string;\n    accept?: string | string[];\n    onSubmit: (files: File[]) => void;\n}\n\ninterface RenderSelectedProps {\n    multiple: boolean;\n    files: File[];\n    theme?: Theme;\n}\n\ninterface DialogState {\n    visible: boolean;\n    loading: boolean;\n    error?: string | null;\n}\n\nexport interface DialogEventTypes {\n    setVisible: (value: boolean) => void;\n    setLoading: (value: boolean) => void;\n    setError: (value: string | null) => void;\n}\n\nconst PREVIEW_IMAGE_TYPES = ['image/gif', 'image/jpeg', 'image/png', 'image/jpg'];\nconst INIT_DIALOG_STATE = { visible: false, loading: false, error: null };\n\nconst RenderSelected = ({ multiple, files, theme }: RenderSelectedProps) => {\n    const imageStyles = {\n        container: {\n            paddingTop: 0,\n            position: 'relative',\n            height: 135,\n        },\n        image: {\n            height: 135,\n            width: 'auto',\n            maxWidth: '100%',\n            position: 'relative',\n            objectFit: 'contain',\n            borderWidth: 2,\n            borderRadius: theme?.shape?.borderRadius,\n            borderColor: theme?.palette?.grey?.['400'],\n        },\n    };\n\n    if (!multiple && files[0] && PREVIEW_IMAGE_TYPES.includes(files[0].type)) {\n        return (\n            <Image\n                src={URL.createObjectURL(files[0])}\n                aspectRatio={1}\n                cover={false}\n                style={imageStyles.container}\n                imageStyle={imageStyles.image}\n            />\n        );\n    }\n    return (\n        <ul>\n            {files.map((file: File, index) => (\n                <li key={`selected_${index}_${file.name}`}>{file.name}</li>\n            ))}\n        </ul>\n    );\n};\n\nfunction SelectFilesDialog(props: SelectFilesDialogProps, ref: Ref<unknown> | undefined) {\n    const { onSubmit, accept, multiple = false, title = 'Select file' } = props;\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const [files, setFiles] = useState<File[]>([]);\n    const [dialogState, setDialogState] = useState<DialogState>(INIT_DIALOG_STATE);\n\n    const FILES_SELECTED = files.length !== 0;\n\n    const { getRootProps, getInputProps } = useDropzone({\n        accept,\n        multiple,\n        onDrop: selected => setFiles(selected),\n    });\n\n    const updateState = (key: string, value: boolean | string | null) =>\n        setDialogState(currentState => ({ ...currentState, [key]: value }));\n\n    const dialogEvents: DialogEventTypes = {\n        setVisible: value => updateState('visible', value),\n        setLoading: value => updateState('loading', value),\n        setError: value => updateState('error', value),\n    };\n\n    useImperativeHandle(ref, () => dialogEvents);\n\n    const cleanup = () => {\n        setFiles([]);\n        setDialogState(INIT_DIALOG_STATE);\n    };\n\n    const onCancel = () => dialogEvents.setVisible(false);\n\n    const handleSubmit = () => {\n        if (!files.length) {\n            return dialogEvents.setError('Please select a file');\n        }\n        return onSubmit(files);\n    };\n\n    const { loading, error } = dialogState;\n\n    const dropZoneClassname = clsx(classes.dropZone, {\n        [classes.dropZoneSelected]: FILES_SELECTED,\n        [classes.dropZoneDisabled]: loading,\n    });\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={dialogState.visible}\n            onExited={cleanup}\n            onClose={onCancel}\n            aria-labelledby=\"file-upload-dialog-title\"\n        >\n            <DialogTitle id=\"file-upload-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <Box marginBottom={2} marginRight={2} {...getRootProps({ className: dropZoneClassname })}>\n                    {FILES_SELECTED ? (\n                        <RenderSelected multiple={multiple} files={files} theme={theme} />\n                    ) : (\n                        <Typography variant=\"body1\" className={classes.placeHolder}>\n                            Drag and drop an file here or click\n                        </Typography>\n                    )}\n                    <input {...getInputProps()} disabled={loading} />\n                </Box>\n            </DialogContent>\n            <Box marginBottom={2} marginRight={2}>\n                <DialogActions>\n                    <Box flex=\"1\" marginLeft={2}>\n                        {error && (\n                            <Typography variant=\"body1\" color=\"error\">\n                                {error}\n                            </Typography>\n                        )}\n                    </Box>\n                    <Button disabled={loading} variant=\"outlined\" onClick={onCancel} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <div className={classes.submitButtonWrap}>\n                        <Button disabled={loading} onClick={handleSubmit} color=\"secondary\" variant=\"contained\">\n                            Upload\n                        </Button>\n                        {loading && <CircularProgress size={20} className={classes.submitButtonSpinner} />}\n                    </div>\n                </DialogActions>\n            </Box>\n        </Dialog>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    dropZone: {\n        cursor: 'pointer',\n        position: 'relative',\n        width: '100%',\n        height: 135,\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        borderStyle: 'dashed',\n        borderWidth: 2,\n        borderRadius: theme.shape.borderRadius,\n        borderColor: theme.palette.grey['400'],\n        outline: 'none',\n        transition: 'background-color 222ms ease-in-out',\n        '&:hover': {\n            backgroundColor: theme.palette.grey['100'],\n        },\n    },\n    dropZoneDisabled: {\n        pointerEvents: 'none',\n    },\n    dropZoneSelected: {\n        pointerEvents: 'none',\n        border: 'none',\n    },\n    placeHolder: {\n        padding: theme.spacing(1),\n        textAlign: 'center',\n        color: theme.palette.grey['400'],\n    },\n    submitButtonWrap: {\n        position: 'relative',\n    },\n    submitButtonSpinner: {\n        color: theme.palette.secondary.main,\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -10,\n        marginLeft: -10,\n    },\n}));\n\nexport default forwardRef(SelectFilesDialog);\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    })\n);\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const classes = useStyles();\n\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import React from 'react';\n\nimport { Box, IconButton, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nfunction AnimalDetailsHeader({ animalName, gender, species, color, breed, onBack }: AnimalDetailsHeaderProps) {\n    const classes = useStyles();\n\n    return (\n        <Box>\n            <Box display=\"flex\" alignItems=\"center\">\n                <IconButton className={classes.backButton} onClick={onBack}>\n                    <ArrowBackIcon className={classes.backIcon} />\n                </IconButton>\n                <Box display=\"flex\" flexGrow=\"1\" flexShrink=\"1\" flexBasis=\"auto\">\n                    {animalName && (\n                        <Typography variant=\"h3\" className={classes.innerName} noWrap>\n                            {animalName}\n                        </Typography>\n                    )}\n                </Box>\n                <IconButton aria-label=\"settings\">\n                    <MoreVertIcon className={classes.moreVertIcon} />\n                </IconButton>\n            </Box>\n            <Box display=\"flex\" flexWrap=\"wrap\" className={classes.mainParams}>\n                {species && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {species}\n                    </Typography>\n                )}\n                {gender && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {gender}\n                    </Typography>\n                )}\n                {color && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {color}\n                    </Typography>\n                )}\n                {breed && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {breed}\n                    </Typography>\n                )}\n            </Box>\n        </Box>\n    );\n}\n\nexport default AnimalDetailsHeader;\n\nconst useStyles = makeStyles(theme => ({\n    backButton: {\n        backgroundColor: theme.palette.primary.main,\n        '&:hover,&:focus': {\n            backgroundColor: theme.palette.primary.dark,\n        },\n        marginRight: theme.spacing(2),\n        height: '36px',\n        width: '36px',\n        [theme.breakpoints.up('md')]: {\n            height: '48px',\n            width: '48px',\n        },\n    },\n    backIcon: {\n        color: theme.palette.tertiary.light,\n    },\n    innerName: {\n        fontWeight: 500,\n        maxWidth: 180,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 340,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 480,\n        },\n    },\n    moreVertIcon: {\n        color: '#202020',\n    },\n    mainParams: {\n        padding: '8px 0',\n        fontSize: '12px',\n        [theme.breakpoints.up('md')]: {\n            padding: '12px 0',\n            fontSize: '14px',\n        },\n    },\n    property: {\n        color: '#666666',\n        fontSize: '12px',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '14px',\n        },\n        '&:not(:last-child)': {\n            paddingRight: theme.spacing(2),\n            marginRight: theme.spacing(2),\n            position: 'relative',\n            '&::after': {\n                color: '#999999',\n                content: '\"/\"',\n                display: 'block',\n                position: 'absolute',\n                top: 0,\n                right: 0,\n            },\n        },\n    },\n}));\n\ninterface AnimalDetailsHeaderProps {\n    animalName?: string | null;\n    species?: string | null;\n    gender?: string | null;\n    color?: string | null;\n    breed?: string | null;\n    onBack?: () => void;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    useMediaQuery,\n    useTheme,\n} from '@material-ui/core';\nimport { Event } from '../../../graphql/types';\n\ninterface AnimalEventDialogProps {\n    dialogOpen: boolean;\n    categoryOptions: string[];\n    typeOptions: string[];\n    onCancel: (showDialog: boolean) => void;\n    onCreate: (eventObject: Event) => void;\n}\n\nexport default function AnimalEventDialog({\n    dialogOpen,\n    categoryOptions,\n    typeOptions,\n    onCancel,\n    onCreate,\n}: AnimalEventDialogProps) {\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n    const { id: animalID } = useParams<{ id: string }>();\n\n    const [type, setType] = useState('');\n    const [category, setCategory] = useState('');\n    const [expenses, setExpenses] = useState('');\n    const [comment, setComment] = useState('');\n    const [date, setDate] = useState('');\n    const [typeError, setTypeError] = useState(false);\n    const [categoryError, setCategoryError] = useState(false);\n    const [expensesError, setExpensesError] = useState(false);\n    const [commentsError, setCommentsError] = useState(false);\n    const [dateError, setDateError] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        if (!typeError && !categoryError && !expensesError && !commentsError && !dateError) {\n            setError(false);\n        }\n    }, [typeError, categoryError, expensesError, commentsError, dateError]);\n\n    const handleEventTypeChange = event => {\n        setTypeError(false);\n        setType(event.target.value);\n    };\n\n    const handleEventCategoryChange = event => {\n        setCategoryError(false);\n        setCategory(event.target.value);\n    };\n\n    const handleEventExpensesChange = event => {\n        setExpensesError(false);\n        setExpenses(event.target.value);\n    };\n\n    const handleEventCommentsChange = event => {\n        setCommentsError(false);\n        setComment(event.target.value);\n    };\n\n    const handleEventDateChange = event => {\n        setDateError(false);\n        setDate(event.target.value);\n    };\n\n    const handleCreate = () => {\n        if (!type || !category || !expenses || !comment || !date) {\n            setError(true);\n            if (!type) {\n                setTypeError(true);\n            }\n            if (!category) {\n                setCategoryError(true);\n            }\n            if (!expenses) {\n                setExpensesError(true);\n            }\n            if (!comment) {\n                setCommentsError(true);\n            }\n            if (!date) {\n                setDateError(true);\n            }\n            return;\n        }\n        const newEventObject = createEvent(type, category, expenses, comment, date);\n        onCreate(newEventObject);\n        cleanup();\n    };\n\n    const handleCancel = () => {\n        cleanup();\n    };\n\n    const cleanup = () => {\n        setType('');\n        setCategory('');\n        setExpenses('');\n        setComment('');\n        setDate('');\n        setTypeError(false);\n        setCategoryError(false);\n        setExpensesError(false);\n        setCommentsError(false);\n        setDateError(false);\n        setError(false);\n        onCancel(false);\n    };\n\n    const createEvent = (_type, _group, _expenses, _comment, _date): Event => {\n        return {\n            author: {\n                id: '1',\n            },\n            createTime: '',\n            id: 123456,\n            animalId: +animalID,\n            group: _group,\n            type: _type,\n            details: {\n                comments: _comment,\n            },\n            dateTime: Date.parse(_date).toString(),\n        };\n    };\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={dialogOpen}\n            onClose={handleCancel}\n            fullScreen={fullScreen}\n            aria-labelledby=\"event-dialog-title\"\n        >\n            <DialogTitle id=\"event-dialog-title\">Create new event</DialogTitle>\n            <DialogContent>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <FormControl variant=\"outlined\" color=\"secondary\" fullWidth size=\"small\">\n                        <InputLabel id=\"type\">Type</InputLabel>\n                        <Select\n                            labelId=\"type\"\n                            label=\"Type\"\n                            value={type}\n                            onChange={handleEventTypeChange}\n                            error={typeError}\n                        >\n                            {typeOptions.map((option, index) => (\n                                <MenuItem key={index} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <FormControl variant=\"outlined\" color=\"secondary\" fullWidth size=\"small\">\n                        <InputLabel id=\"category\">Category</InputLabel>\n                        <Select\n                            labelId=\"category\"\n                            label=\"Category\"\n                            value={category}\n                            onChange={handleEventCategoryChange}\n                            error={categoryError}\n                        >\n                            {categoryOptions.map((option, index) => (\n                                <MenuItem key={index} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"expenses\"\n                        label=\"Expenses $\"\n                        value={expenses}\n                        onChange={handleEventExpensesChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        type=\"number\"\n                        error={expensesError}\n                        size=\"small\"\n                    />\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"comment\"\n                        label=\"Comments\"\n                        value={comment}\n                        onChange={handleEventCommentsChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        multiline\n                        rows={4}\n                        rowsMax={8}\n                        error={commentsError}\n                    />\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"date\"\n                        label=\"Date\"\n                        value={date}\n                        onChange={handleEventDateChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        type=\"date\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        error={dateError}\n                        size=\"small\"\n                    />\n                </Box>\n            </DialogContent>\n            <Box marginBottom={2} marginRight={2}>\n                <DialogActions>\n                    <Box flex=\"1\" marginLeft={2}>\n                        {error && (\n                            <Typography variant=\"body1\" color=\"error\">\n                                Please fill in all blank fields\n                            </Typography>\n                        )}\n                    </Box>\n\n                    <Button variant=\"outlined\" onClick={handleCancel} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleCreate} color=\"secondary\" variant=\"contained\">\n                        Create\n                    </Button>\n                </DialogActions>\n            </Box>\n        </Dialog>\n    );\n}\n","import React from 'react';\n\nimport { Chip, Grid, makeStyles } from '@material-ui/core';\nimport { EventGroup } from '../../../graphql/types';\n\nexport const EVENT_FILTER_ALL = 'All';\n\nexport type EventCategory = EventGroup | 'All';\n\nconst useStyles = makeStyles(() => ({\n    button: {\n        border: 'none',\n        backgroundColor: 'transparent',\n    },\n}));\n\nexport default function AnimalEventFilters({ activeFilter, onChange }: AnimalEventFiltersProps) {\n    return (\n        <Grid container spacing={2}>\n            <Filter\n                label={EVENT_FILTER_ALL}\n                active={activeFilter === EVENT_FILTER_ALL}\n                onClick={() => onChange(EVENT_FILTER_ALL)}\n            />\n            {Object.keys(EventGroup).map(category => (\n                <Filter\n                    key={category}\n                    label={category}\n                    active={activeFilter === EventGroup[category]}\n                    onClick={() => onChange(EventGroup[category])}\n                />\n            ))}\n        </Grid>\n    );\n}\n\nfunction Filter({ label, active, onClick }: FilterProps) {\n    const classes = useStyles();\n\n    return (\n        <Grid item>\n            <button className={classes.button} type=\"button\" onClick={() => onClick(label as any)}>\n                <Chip label={label} clickable color={active ? 'primary' : 'default'} />\n            </button>\n        </Grid>\n    );\n}\n\ninterface AnimalEventFiltersProps {\n    activeFilter: EventCategory;\n    onChange: (value: EventCategory) => void;\n}\n\ninterface FilterProps {\n    label: string;\n    active: boolean;\n    onClick: (value: EventCategory) => void;\n}\n","import React from 'react';\n\nimport { Box, Typography } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport SortIcon from '@material-ui/icons/Sort';\n\nexport default function AnimalEventSorting({ sortingMode, onChange }: AnimalEventSortingProps) {\n    const handleClick = () => {\n        if (sortingMode === EventSortingMode.DESCENDING) {\n            onChange(EventSortingMode.ASCENDING);\n        } else {\n            onChange(EventSortingMode.DESCENDING);\n        }\n    };\n\n    return (\n        <Box mt={1} display=\"flex\" alignItems=\"center\">\n            <IconButton aria-label=\"Sort button\" onClick={handleClick}>\n                <SortIcon />\n            </IconButton>\n            <Typography variant=\"subtitle1\">Sort by date ({sortingMode})</Typography>\n        </Box>\n    );\n}\n\ninterface AnimalEventSortingProps {\n    sortingMode: EventSortingMode;\n    onChange: (value: EventSortingMode) => void;\n}\n\nexport enum EventSortingMode {\n    DESCENDING = 'descending',\n    ASCENDING = 'ascending',\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Box, Button, makeStyles, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Event } from '../../../graphql/types';\nimport AnimalEventDialog from './AnimalEventDialog';\nimport AnimalEventFilters, { EVENT_FILTER_ALL, EventCategory } from './AnimalEventFilters';\nimport AnimalEventList from './AnimalEventList';\nimport AnimalEventSorting, { EventSortingMode } from './AnimalEventSorting';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        backgroundColor: theme.palette.tertiary.main,\n        // Full bleed effect on mobile\n        marginTop: theme.spacing(2),\n        marginLeft: -theme.spacing(2),\n        marginRight: -theme.spacing(2),\n        [theme.breakpoints.up('lg')]: {\n            margin: 0,\n        },\n    },\n}));\n\nconst TYPE_OPTIONS = [\n    'Ženklinimas ir įregistravimas',\n    'Laikytojo pasikeitimas',\n    'Laikymo vietos pasikeitimas',\n    'Savininko pasikeitimas',\n    'Dingimas',\n    'Suradimas',\n    'Nugaišimas',\n    'Nugaišinimas',\n    'Išvežimas',\n    'Vakcinavimas',\n    'Augintinio agresyvumas',\n];\n\nconst CATEGORY_OPTIONS = ['General', 'Medical'];\n\nexport default function AnimalEvents({ events }: AnimalEventsProps) {\n    const classes = useStyles();\n    const [activeFilter, setActiveFilter] = useState<EventCategory>(EVENT_FILTER_ALL);\n    const [activeSort, setActiveSort] = useState<EventSortingMode>(EventSortingMode.DESCENDING);\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    const handleDialogOpen = () => {\n        setDialogOpen(true);\n    };\n\n    const sortByDateComparator = useCallback(\n        (event1: Event, event2: Event) => {\n            if (!event1 || !event2) {\n                return 0;\n            }\n\n            const date1 = parseInt(event1.dateTime as string, 10);\n            const date2 = parseInt(event2.dateTime as string, 10);\n            if (activeSort === EventSortingMode.DESCENDING) {\n                return date2 - date1;\n            }\n            return date1 - date2;\n        },\n        [activeSort]\n    );\n\n    const memoizedEvents = useMemo(() => {\n        return [...events].sort(sortByDateComparator);\n    }, [events, sortByDateComparator]);\n\n    const [filteredEvents, setFilteredEvents] = useState(memoizedEvents);\n\n    const handleFilterChange = (value: EventCategory) => {\n        setActiveFilter(value);\n    };\n\n    const handleSortChange = (sortingMode: EventSortingMode) => {\n        setActiveSort(sortingMode);\n    };\n\n    useEffect(() => {\n        setFilteredEvents(\n            memoizedEvents.filter(event => event.group === activeFilter || activeFilter === EVENT_FILTER_ALL)\n        );\n    }, [activeFilter, memoizedEvents]);\n\n    return (\n        <Box className={classes.root}>\n            <Box mb={2} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"h5\" component=\"h3\">\n                    Events\n                </Typography>\n                <Button color=\"primary\" variant=\"contained\" startIcon={<AddIcon />} onClick={handleDialogOpen}>\n                    Create\n                </Button>\n                <AnimalEventDialog\n                    dialogOpen={dialogOpen}\n                    categoryOptions={CATEGORY_OPTIONS}\n                    typeOptions={TYPE_OPTIONS}\n                    onCancel={showDialog => {\n                        setDialogOpen(showDialog);\n                    }}\n                    onCreate={eventObject => {\n                        setFilteredEvents([...filteredEvents, eventObject]);\n                    }}\n                />\n            </Box>\n            <AnimalEventFilters activeFilter={activeFilter} onChange={handleFilterChange} />\n            <AnimalEventSorting sortingMode={activeSort} onChange={handleSortChange} />\n            <AnimalEventList events={filteredEvents} />\n        </Box>\n    );\n}\n\ninterface AnimalEventsProps {\n    events: Event[];\n}\n","import { loader } from 'graphql.macro';\nimport Image from 'material-ui-image';\nimport React, { useRef } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Box, IconButton, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddAPhotoOutlinedIcon from '@material-ui/icons/AddAPhotoOutlined';\nimport { Skeleton } from '@material-ui/lab';\nimport { Animal, Event } from '../../graphql/types';\nimport { getAnimalDetails } from '../../utils/animal';\nimport SelectFilesDialog, { DialogEventTypes } from '../form/SelectFilesDialog';\nimport LayoutMultiColRow from '../layout/LayoutMultiColRow';\nimport AnimalDetailsHeader from './details/AnimalDetailsHeader';\nimport AnimalEvents from './events/AnimalEvents';\nimport ParamTable from './ParamTable';\n\nconst GET_ANIMAL_DETAILS = loader('../../graphql/queries/animal-details.graphql');\nconst UPDATE_ANIMAL_IMAGE = loader('../../graphql/queries/update-animal-image.graphql');\n\ninterface RouterParams {\n    id: string;\n}\n\ninterface Response {\n    animal: Animal;\n    events: Event[];\n}\n\ninterface AnimalDetailsProps {\n    onLoad?: (animal: Animal) => void;\n}\n\nfunction AnimalDetails({ onLoad }: AnimalDetailsProps) {\n    const params: RouterParams = useParams();\n    const { id } = params;\n    const classes = useStyles();\n    const history = useHistory();\n\n    const [updateAnimalImageMutation] = useMutation(UPDATE_ANIMAL_IMAGE);\n    const uploadImageDialogRef = useRef<DialogEventTypes>(null);\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n        onCompleted: ({ animal }) => (onLoad ? onLoad(animal) : undefined),\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height=\"70vh\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal, events = [] } = data;\n    const animalDetails = getAnimalDetails(animal);\n\n    const onSelectedFilesSubmit = async (images: File[]) => {\n        const dialogRef = uploadImageDialogRef?.current;\n        if (!dialogRef) {\n            return;\n        }\n        try {\n            dialogRef.setLoading(true);\n            await updateAnimalImageMutation({\n                variables: { id: Number(id), image: images[0] },\n            });\n            dialogRef.setVisible(false);\n        } catch ({ message }) {\n            dialogRef.setError(message);\n        } finally {\n            dialogRef.setLoading(false);\n        }\n    };\n\n    const showUploadImageDialog = () => {\n        uploadImageDialogRef.current?.setVisible(true);\n    };\n\n    return (\n        <div className={classes.root}>\n            <LayoutMultiColRow>\n                <>\n                    <AnimalDetailsHeader\n                        animalName={animal.name}\n                        gender={animal.details?.gender?.value}\n                        species={animal.details?.species?.value}\n                        color={animal.details?.color?.value}\n                        onBack={() => history.goBack()}\n                        breed={animal.details?.breed?.value}\n                    />\n                    <Box className={classes.imageContainer}>\n                        <Image src={animal.imageUrl!} aspectRatio={3 / 2} cover />\n                        <IconButton className={classes.addImageButton} onClick={showUploadImageDialog}>\n                            <AddAPhotoOutlinedIcon className={classes.imageIcon} />\n                        </IconButton>\n                    </Box>\n                    {animal.details && (\n                        <>\n                            <Box mt={3} mb={2}>\n                                {animal.microchip && (\n                                    <Typography variant=\"body1\" className={classes.secondaryProperty}>\n                                        {`Microchip Id - ${animal.microchip}`}\n                                    </Typography>\n                                )}\n                                {animal.registration && (\n                                    <Typography variant=\"body1\" className={classes.secondaryProperty}>\n                                        {`Registration No - ${animal.registration?.registrationNo}`}\n                                    </Typography>\n                                )}\n                            </Box>\n                            <Box mt={3} mb={2}>\n                                <ParamTable details={animalDetails} />\n                            </Box>\n                        </>\n                    )}\n                    <Box mt={1}>\n                        <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                    </Box>\n                </>\n                <Box className={classes.eventsContainer} py={3} px={2}>\n                    <AnimalEvents events={events} />\n                </Box>\n            </LayoutMultiColRow>\n            <SelectFilesDialog\n                ref={uploadImageDialogRef}\n                title=\"Animal picture\"\n                accept=\"image/jpeg, image/jpg\"\n                onSubmit={onSelectedFilesSubmit}\n            />\n        </div>\n    );\n}\n\nexport default AnimalDetails;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    animalName: {\n        color: theme.palette.primary.dark,\n    },\n    animalMeta: {\n        color: theme.palette.grey[600],\n    },\n    secondaryProperty: {\n        marginBottom: theme.spacing(2),\n        fontWeight: 500,\n    },\n    eventsHeader: {\n        fontWeight: 400,\n    },\n    eventsContainer: {\n        backgroundColor: theme.palette.tertiary.main,\n    },\n    imageContainer: {\n        position: 'relative',\n    },\n    imageIcon: {\n        color: theme.palette.tertiary.light,\n        height: '18px',\n        width: '18px',\n        [theme.breakpoints.up('md')]: {\n            height: 'unset',\n            width: 'unset',\n        },\n    },\n    addImageButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        backgroundColor: theme.palette.primary.main,\n        '&:hover,&:focus': {\n            backgroundColor: theme.palette.primary.dark,\n        },\n        height: '36px',\n        width: '36px',\n        [theme.breakpoints.up('md')]: {\n            height: '48px',\n            width: '48px',\n            right: theme.spacing(2),\n            top: theme.spacing(2),\n        },\n    },\n}));\n","import React from 'react';\n\nimport { Fade } from '@material-ui/core';\nimport AnimalDetails from '../components/animal/AnimalDetails';\nimport Page from './Page';\n\nfunction AnimalDetailsPage() {\n    return (\n        <Fade in timeout={600}>\n            <Page>\n                <AnimalDetails />\n            </Page>\n        </Fade>\n    );\n}\n\nexport default AnimalDetailsPage;\n"],"sourceRoot":""}