{"version":3,"sources":["utils/string.ts","utils/animal.ts","graphql/types.ts","components/animal/events/EventCard.tsx","utils/date.ts","components/animal/events/AnimalEventList.tsx","components/layout/LayoutMultiColRow.tsx","components/animal/details/AnimalDetailsHeader.tsx","components/animal/events/AnimalEventDialog.tsx","components/animal/events/AnimalEventFilters.tsx","components/animal/events/AnimalEventSorting.tsx","components/animal/events/AnimalEvents.tsx","components/animal/AnimalDetails.tsx","pages/AnimalDetailsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","sortAnimalsByDate","animal1","animal2","descending","date1","parseInt","modTime","date2","AnimalStatus","MicrochipStatus","RegistrationStatus","Category","EventCard","event","classes","useStyles","useState","expanded","setExpanded","eventName","type","header","subHeader","dateTime","timestampString","format","timestamp","isNaN","formatFn","getFormattedDate","Card","className","root","CardHeader","avatar","Avatar","aria-label","alt","title","Typography","component","headerText","noWrap","subheader","action","IconButton","onClick","Collapse","in","timeout","unmountOnExit","CardContent","content","color","label","paragraph","expenses","comments","makeStyles","theme","width","maxWidth","breakpoints","up","wordBreak","fontWeight","typography","fontWeightBold","createStyles","AnimalEventList","events","length","List","map","ListItem","disableGutters","id","Box","mt","variant","flexGrow","LayoutMultiColRow","children","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","index","push","Grid","item","xs","sm","container","spacing","AnimalDetailsHeader","animalName","gender","species","breed","onBack","display","alignItems","flexDirection","mb","backButton","backIcon","ml","property","paddingRight","marginRight","position","height","backgroundColor","palette","tertiary","dark","top","right","primary","main","light","AnimalEventDialog","dialogOpen","categoryOptions","typeOptions","onCancel","onCreate","useTheme","fullScreen","useMediaQuery","down","animalID","useParams","setType","category","setCategory","setExpenses","comment","setComment","date","setDate","typeError","setTypeError","categoryError","setCategoryError","expensesError","setExpensesError","commentsError","setCommentsError","dateError","setDateError","error","setError","useEffect","handleCancel","cleanup","createEvent","_type","_category","_expenses","_comment","_date","animal","indexOf","parse","toString","Dialog","fullWidth","open","onClose","aria-labelledby","DialogTitle","DialogContent","marginTop","marginBottom","FormControl","InputLabel","Select","labelId","onChange","target","option","MenuItem","TextField","multiline","rows","rowsMax","InputLabelProps","shrink","DialogActions","flex","marginLeft","Button","newEventObject","EVENT_FILTER_ALL","button","border","AnimalEventFilters","activeFilter","Filter","active","Object","keys","Chip","clickable","EventSortingMode","AnimalEventSorting","sortingMode","DESCENDING","ASCENDING","margin","TYPE_OPTIONS","CATEGORY_OPTIONS","AnimalEvents","setActiveFilter","activeSort","setActiveSort","setDialogOpen","sortByDateComparator","useCallback","event1","event2","memoizedEvents","useMemo","sort","filteredEvents","setFilteredEvents","filter","justifyContent","startIcon","showDialog","eventObject","GET_ANIMAL_DETAILS","AnimalDetails","onLoad","history","useHistory","useQuery","variables","onCompleted","undefined","loading","data","Skeleton","animation","birthDay","details","birthDate","animalEvents","animalAll","name","goBack","src","imageUrl","aspectRatio","cover","microchip","secondaryProperty","registration","registrationNo","eventsContainer","py","px","animalMeta","grey","eventsHeader","AnimalDetailsPage","setAnimalName","Fade","Page"],"mappings":"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","file":"static/js/11.a7379413.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { Animal } from '../graphql/types';\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n\nexport const sortAnimalsByDate = (animal1: Animal, animal2: Animal, descending = true) => {\n    if (!animal1 || !animal2) {\n        return 0;\n    }\n\n    const date1 = parseInt(animal1.modTime as string, 10);\n    const date2 = parseInt(animal2.modTime as string, 10);\n\n    return descending ? date2 - date1 : date1 - date2;\n};\n","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    /**\n     * Lookup an animal.\n     *\n     * Examples:\n     *\n     * animal(id: 1)\n     */\n    animal?: Maybe<Animal>;\n    /**\n     * Get all animals.\n     *\n     * Examples:\n     *\n     * animals\n     */\n    animals?: Maybe<Array<Maybe<Animal>>>;\n    /**\n     * Get all breeds.\n     *\n     * Examples:\n     *\n     * breeds(species: \"2\", language: \"lt\")\n     */\n    breeds?: Maybe<Array<Maybe<Breed>>>;\n    /**\n     * Get all colors.\n     *\n     * Examples:\n     *\n     * colors(language: \"lt\")\n     */\n    colors?: Maybe<Array<Maybe<Gender>>>;\n    /**\n     * Get all events and types\n     *\n     * Example:\n     * events(language: \"lt\")\n     */\n    events?: Maybe<Array<Maybe<Events>>>;\n    /**\n     * Get all genders.\n     *\n     * Examples:\n     *\n     * genders(language: \"lt\")\n     */\n    genders?: Maybe<Array<Maybe<Gender>>>;\n    /**\n     * Lookup an organization.\n     *\n     * Examples:\n     *\n     * organization(id: 1)\n     */\n    organization?: Maybe<Organization>;\n    /**\n     * Get all organizations.\n     *\n     * Examples:\n     *\n     * organizations\n     */\n    organizations?: Maybe<Array<Maybe<Organization>>>;\n    _empty?: Maybe<Scalars['String']>;\n    /**\n     * Get all species.\n     *\n     * Examples:\n     *\n     * species(language: \"lt\")\n     */\n    species?: Maybe<Array<Maybe<Species>>>;\n    /**\n     * Get all statuses.\n     *\n     * Examples:\n     *\n     * statuses(language: \"lt\")\n     */\n    statuses?: Maybe<Array<Maybe<Status>>>;\n    /**\n     * Lookup an user.\n     *\n     * Examples:\n     *\n     * user(id: 1)\n     */\n    user?: Maybe<User>;\n    /**\n     * Get all users.\n     *\n     * Examples:\n     *\n     * users\n     */\n    users?: Maybe<Array<Maybe<User>>>;\n};\n\nexport type QueryAnimalArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryBreedsArgs = {\n    species: Scalars['String'];\n    language: Scalars['String'];\n};\n\nexport type QueryColorsArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryEventsArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryGendersArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QuerySpeciesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryStatusesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryUserArgs = {\n    id: Scalars['String'];\n};\n\n/** Represents an animal. */\nexport type Animal = {\n    __typename?: 'Animal';\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /**\n     * Animal status by language.\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n    /** Image URL */\n    imageUrl?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n    /** Animal active registration info */\n    registration?: Maybe<AnimalRegistration>;\n    /** Animal implanted microchip info */\n    microchip?: Maybe<AnimalMicrochip>;\n    /** Animal details */\n    details?: Maybe<AnimalDetails>;\n};\n\n/** Represents an animal. */\nexport type AnimalStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    /** Created animal */\n    createAnimal?: Maybe<Animal>;\n    /** Updated animal */\n    updateAnimal?: Maybe<Animal>;\n    /** Deleted animal */\n    deleteAnimal?: Maybe<Animal>;\n    /** Delete animal details */\n    deleteAnimalDetails?: Maybe<AnimalDetails>;\n    /** Deleted microchip */\n    deleteAnimalMicrochip?: Maybe<AnimalMicrochip>;\n    /** Delete animal registration */\n    deleteAnimalRegistration?: Maybe<AnimalRegistration>;\n    _empty?: Maybe<Scalars['String']>;\n    /** Created organization */\n    createOrganization?: Maybe<Organization>;\n    /** Updated organization */\n    updateOrganization?: Maybe<Organization>;\n    /** Deleted organization */\n    deleteOrganization?: Maybe<Organization>;\n    /** Created user */\n    createUser?: Maybe<User>;\n    /** Updated user */\n    updateUser?: Maybe<User>;\n    /** Deleted user */\n    deleteUser?: Maybe<User>;\n};\n\nexport type MutationCreateAnimalArgs = {\n    input: CreateAnimalInput;\n};\n\nexport type MutationUpdateAnimalArgs = {\n    input: UpdateAnimalInput;\n};\n\nexport type MutationDeleteAnimalArgs = {\n    input: DeleteAnimalInput;\n};\n\nexport type MutationDeleteAnimalDetailsArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationDeleteAnimalMicrochipArgs = {\n    animalId: Scalars['Int'];\n    microchipId: Scalars['String'];\n};\n\nexport type MutationDeleteAnimalRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateOrganizationArgs = {\n    input: CreateOrganisationInput;\n};\n\nexport type MutationUpdateOrganizationArgs = {\n    input: UpdateOrganizationInput;\n};\n\nexport type MutationDeleteOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationDeleteUserArgs = {\n    id: Scalars['String'];\n};\n\nexport enum AnimalStatus {\n    Healthy = 'healthy',\n    Vaccinated = 'vaccinated',\n    Sick = 'sick',\n    Adopted = 'adopted',\n}\n\nexport type CreateAnimalInput = {\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image URL */\n    image_url?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration: AnimalRegistrationInput;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<CreateAnimalMicrochipInput>;\n};\n\nexport type UpdateAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization?: Maybe<Scalars['Int']>;\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image URL */\n    image_url?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration?: Maybe<AnimalRegistrationInput>;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<UpdateAnimalMicrochipInput>;\n};\n\nexport type DeleteAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n};\n\n/** Represents an animal details. */\nexport type AnimalDetails = {\n    __typename?: 'AnimalDetails';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /**\n     * Animal breed by language.\n     * Examples: breed(language: \"en\") or just breed - will return default language (\"lt\") translation\n     */\n    breed?: Maybe<Breed>;\n    /**\n     * Animal species by language\n     * Examples: species(language: \"en\") or just species - will return default language (\"lt\") translation\n     */\n    species?: Maybe<Species>;\n    /**\n     * Animal gender by language.\n     * Examples: gender(language: \"en\") or just gender - will return default language (\"lt\") translation\n     */\n    gender?: Maybe<Gender>;\n    /**\n     * Animal color by language\n     * Examples: color(language: \"en\") or just color - will return default language (\"lt\") translation\n     */\n    color?: Maybe<Color>;\n    /** Animal date of birth */\n    birthDate?: Maybe<Scalars['String']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Float']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsBreedArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsSpeciesArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsGenderArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsColorArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalDetailsInput = {\n    /** Animal breed id (any value from 'breeds' query) */\n    breedId?: Maybe<Scalars['Int']>;\n    /** Animal gender (any value from 'genders' query) */\n    genderId?: Maybe<Scalars['Int']>;\n    /** Animal color (any value from 'colors' query) */\n    colorId?: Maybe<Scalars['Int']>;\n    /** Animal date of birth (year) */\n    birthDate?: Maybe<Scalars['String']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Int']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\nexport enum MicrochipStatus {\n    Implanted = 'Implanted',\n    Removed = 'Removed',\n}\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochip = {\n    __typename?: 'AnimalMicrochip';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /** Microchip id */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Microchip install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Microchip install place */\n    installPlace: Scalars['Int'];\n    /**\n     * Microchip status ('Implanted' or 'Removed') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochipStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type CreateAnimalMicrochipInput = {\n    /** Microchip id (255 characters max) */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Install date (UTC timestamp) */\n    installDate?: Maybe<Scalars['String']>;\n    /** Install place */\n    installPlace: Scalars['Int'];\n    /** Microchip status ('Implanted' or 'Removed') */\n    status: MicrochipStatus;\n};\n\nexport type UpdateAnimalMicrochipInput = {\n    /** Chip company code (255 characters max) */\n    chipCompanyCode?: Maybe<Scalars['Int']>;\n    /** Install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Install place */\n    installPlace?: Maybe<Scalars['Int']>;\n    /** Microchip status ('Implanted' or 'Removed') */\n    status?: Maybe<MicrochipStatus>;\n};\n\nexport enum RegistrationStatus {\n    Active = 'Active',\n    Inactive = 'Inactive',\n}\n\n/** Represents animal registration */\nexport type AnimalRegistration = {\n    __typename?: 'AnimalRegistration';\n    /** Registration number */\n    registrationNo: Scalars['String'];\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['String']>;\n    /**\n     * Registration status ('Active' or 'Inactive') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistrationStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalRegistrationInput = {\n    /** Registration number (255 characters max) */\n    registrationNo: Scalars['String'];\n    /** Registration date (UTC timestamp) */\n    registrationDate?: Maybe<Scalars['String']>;\n    /** Registration status ('Active' or 'Inactive') */\n    status?: Maybe<RegistrationStatus>;\n};\n\n/** Represents a breed. */\nexport type Breed = {\n    __typename?: 'Breed';\n    /** Breed id */\n    id: Scalars['Int'];\n    /** Breed abbreviation */\n    abbreviation: Scalars['String'];\n    /** Breed name */\n    value: Scalars['String'];\n};\n\n/** Represents a color. */\nexport type Color = {\n    __typename?: 'Color';\n    /** Color id */\n    id: Scalars['Int'];\n    /** Color name */\n    value: Scalars['String'];\n};\n\nexport enum Category {\n    General = 'GENERAL',\n    Medical = 'MEDICAL',\n}\n\n/** Represents event */\nexport type Event = {\n    __typename?: 'Event';\n    /** Event id */\n    id: Scalars['Int'];\n    /** Animal id */\n    animal: Scalars['Int'];\n    /** Event type */\n    type?: Maybe<EventType>;\n    /** Event expenses */\n    expenses?: Maybe<Scalars['Float']>;\n    /** Event date */\n    dateTime?: Maybe<Scalars['String']>;\n    /** Event comments */\n    comments?: Maybe<Scalars['String']>;\n    /** Event category */\n    category?: Maybe<Category>;\n};\n\n/** Represents event type */\nexport type EventType = {\n    __typename?: 'EventType';\n    /** Event type id */\n    id: Scalars['Int'];\n    /** Event type */\n    type: Scalars['String'];\n};\n\n/** Represents events types */\nexport type Events = {\n    __typename?: 'Events';\n    /** All events */\n    all?: Maybe<Array<Maybe<Event>>>;\n    /** All animal events */\n    animalAll?: Maybe<Array<Maybe<Event>>>;\n    /** All general events */\n    general?: Maybe<Array<Maybe<Event>>>;\n    /** Animal general events */\n    animalGeneral?: Maybe<Array<Maybe<Event>>>;\n    /** All medical events */\n    medical?: Maybe<Array<Maybe<Event>>>;\n    /** Animal medical events */\n    animalMedical?: Maybe<Array<Maybe<Event>>>;\n    /** All event types */\n    types?: Maybe<Array<Maybe<EventType>>>;\n};\n\n/** Represents events types */\nexport type EventsAnimalAllArgs = {\n    animalId: Scalars['Int'];\n};\n\n/** Represents events types */\nexport type EventsAnimalGeneralArgs = {\n    animalId: Scalars['Int'];\n};\n\n/** Represents events types */\nexport type EventsAnimalMedicalArgs = {\n    animalId: Scalars['Int'];\n};\n\n/** Represents a gender. */\nexport type Gender = {\n    __typename?: 'Gender';\n    /** Gender id */\n    id: Scalars['String'];\n    /** Gender name */\n    value: Scalars['String'];\n};\n\n/** Represents an organization. */\nexport type Organization = {\n    __typename?: 'Organization';\n    /** Organization id, for example 2 */\n    id: Scalars['Int'];\n    /** Organization name */\n    name?: Maybe<Scalars['String']>;\n    /** Country */\n    country?: Maybe<Scalars['String']>;\n    /** City */\n    city?: Maybe<Scalars['String']>;\n    /** Comments */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone */\n    phone?: Maybe<Scalars['String']>;\n    /** Modification time */\n    modTime: Scalars['String'];\n    /** Delete time */\n    deleteTime?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganisationInput = {\n    /** Organization name (255 characters max) */\n    name: Scalars['String'];\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone (64 characters max) */\n    phone?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateOrganizationInput = {\n    /** Organization id, for example 2 */\n    id: Scalars['Int'];\n    /** Organization name (255 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone (64 characters max) */\n    phone?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Species = {\n    __typename?: 'Species';\n    /** Species id */\n    id: Scalars['String'];\n    /** Species name */\n    value: Scalars['String'];\n};\n\n/** Represents a status. */\nexport type Status = {\n    __typename?: 'Status';\n    /** Status id */\n    id: Scalars['String'];\n    /** Status name */\n    value: Scalars['String'];\n};\n\n/** Represents an user. */\nexport type User = {\n    __typename?: 'User';\n    /** User id, for example 2 */\n    id: Scalars['String'];\n    /** User username */\n    username: Scalars['String'];\n    /** User name */\n    name?: Maybe<Scalars['String']>;\n    /** User surname */\n    surname?: Maybe<Scalars['String']>;\n    /** User email */\n    email?: Maybe<Scalars['String']>;\n    /** User roles */\n    roles?: Maybe<Array<Maybe<Role>>>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n};\n\n/** Represents an user role. */\nexport type Role = {\n    __typename?: 'Role';\n    /** Organization id */\n    organizationId: Scalars['Int'];\n    /** User role in organization */\n    roleType?: Maybe<Scalars['String']>;\n};\n\nexport type UserInput = {\n    /** User id  (255 characters max) */\n    id: Scalars['String'];\n    /** User username (128 characters max) */\n    username?: Maybe<Scalars['String']>;\n    /** User name (255 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** User surname (255 characters max) */\n    surname?: Maybe<Scalars['String']>;\n    /** User email (255 characters max) */\n    email?: Maybe<Scalars['String']>;\n};\n","import React, { useState } from 'react';\n\nimport { Card, CardContent, CardHeader, Collapse, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Event } from '../../../graphql/types';\nimport { getFormattedDate } from '../../../utils/date';\n\nexport default function EventCard({ event }: AnimalCardProps) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const eventName = event.type?.type || '';\n    const header = `Event type - ${eventName}`;\n    const subHeader = `${event.dateTime ? getFormattedDate(event.dateTime) : '-'} / Author`;\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        <LocalHospitalIcon />\n                    </Avatar>\n                }\n                title={\n                    <Typography component=\"h6\" className={classes.headerText} noWrap>\n                        {header}\n                    </Typography>\n                }\n                subheader={subHeader}\n                action={\n                    <IconButton aria-label=\"settings\">\n                        <MoreVertIcon />\n                    </IconButton>\n                }\n                onClick={() => setExpanded(!expanded)}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Expenses:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        {event.expenses || '-'}\n                    </Typography>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Comments:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        {event.comments || '-'}\n                    </Typography>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Author:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        -\n                    </Typography>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    headerText: {\n        maxWidth: 150,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n        fontSize: 20,\n        lineHeight: '24px',\n        fontWeight: 600,\n    },\n    content: {\n        wordBreak: 'break-word',\n    },\n    label: {\n        fontWeight: theme.typography.fontWeightBold,\n    },\n}));\n\ninterface AnimalCardProps {\n    event: Event;\n}\n","import { format as formatFn } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nexport const getFormattedDate = (timestampString: string, format = 'yyyy-MM-dd'): string => {\n    const timestamp = Number.parseInt(timestampString, 10);\n\n    if (Number.isNaN(timestamp)) {\n        return '';\n    }\n\n    return formatFn(timestamp, format, { locale: ltLocale });\n};\n","import React from 'react';\n\nimport { Box, List, ListItem, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Event } from '../../../graphql/types';\nimport EventCard from './EventCard';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n    })\n);\n\ninterface AnimalEventListProps {\n    events: Event[];\n}\n\nfunction AnimalEventList({ events }: AnimalEventListProps) {\n    const classes = useStyles();\n\n    if (!events?.length) {\n        return (\n            <Box mt={2}>\n                <Typography variant=\"body1\">No events found.</Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <List className={classes.root}>\n            {events.map(event => (\n                <ListItem key={event.id} disableGutters>\n                    <EventCard event={event} />\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AnimalEventList;\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    })\n);\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const classes = useStyles();\n\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import React from 'react';\n\nimport { Box, IconButton, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nfunction AnimalDetailsHeader({ animalName, gender, species, color, breed, onBack }: AnimalDetailsHeaderProps) {\n    const classes = useStyles();\n\n    return (\n        <Box display=\"flex\" alignItems=\"center\" flexDirection=\"row\" mb={3}>\n            <IconButton className={classes.backButton} onClick={onBack}>\n                <ArrowBackIcon className={classes.backIcon} />\n            </IconButton>\n            <Box ml={3}>\n                {animalName && <Typography variant=\"h3\">{animalName}</Typography>}\n                <Box display=\"flex\" mt={1}>\n                    {species && (\n                        <Typography variant=\"body2\" className={classes.property}>\n                            {species}\n                        </Typography>\n                    )}\n                    {gender && (\n                        <Typography variant=\"body2\" className={classes.property}>\n                            {gender}\n                        </Typography>\n                    )}\n                    {color && (\n                        <Typography variant=\"body2\" className={classes.property}>\n                            {color}\n                        </Typography>\n                    )}\n                    {breed && (\n                        <Typography variant=\"body2\" className={classes.property}>\n                            {breed}\n                        </Typography>\n                    )}\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n\nexport default AnimalDetailsHeader;\n\nconst useStyles = makeStyles(theme => ({\n    property: {\n        '&:not(:last-child)': {\n            paddingRight: theme.spacing(2),\n            marginRight: theme.spacing(2),\n            position: 'relative',\n            '&::after': {\n                content: '\"\"',\n                display: 'block',\n                position: 'absolute',\n                height: '100%',\n                width: '2px',\n                backgroundColor: theme.palette.tertiary.dark,\n                top: 0,\n                right: 0,\n            },\n        },\n    },\n    backButton: {\n        backgroundColor: theme.palette.primary.main,\n        '&:hover,&:focus': {\n            backgroundColor: theme.palette.primary.dark,\n        },\n    },\n    backIcon: {\n        color: theme.palette.tertiary.light,\n    },\n}));\n\ninterface AnimalDetailsHeaderProps {\n    animalName?: string | null;\n    species?: string | null;\n    gender?: string | null;\n    color?: string | null;\n    breed?: string | null;\n    onBack?: () => void;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    useMediaQuery,\n    useTheme,\n} from '@material-ui/core';\nimport { Event } from '../../../graphql/types';\n\ninterface AnimalEventDialogProps {\n    dialogOpen: boolean;\n    categoryOptions: string[];\n    typeOptions: string[];\n    onCancel: (showDialog: boolean) => void;\n    onCreate: (eventObject: Event) => void;\n}\n\nexport default function AnimalEventDialog({\n    dialogOpen,\n    categoryOptions,\n    typeOptions,\n    onCancel,\n    onCreate,\n}: AnimalEventDialogProps) {\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n    const { id: animalID } = useParams<{ id: string }>();\n\n    const [type, setType] = useState('');\n    const [category, setCategory] = useState('');\n    const [expenses, setExpenses] = useState('');\n    const [comment, setComment] = useState('');\n    const [date, setDate] = useState('');\n    const [typeError, setTypeError] = useState(false);\n    const [categoryError, setCategoryError] = useState(false);\n    const [expensesError, setExpensesError] = useState(false);\n    const [commentsError, setCommentsError] = useState(false);\n    const [dateError, setDateError] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        if (!typeError && !categoryError && !expensesError && !commentsError && !dateError) {\n            setError(false);\n        }\n    }, [typeError, categoryError, expensesError, commentsError, dateError]);\n\n    const handleEventTypeChange = event => {\n        setTypeError(false);\n        setType(event.target.value);\n    };\n\n    const handleEventCategoryChange = event => {\n        setCategoryError(false);\n        setCategory(event.target.value);\n    };\n\n    const handleEventExpensesChange = event => {\n        setExpensesError(false);\n        setExpenses(event.target.value);\n    };\n\n    const handleEventCommentsChange = event => {\n        setCommentsError(false);\n        setComment(event.target.value);\n    };\n\n    const handleEventDateChange = event => {\n        setDateError(false);\n        setDate(event.target.value);\n    };\n\n    const handleCreate = () => {\n        if (!type || !category || !expenses || !comment || !date) {\n            setError(true);\n            if (!type) {\n                setTypeError(true);\n            }\n            if (!category) {\n                setCategoryError(true);\n            }\n            if (!expenses) {\n                setExpensesError(true);\n            }\n            if (!comment) {\n                setCommentsError(true);\n            }\n            if (!date) {\n                setDateError(true);\n            }\n            return;\n        }\n        const newEventObject = createEvent(type, category, expenses, comment, date);\n        onCreate(newEventObject);\n        cleanup();\n    };\n\n    const handleCancel = () => {\n        cleanup();\n    };\n\n    const cleanup = () => {\n        setType('');\n        setCategory('');\n        setExpenses('');\n        setComment('');\n        setDate('');\n        setTypeError(false);\n        setCategoryError(false);\n        setExpensesError(false);\n        setCommentsError(false);\n        setDateError(false);\n        setError(false);\n        onCancel(false);\n    };\n\n    const createEvent = (_type, _category, _expenses, _comment, _date): Event => {\n        return {\n            id: 123456,\n            animal: +animalID,\n            type: { id: typeOptions.indexOf(type), type: _type },\n            category: _category,\n            expenses: +_expenses,\n            comments: _comment,\n            dateTime: Date.parse(_date).toString(),\n        };\n    };\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={dialogOpen}\n            onClose={handleCancel}\n            fullScreen={fullScreen}\n            aria-labelledby=\"event-dialog-title\"\n        >\n            <DialogTitle id=\"event-dialog-title\">Create new event</DialogTitle>\n            <DialogContent>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <FormControl variant=\"outlined\" color=\"secondary\" fullWidth>\n                        <InputLabel id=\"type\">Type</InputLabel>\n                        <Select\n                            labelId=\"type\"\n                            label=\"Type\"\n                            value={type}\n                            onChange={handleEventTypeChange}\n                            error={typeError}\n                        >\n                            {typeOptions.map((option, index) => (\n                                <MenuItem key={index} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <FormControl variant=\"outlined\" color=\"secondary\" fullWidth>\n                        <InputLabel id=\"category\">Category</InputLabel>\n                        <Select\n                            labelId=\"category\"\n                            label=\"Category\"\n                            value={category}\n                            onChange={handleEventCategoryChange}\n                            error={categoryError}\n                        >\n                            {categoryOptions.map((option, index) => (\n                                <MenuItem key={index} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"expenses\"\n                        label=\"Expenses $\"\n                        value={expenses}\n                        onChange={handleEventExpensesChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        type=\"number\"\n                        error={expensesError}\n                    />\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"comment\"\n                        label=\"Comments\"\n                        value={comment}\n                        onChange={handleEventCommentsChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        multiline\n                        rows={4}\n                        rowsMax={8}\n                        error={commentsError}\n                    />\n                </Box>\n                <Box marginTop={2.5} marginBottom={2}>\n                    <TextField\n                        id=\"date\"\n                        label=\"Date\"\n                        value={date}\n                        onChange={handleEventDateChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        type=\"date\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        error={dateError}\n                    />\n                </Box>\n            </DialogContent>\n            <Box marginBottom={2} marginRight={2}>\n                <DialogActions>\n                    <Box flex=\"1\" marginLeft={2}>\n                        {error && (\n                            <Typography variant=\"body1\" color=\"error\">\n                                Please fill in all blank fields\n                            </Typography>\n                        )}\n                    </Box>\n\n                    <Button variant=\"outlined\" onClick={handleCancel} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleCreate} color=\"secondary\" variant=\"contained\">\n                        Create\n                    </Button>\n                </DialogActions>\n            </Box>\n        </Dialog>\n    );\n}\n","import React from 'react';\n\nimport { Chip, Grid, makeStyles } from '@material-ui/core';\nimport { Category } from '../../../graphql/types';\n\nexport const EVENT_FILTER_ALL = 'All';\n\nexport type EventCategory = Category | 'All';\n\nconst useStyles = makeStyles(() => ({\n    button: {\n        border: 'none',\n        backgroundColor: 'transparent',\n    },\n}));\n\nexport default function AnimalEventFilters({ activeFilter, onChange }: AnimalEventFiltersProps) {\n    return (\n        <Grid container spacing={2}>\n            <Filter\n                label={EVENT_FILTER_ALL}\n                active={activeFilter === EVENT_FILTER_ALL}\n                onClick={() => onChange(EVENT_FILTER_ALL)}\n            />\n            {Object.keys(Category).map(category => (\n                <Filter\n                    key={category}\n                    label={category}\n                    active={activeFilter === Category[category]}\n                    onClick={() => onChange(Category[category])}\n                />\n            ))}\n        </Grid>\n    );\n}\n\nfunction Filter({ label, active, onClick }: FilterProps) {\n    const classes = useStyles();\n\n    return (\n        <Grid item>\n            <button className={classes.button} type=\"button\" onClick={() => onClick(label as any)}>\n                <Chip label={label} clickable color={active ? 'primary' : 'default'} />\n            </button>\n        </Grid>\n    );\n}\n\ninterface AnimalEventFiltersProps {\n    activeFilter: EventCategory;\n    onChange: (value: EventCategory) => void;\n}\n\ninterface FilterProps {\n    label: string;\n    active: boolean;\n    onClick: (value: EventCategory) => void;\n}\n","import React from 'react';\n\nimport { Box, Typography } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport SortIcon from '@material-ui/icons/Sort';\n\nexport default function AnimalEventSorting({ sortingMode, onChange }: AnimalEventSortingProps) {\n    const handleClick = () => {\n        if (sortingMode === EventSortingMode.DESCENDING) {\n            onChange(EventSortingMode.ASCENDING);\n        } else {\n            onChange(EventSortingMode.DESCENDING);\n        }\n    };\n\n    return (\n        <Box mt={1} display=\"flex\" alignItems=\"center\">\n            <IconButton aria-label=\"Sort button\" onClick={handleClick}>\n                <SortIcon />\n            </IconButton>\n            <Typography variant=\"subtitle1\">Sort by date ({sortingMode})</Typography>\n        </Box>\n    );\n}\n\ninterface AnimalEventSortingProps {\n    sortingMode: EventSortingMode;\n    onChange: (value: EventSortingMode) => void;\n}\n\nexport enum EventSortingMode {\n    DESCENDING = 'descending',\n    ASCENDING = 'ascending',\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Box, Button, makeStyles, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Event } from '../../../graphql/types';\nimport AnimalEventDialog from './AnimalEventDialog';\nimport AnimalEventFilters, { EVENT_FILTER_ALL, EventCategory } from './AnimalEventFilters';\nimport AnimalEventList from './AnimalEventList';\nimport AnimalEventSorting, { EventSortingMode } from './AnimalEventSorting';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        backgroundColor: theme.palette.tertiary.main,\n        // Full bleed effect on mobile\n        marginTop: theme.spacing(2),\n        marginLeft: -theme.spacing(2),\n        marginRight: -theme.spacing(2),\n        [theme.breakpoints.up('lg')]: {\n            margin: 0,\n        },\n    },\n}));\n\nconst TYPE_OPTIONS = [\n    'Ženklinimas ir įregistravimas',\n    'Laikytojo pasikeitimas',\n    'Laikymo vietos pasikeitimas',\n    'Savininko pasikeitimas',\n    'Dingimas',\n    'Suradimas',\n    'Nugaišimas',\n    'Nugaišinimas',\n    'Išvežimas',\n    'Vakcinavimas',\n    'Augintinio agresyvumas',\n];\n\nconst CATEGORY_OPTIONS = ['General', 'Medical'];\n\nexport default function AnimalEvents({ events }: AnimalEventsProps) {\n    const classes = useStyles();\n    const [activeFilter, setActiveFilter] = useState<EventCategory>(EVENT_FILTER_ALL);\n    const [activeSort, setActiveSort] = useState<EventSortingMode>(EventSortingMode.DESCENDING);\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    const handleDialogOpen = () => {\n        setDialogOpen(true);\n    };\n\n    const sortByDateComparator = useCallback(\n        (event1: Event, event2: Event) => {\n            if (!event1 || !event2) {\n                return 0;\n            }\n\n            const date1 = parseInt(event1.dateTime as string, 10);\n            const date2 = parseInt(event2.dateTime as string, 10);\n            if (activeSort === EventSortingMode.DESCENDING) {\n                return date2 - date1;\n            }\n            return date1 - date2;\n        },\n        [activeSort]\n    );\n\n    const memoizedEvents = useMemo(() => {\n        return [...events].sort(sortByDateComparator);\n    }, [events, sortByDateComparator]);\n\n    const [filteredEvents, setFilteredEvents] = useState(memoizedEvents);\n\n    const handleFilterChange = (value: EventCategory) => {\n        setActiveFilter(value);\n    };\n\n    const handleSortChange = (sortingMode: EventSortingMode) => {\n        setActiveSort(sortingMode);\n    };\n\n    useEffect(() => {\n        setFilteredEvents(\n            memoizedEvents.filter(event => event.category === activeFilter || activeFilter === EVENT_FILTER_ALL)\n        );\n    }, [activeFilter, memoizedEvents]);\n\n    return (\n        <Box className={classes.root}>\n            <Box mb={2} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"h5\" component=\"h3\">\n                    Events\n                </Typography>\n                <Button color=\"primary\" variant=\"contained\" startIcon={<AddIcon />} onClick={handleDialogOpen}>\n                    Create\n                </Button>\n                <AnimalEventDialog\n                    dialogOpen={dialogOpen}\n                    categoryOptions={CATEGORY_OPTIONS}\n                    typeOptions={TYPE_OPTIONS}\n                    onCancel={showDialog => {\n                        setDialogOpen(showDialog);\n                    }}\n                    onCreate={eventObject => {\n                        setFilteredEvents([...filteredEvents, eventObject]);\n                    }}\n                />\n            </Box>\n            <AnimalEventFilters activeFilter={activeFilter} onChange={handleFilterChange} />\n            <AnimalEventSorting sortingMode={activeSort} onChange={handleSortChange} />\n            <AnimalEventList events={filteredEvents} />\n        </Box>\n    );\n}\n\ninterface AnimalEventsProps {\n    events: Event[];\n}\n","import { loader } from 'graphql.macro';\nimport Image from 'material-ui-image';\nimport React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport { Animal, Event } from '../../graphql/types';\nimport { getAnimalAge, getAnimalWeight } from '../../utils/animal';\nimport LayoutMultiColRow from '../layout/LayoutMultiColRow';\nimport AnimalDetailsHeader from './details/AnimalDetailsHeader';\nimport AnimalEvents from './events/AnimalEvents';\n\nconst GET_ANIMAL_DETAILS = loader('../../graphql/queries/animal-details.graphql');\n\ninterface RouterParams {\n    id: string;\n}\n\ninterface Response {\n    animal: Animal;\n    events: { animalAll: Event[] }[];\n}\n\ninterface AnimalDetailsProps {\n    onLoad?: (animal: Animal) => void;\n}\n\nfunction AnimalDetails({ onLoad }: AnimalDetailsProps) {\n    const params: RouterParams = useParams();\n    const { id } = params;\n    const classes = useStyles();\n    const history = useHistory();\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n        onCompleted: ({ animal }) => (onLoad ? onLoad(animal) : undefined),\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height=\"70vh\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal, events } = data;\n    const birthDay = animal.details?.birthDate ? getAnimalAge(animal.details.birthDate) : '';\n    const animalEvents = events?.[0]?.animalAll ?? [];\n\n    return (\n        <div className={classes.root}>\n            <LayoutMultiColRow>\n                <>\n                    <AnimalDetailsHeader\n                        animalName={animal.name}\n                        gender={animal.details?.gender?.value}\n                        species={animal.details?.species?.value}\n                        color={animal.details?.color?.value}\n                        onBack={() => history.goBack()}\n                        breed={animal.details?.breed?.value}\n                    />\n                    <Image src={animal.imageUrl!} aspectRatio={3 / 2} cover />\n                    {animal.details && (\n                        <>\n                            <Box mt={3} mb={2}>\n                                {animal.microchip && (\n                                    <Typography variant=\"body1\" className={classes.secondaryProperty}>\n                                        {`Microchip Id - ${animal.microchip}`}\n                                    </Typography>\n                                )}\n                                {animal.registration && (\n                                    <Typography variant=\"body1\" className={classes.secondaryProperty}>\n                                        {`Registration No - ${animal.registration?.registrationNo}`}\n                                    </Typography>\n                                )}\n                            </Box>\n                            <Box\n                                display=\"flex\"\n                                flexDirection=\"column\"\n                                alignItems=\"flexStart\"\n                                justifyContent=\"flexStart\"\n                            >\n                                <Typography variant=\"body2\">{`Age - ${birthDay}`}</Typography>\n                                {animal.details.weight && (\n                                    <Typography variant=\"body2\">\n                                        {`Weight - ${getAnimalWeight(animal.details.weight)}`}\n                                    </Typography>\n                                )}\n                                <Typography variant=\"body2\">{`Color - ${animal.details.color?.value}`}</Typography>\n                                <Typography variant=\"body2\">{animal.comments}</Typography>\n                            </Box>\n                        </>\n                    )}\n                    <Box mt={1}>\n                        <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                    </Box>\n                </>\n                <Box className={classes.eventsContainer} py={3} px={2}>\n                    <AnimalEvents events={animalEvents} />\n                </Box>\n            </LayoutMultiColRow>\n        </div>\n    );\n}\n\nexport default AnimalDetails;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    animalName: {\n        color: theme.palette.primary.dark,\n    },\n    animalMeta: {\n        color: theme.palette.grey[600],\n    },\n    secondaryProperty: {\n        marginBottom: theme.spacing(2),\n        fontWeight: 500,\n    },\n    eventsHeader: {\n        fontWeight: 400,\n    },\n    eventsContainer: {\n        backgroundColor: theme.palette.tertiary.main,\n    },\n}));\n","import React, { useState } from 'react';\n\nimport { Fade } from '@material-ui/core';\nimport AnimalDetails from '../components/animal/AnimalDetails';\nimport { Animal } from '../graphql/types';\nimport Page from './Page';\n\nfunction AnimalDetailsPage() {\n    const [animalName, setAnimalName] = useState('');\n\n    return (\n        <Fade in timeout={600}>\n            <Page title={animalName ?? 'Pet details'}>\n                <AnimalDetails onLoad={(animal: Animal) => setAnimalName(animal.name ?? '')} />\n            </Page>\n        </Fade>\n    );\n}\n\nexport default AnimalDetailsPage;\n"],"sourceRoot":""}