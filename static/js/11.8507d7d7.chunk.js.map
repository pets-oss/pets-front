{"version":3,"sources":["utils/string.ts","utils/animal.ts","graphql/types.ts","utils/events.ts","components/animal/ParamTable.tsx","components/animal/events/EventCard.tsx","utils/date.ts","components/animal/events/AnimalEventList.tsx","components/layout/LayoutMultiColRow.tsx","components/animal/details/AnimalDetailsHeader.tsx","components/animal/events/AnimalEventDialog.tsx","components/animal/events/AnimalEventFilters.tsx","components/animal/events/AnimalEventSorting.tsx","components/animal/events/AnimalEvents.tsx","components/animal/AnimalDetails.tsx","pages/AnimalDetailsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","sortAnimalsByDate","animal1","animal2","descending","date1","parseInt","modTime","date2","getAnimalDetails","animal","animalDetails","details","birthDay","title","birthDate","otherDetails","Object","keys","filter","key","map","__typename","AnimalStatus","EventGroup","EventType","MicrochipStatus","RegistrationStatus","sortEventsByDate","event1","event2","dateTime","getEventDetails","event","comments","ParamTable","classes","useStyles","item","index","display","justifyContent","className","p","color","makeStyles","theme","borderBottom","palette","grey","flexDirection","breakpoints","up","flex","fontWeight","typography","fontWeightBold","textAlign","EventCard","useState","expanded","setExpanded","eventName","type","header","subHeader","timestampString","format","timestamp","isNaN","formatFn","getFormattedDate","eventDetails","Card","root","CardHeader","avatar","Avatar","aria-label","alt","Typography","component","headerText","noWrap","subheader","action","IconButton","onClick","Collapse","in","timeout","unmountOnExit","CardContent","content","width","maxWidth","wordBreak","label","createStyles","AnimalEventList","events","length","List","ListItem","disableGutters","id","Box","mt","variant","flexGrow","LayoutMultiColRow","children","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","push","Grid","xs","sm","container","spacing","AnimalDetailsHeader","animalName","gender","species","breed","onBack","alignItems","backButton","backIcon","flexShrink","flexBasis","innerName","moreVertIcon","flexWrap","mainParams","property","backgroundColor","primary","main","dark","marginRight","height","tertiary","light","padding","fontSize","paddingRight","position","top","right","AnimalEventDialog","dialogOpen","categoryOptions","typeOptions","onCancel","onCreate","useTheme","fullScreen","useMediaQuery","down","animalID","useParams","setType","category","setCategory","expenses","setExpenses","comment","setComment","date","setDate","typeError","setTypeError","categoryError","setCategoryError","expensesError","setExpensesError","commentsError","setCommentsError","dateError","setDateError","error","setError","useEffect","handleCancel","cleanup","createEvent","_type","_group","_expenses","_comment","_date","author","createTime","animalId","group","parse","toString","Dialog","fullWidth","open","onClose","aria-labelledby","DialogTitle","DialogContent","marginTop","marginBottom","FormControl","size","InputLabel","Select","labelId","onChange","target","option","MenuItem","TextField","multiline","rows","rowsMax","InputLabelProps","shrink","DialogActions","marginLeft","Button","newEventObject","EVENT_FILTER_ALL","button","border","AnimalEventFilters","activeFilter","Filter","active","Chip","clickable","EventSortingMode","AnimalEventSorting","sortingMode","DESCENDING","ASCENDING","margin","TYPE_OPTIONS","CATEGORY_OPTIONS","AnimalEvents","setActiveFilter","activeSort","setActiveSort","setDialogOpen","sortByDateComparator","useCallback","memoizedEvents","useMemo","sort","filteredEvents","setFilteredEvents","mb","startIcon","showDialog","eventObject","GET_ANIMAL_DETAILS","AnimalDetails","onLoad","history","useHistory","useQuery","variables","onCompleted","undefined","loading","data","Skeleton","animation","name","goBack","src","imageUrl","aspectRatio","cover","microchip","secondaryProperty","registration","registrationNo","eventsContainer","py","px","animalMeta","eventsHeader","AnimalDetailsPage","Fade","Page"],"mappings":"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","file":"static/js/11.8507d7d7.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { Animal } from '../graphql/types';\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n\nexport const sortAnimalsByDate = (animal1: Animal, animal2: Animal, descending = true) => {\n    if (!animal1 || !animal2) {\n        return 0;\n    }\n\n    const date1 = parseInt(animal1.modTime as string, 10);\n    const date2 = parseInt(animal2.modTime as string, 10);\n\n    return descending ? date2 - date1 : date1 - date2;\n};\n\nexport const getAnimalDetails = (animal: Animal) => {\n    const { details: animalDetails } = animal;\n\n    const birthDay = {\n        title: 'Birthday',\n        value: animalDetails?.birthDate ? getAnimalAge(animalDetails.birthDate) : '',\n    };\n\n    const weight = {\n        title: 'Weight',\n        value: animalDetails?.weight ? getAnimalWeight(animalDetails.weight) : '',\n    };\n\n    const otherDetails = animalDetails\n        ? Object.keys(animalDetails)\n              .filter(key => {\n                  return typeof animalDetails[key] === 'object' && animalDetails[key] !== null;\n              })\n              .map(key => {\n                  return { title: animalDetails[key].__typename, value: animalDetails[key].value };\n              })\n        : [];\n\n    return [birthDay, ...otherDetails, weight];\n};\n","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n    /** Date scalar type is string matching `YYYY-MM-DD` format */\n    Date: any;\n    /** Name scalar is string maxLength: 255 */\n    Name: any;\n    /** Phone scalar is string pattern: /^\\+(370|371)\\d{8,10}$/ */\n    Phone: any;\n    /** Surname scalar is string maxLength: 255 */\n    Surname: any;\n    /** The `Upload` scalar type represents a file upload. */\n    Upload: any;\n};\n\n/** Represents an animal. */\nexport type Animal = {\n    __typename?: 'Animal';\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /**\n     * Animal status by language.\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n    /** Image URL */\n    imageUrl?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n    /** Animal active registration info */\n    registration?: Maybe<AnimalRegistration>;\n    /** Animal implanted microchip info */\n    microchip?: Maybe<AnimalMicrochip>;\n    /** Animal details */\n    details?: Maybe<AnimalDetails>;\n};\n\n/** Represents an animal. */\nexport type AnimalStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetails = {\n    __typename?: 'AnimalDetails';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /**\n     * Animal breed by language.\n     * Examples: breed(language: \"en\") or just breed - will return default language (\"lt\") translation\n     */\n    breed?: Maybe<Breed>;\n    /**\n     * Animal species by language\n     * Examples: species(language: \"en\") or just species - will return default language (\"lt\") translation\n     */\n    species?: Maybe<Species>;\n    /**\n     * Animal gender by language.\n     * Examples: gender(language: \"en\") or just gender - will return default language (\"lt\") translation\n     */\n    gender?: Maybe<Gender>;\n    /**\n     * Animal color by language\n     * Examples: color(language: \"en\") or just color - will return default language (\"lt\") translation\n     */\n    color?: Maybe<Color>;\n    /** Animal date of birth */\n    birthDate?: Maybe<Scalars['String']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Float']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsBreedArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsSpeciesArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsGenderArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsColorArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalDetailsInput = {\n    /** Animal breed id (any value from 'breeds' query) */\n    breedId?: Maybe<Scalars['Int']>;\n    /** Animal gender (any value from 'genders' query) */\n    genderId?: Maybe<Scalars['Int']>;\n    /** Animal color (any value from 'colors' query) */\n    colorId?: Maybe<Scalars['Int']>;\n    /** Animal date of birth (year) */\n    birthDate?: Maybe<Scalars['String']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Int']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\n/** An edge in a connection. */\nexport type AnimalEdge = {\n    __typename?: 'AnimalEdge';\n    /** The item at the end of the edge */\n    node?: Maybe<Animal>;\n    /** A cursor for use in pagination */\n    cursor: Scalars['String'];\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochip = {\n    __typename?: 'AnimalMicrochip';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /** Microchip id */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Microchip install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Microchip install place */\n    installPlaceId: Scalars['Int'];\n    /**\n     * Microchip status ('Implanted' or 'Removed') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochipStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents a animal owner. */\nexport type AnimalOwner = {\n    __typename?: 'AnimalOwner';\n    /** Animal owner ID, e.g., 1 */\n    id: Scalars['Int'];\n    /** Animal owner name */\n    name: Scalars['String'];\n    /** Animal owner surname */\n    surname?: Maybe<Scalars['String']>;\n    /** Animal owner phone number */\n    phone?: Maybe<Scalars['String']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistration = {\n    __typename?: 'AnimalRegistration';\n    /** Registration number */\n    registrationNo: Scalars['String'];\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['String']>;\n    /**\n     * Registration status ('Active' or 'Inactive') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistrationStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalRegistrationInput = {\n    /** Registration number (255 characters max) */\n    registrationNo: Scalars['String'];\n    /** Registration date (UTC timestamp) */\n    registrationDate?: Maybe<Scalars['String']>;\n    /** Registration status ('Active' or 'Inactive') */\n    status?: Maybe<RegistrationStatus>;\n};\n\nexport enum AnimalStatus {\n    Healthy = 'healthy',\n    Vaccinated = 'vaccinated',\n    Sick = 'sick',\n    Adopted = 'adopted',\n}\n\n/** A connection to animals. */\nexport type AnimalsConnection = {\n    __typename?: 'AnimalsConnection';\n    /** Information for pagination. */\n    pageInfo: PageInfo;\n    /** A list of animal edges. */\n    edges: Array<AnimalEdge>;\n};\n\n/** Represents an app user */\nexport type Author = {\n    __typename?: 'Author';\n    /** id */\n    id: Scalars['String'];\n    /** User name */\n    name?: Maybe<Scalars['String']>;\n    /** User surname */\n    surname?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Breed = {\n    __typename?: 'Breed';\n    /** Breed id */\n    id: Scalars['Int'];\n    /** Breed abbreviation */\n    abbreviation: Scalars['String'];\n    /** Breed name */\n    value: Scalars['String'];\n};\n\nexport type CheckIn = Event & {\n    __typename?: 'CheckIn';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: CheckInDetails;\n};\n\nexport type CheckInDetails = EventDetails & {\n    __typename?: 'CheckInDetails';\n    registrationData: AnimalRegistration;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type CheckOut = Event & {\n    __typename?: 'CheckOut';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: CheckOutDetails;\n};\n\nexport type CheckOutDetails = EventDetails & {\n    __typename?: 'CheckOutDetails';\n    temporary: Scalars['Boolean'];\n    newOwner: Scalars['String'];\n    /** Will be used similar object as FormerAnimalOwner */\n    document?: Maybe<Document>;\n    comments?: Maybe<Scalars['String']>;\n};\n\n/** Represents a chip company. */\nexport type ChipCompany = {\n    __typename?: 'ChipCompany';\n    /** Chip company id */\n    id: Scalars['String'];\n    /** Chip company value */\n    value: Scalars['String'];\n};\n\n/** Represents a chip install place. */\nexport type ChipInstallPlace = {\n    __typename?: 'ChipInstallPlace';\n    /** Chip install place id */\n    id: Scalars['String'];\n    /** Chip install place value */\n    value: Scalars['String'];\n};\n\n/** Represents a color. */\nexport type Color = {\n    __typename?: 'Color';\n    /** Color id */\n    id: Scalars['Int'];\n    /** Color name */\n    value: Scalars['String'];\n};\n\nexport type CreateAnimalInput = {\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image File */\n    image?: Maybe<Scalars['Upload']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration: AnimalRegistrationInput;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<CreateAnimalMicrochipInput>;\n};\n\nexport type CreateAnimalMicrochipInput = {\n    /** Microchip id (255 characters max) */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Install date (UTC timestamp) */\n    installDate?: Maybe<Scalars['String']>;\n    /** Install place */\n    installPlaceId: Scalars['Int'];\n    /** Microchip status ('Implanted' or 'Removed') */\n    status: MicrochipStatus;\n};\n\nexport type CreateAnimalOwnerInput = {\n    /** Animal owner name (255 characters max) */\n    name: Scalars['Name'];\n    /** Animal owner surname (255 characters max) */\n    surname: Scalars['Surname'];\n    /** Animal owner phone number (+370XXXXXXXX) */\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type CreateGivenAwayEventInput = {\n    /** Former owner id */\n    formerOwnerId: Scalars['Int'];\n    /** Event date in YYYY-MM-DD format */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id, e.g. 2 */\n    animalId: Scalars['Int'];\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n    /** Author */\n    author: Scalars['String'];\n};\n\nexport type CreateOrganisationInput = {\n    /** Organization name (255 characters max) */\n    name: Scalars['String'];\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone (64 characters max) */\n    phone?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n};\n\nexport type Document = {\n    __typename?: 'Document';\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Event = {\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: EventDetails;\n};\n\nexport type EventDetails = {\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport enum EventGroup {\n    General = 'General',\n    Medical = 'Medical',\n}\n\nexport enum EventType {\n    GivenAway = 'GivenAway',\n    Found = 'Found',\n    CheckIn = 'CheckIn',\n    CheckOut = 'CheckOut',\n    Died = 'Died',\n    TemporaryCare = 'TemporaryCare',\n    Microchipping = 'Microchipping',\n    LocationChange = 'LocationChange',\n    Medication = 'Medication',\n    Prophylaxis = 'Prophylaxis',\n    Surgery = 'Surgery',\n    GenderElimination = 'GenderElimination',\n    Inspection = 'Inspection',\n}\n\n/** Represents a favorite animal. */\nexport type FavoriteAnimal = {\n    __typename?: 'FavoriteAnimal';\n    /** Animal id */\n    animalId: Scalars['Int'];\n    /** User id */\n    userId: Scalars['String'];\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n};\n\nexport type Found = Event & {\n    __typename?: 'Found';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: FoundDetails;\n};\n\nexport type FoundDetails = EventDetails & {\n    __typename?: 'FoundDetails';\n    street?: Maybe<Scalars['String']>;\n    houseNo?: Maybe<Scalars['String']>;\n    municipalityId: Scalars['Int'];\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type FoundEvent = {\n    __typename?: 'FoundEvent';\n    id: Scalars['Int'];\n    street: Scalars['String'];\n    houseNo?: Maybe<Scalars['String']>;\n    municipalityId: Scalars['Int'];\n    date?: Maybe<Scalars['Date']>;\n    animalId: Scalars['Int'];\n    author: Author;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type FoundEventInput = {\n    street: Scalars['String'];\n    houseNo?: Maybe<Scalars['String']>;\n    municipalityId: Scalars['Int'];\n    date?: Maybe<Scalars['Date']>;\n    animalId: Scalars['Int'];\n    author: Scalars['String'];\n    comments?: Maybe<Scalars['String']>;\n};\n\n/** Represents a gender. */\nexport type Gender = {\n    __typename?: 'Gender';\n    /** Gender id */\n    id: Scalars['String'];\n    /** Gender name */\n    value: Scalars['String'];\n};\n\nexport type GivenAway = Event & {\n    __typename?: 'GivenAway';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: GivenAwayDetails;\n};\n\nexport type GivenAwayDetails = EventDetails & {\n    __typename?: 'GivenAwayDetails';\n    formerOwner: AnimalOwner;\n    reason?: Maybe<Scalars['String']>;\n    comments?: Maybe<Scalars['String']>;\n};\n\n/** Represents given away animal event */\nexport type GivenAwayEvent = {\n    __typename?: 'GivenAwayEvent';\n    /** Event id */\n    id: Scalars['Int'];\n    /** Former owner id */\n    formerOwnerId: Scalars['Int'];\n    /** Event date */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id */\n    animalId: Scalars['Int'];\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n    /** Author */\n    author: Author;\n};\n\nexport type LocationChange = Event & {\n    __typename?: 'LocationChange';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: LocationChangeDetails;\n};\n\nexport type LocationChangeDetails = EventDetails & {\n    __typename?: 'LocationChangeDetails';\n    location: Scalars['String'];\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type Medication = Event & {\n    __typename?: 'Medication';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: MedicationDetails;\n};\n\nexport type MedicationDetails = EventDetails & {\n    __typename?: 'MedicationDetails';\n    treatment: Scalars['String'];\n    expenses?: Maybe<Scalars['Float']>;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport enum MicrochipStatus {\n    Implanted = 'Implanted',\n    Removed = 'Removed',\n}\n\nexport type Microchipping = Event & {\n    __typename?: 'Microchipping';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: MicrochippingDetails;\n};\n\nexport type MicrochippingDetails = EventDetails & {\n    __typename?: 'MicrochippingDetails';\n    microchip: AnimalMicrochip;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    /** Created animal */\n    createAnimal?: Maybe<Animal>;\n    /** Updated animal */\n    updateAnimal?: Maybe<Animal>;\n    /** Deleted animal */\n    deleteAnimal?: Maybe<Animal>;\n    /** Delete animal details */\n    deleteAnimalDetails?: Maybe<AnimalDetails>;\n    createFoundEvent?: Maybe<FoundEvent>;\n    /** Deleted microchip */\n    deleteAnimalMicrochip?: Maybe<AnimalMicrochip>;\n    createAnimalOwner?: Maybe<AnimalOwner>;\n    updateAnimalOwner?: Maybe<AnimalOwner>;\n    /** Delete animal registration */\n    deleteAnimalRegistration?: Maybe<AnimalRegistration>;\n    /** Added animal to favorite animals */\n    createFavoriteAnimal?: Maybe<FavoriteAnimal>;\n    /** Removed animal from favorite animals */\n    deleteFavoriteAnimal?: Maybe<FavoriteAnimal>;\n    /** Created animal event given away */\n    createGivenAwayEvent?: Maybe<GivenAwayEvent>;\n    /** Updated animal event given away */\n    updateGivenAwayEvent?: Maybe<GivenAwayEvent>;\n    _empty?: Maybe<Scalars['String']>;\n    /** Created organization */\n    createOrganization?: Maybe<Organization>;\n    /** Updated organization */\n    updateOrganization?: Maybe<Organization>;\n    /** Deleted organization */\n    deleteOrganization?: Maybe<Organization>;\n    /** Created user */\n    createUser?: Maybe<User>;\n    /** Updated user */\n    updateUser?: Maybe<User>;\n    /** Deleted user */\n    deleteUser?: Maybe<User>;\n};\n\nexport type MutationCreateAnimalArgs = {\n    input: CreateAnimalInput;\n};\n\nexport type MutationUpdateAnimalArgs = {\n    input: UpdateAnimalInput;\n};\n\nexport type MutationDeleteAnimalArgs = {\n    input: DeleteAnimalInput;\n};\n\nexport type MutationDeleteAnimalDetailsArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateFoundEventArgs = {\n    input: FoundEventInput;\n};\n\nexport type MutationDeleteAnimalMicrochipArgs = {\n    animalId: Scalars['Int'];\n    microchipId: Scalars['String'];\n};\n\nexport type MutationCreateAnimalOwnerArgs = {\n    input: CreateAnimalOwnerInput;\n};\n\nexport type MutationUpdateAnimalOwnerArgs = {\n    input: UpdateAnimalOwnerInput;\n};\n\nexport type MutationDeleteAnimalRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateFavoriteAnimalArgs = {\n    animalId: Scalars['Int'];\n};\n\nexport type MutationDeleteFavoriteAnimalArgs = {\n    animalId: Scalars['Int'];\n};\n\nexport type MutationCreateGivenAwayEventArgs = {\n    input: CreateGivenAwayEventInput;\n};\n\nexport type MutationUpdateGivenAwayEventArgs = {\n    input: UpdateGivenAwayEventInput;\n};\n\nexport type MutationCreateOrganizationArgs = {\n    input: CreateOrganisationInput;\n};\n\nexport type MutationUpdateOrganizationArgs = {\n    input: UpdateOrganizationInput;\n};\n\nexport type MutationDeleteOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationDeleteUserArgs = {\n    id: Scalars['String'];\n};\n\n/** Represents an organization. */\nexport type Organization = {\n    __typename?: 'Organization';\n    /** Organization id, for example 2 */\n    id: Scalars['Int'];\n    /** Organization name */\n    name?: Maybe<Scalars['String']>;\n    /** Country */\n    country?: Maybe<Scalars['String']>;\n    /** City */\n    city?: Maybe<Scalars['String']>;\n    /** Comments */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone */\n    phone?: Maybe<Scalars['String']>;\n    /** Modification time */\n    modTime: Scalars['String'];\n    /** Delete time */\n    deleteTime?: Maybe<Scalars['String']>;\n};\n\nexport type OrganizationTask = {\n    __typename?: 'OrganizationTask';\n    id: Scalars['Int'];\n    title?: Maybe<Scalars['String']>;\n    description?: Maybe<Scalars['String']>;\n    organization: Scalars['Int'];\n    isDone?: Maybe<Scalars['Boolean']>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n    __typename?: 'PageInfo';\n    /** When paginating forwards, are there more items? */\n    hasNextPage: Scalars['Boolean'];\n    /** When paginating backwards, are there more items? */\n    hasPreviousPage: Scalars['Boolean'];\n    /** When paginating backwards, the cursor to continue. */\n    startCursor?: Maybe<Scalars['String']>;\n    /** When paginating forwards, the cursor to continue. */\n    endCursor?: Maybe<Scalars['String']>;\n    totalCount: Scalars['Int'];\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    /**\n     * Lookup an animal.\n     *\n     * Examples:\n     *\n     * animal(id: 1)\n     */\n    animal?: Maybe<Animal>;\n    /**\n     * Get all animals or animals filtered by animal ids, species, gender and breed ids.\n     *\n     * Examples:\n     *\n     * animals\n     * animals(ids: [1, 2, 3])\n     * animals(species: [1, 4], gender: [1, 2], breed: [205, 51])\n     * animals(first: 5)\n     */\n    animals?: Maybe<AnimalsConnection>;\n    foundEvents?: Maybe<Array<Maybe<FoundEvent>>>;\n    /**\n     * Get all animal owners.\n     *\n     * Examples:\n     *\n     * animalOwners\n     */\n    animalOwners?: Maybe<Array<Maybe<AnimalOwner>>>;\n    /**\n     * Get a animal owner with a specific ID.\n     *\n     * Examples:\n     *\n     * animalOwner(id: 1)\n     */\n    animalOwner?: Maybe<AnimalOwner>;\n    registration?: Maybe<AnimalRegistration>;\n    /**\n     * Get all breeds.\n     *\n     * Examples:\n     *\n     * breeds(species: \"2\", language: \"lt\")\n     */\n    breeds?: Maybe<Array<Maybe<Breed>>>;\n    /**\n     * Get all chipCompanies.\n     *\n     * Examples:\n     *\n     * chipCompanies(language: \"lt\")\n     */\n    chipCompanies?: Maybe<Array<Maybe<ChipCompany>>>;\n    /**\n     * Get all chipInstallPlaces.\n     *\n     * Examples:\n     *\n     * chipInstallPlaces(language: \"lt\")\n     */\n    chipInstallPlaces?: Maybe<Array<Maybe<ChipInstallPlace>>>;\n    /**\n     * Get all colors.\n     *\n     * Examples:\n     *\n     * colors(language: \"lt\")\n     */\n    colors?: Maybe<Array<Maybe<Color>>>;\n    /**\n     * Get all events\n     *\n     * Example:\n     * events\n     * events(animalId: 1)\n     */\n    events?: Maybe<Array<Maybe<Event>>>;\n    /**\n     * Get all favorite animals.\n     *\n     * Examples:\n     *\n     * favoriteAnimals\n     */\n    favoriteAnimals?: Maybe<Array<Maybe<Animal>>>;\n    /**\n     * Get all genders.\n     *\n     * Examples:\n     *\n     * genders(language: \"lt\")\n     */\n    genders?: Maybe<Array<Maybe<Gender>>>;\n    municipalities?: Maybe<Array<Maybe<Municipality>>>;\n    /**\n     * Lookup an organization.\n     *\n     * Examples:\n     *\n     * organization(id: 1)\n     */\n    organization?: Maybe<Organization>;\n    /**\n     * Get all organizations.\n     *\n     * Examples:\n     *\n     * organizations\n     */\n    organizations?: Maybe<Array<Maybe<Organization>>>;\n    organizationTasks?: Maybe<Array<Maybe<OrganizationTask>>>;\n    organizationTask?: Maybe<OrganizationTask>;\n    _empty?: Maybe<Scalars['String']>;\n    /**\n     * Get all species.\n     *\n     * Examples:\n     *\n     * species(language: \"lt\")\n     */\n    species?: Maybe<Array<Maybe<Species>>>;\n    /**\n     * Get all statuses.\n     *\n     * Examples:\n     *\n     * statuses(language: \"lt\")\n     */\n    statuses?: Maybe<Array<Maybe<Status>>>;\n    /**\n     * Lookup an user.\n     *\n     * Examples:\n     *\n     * user(id: 1)\n     */\n    user?: Maybe<User>;\n    /**\n     * Get all users.\n     *\n     * Examples:\n     *\n     * users\n     */\n    users?: Maybe<Array<Maybe<User>>>;\n};\n\nexport type QueryAnimalArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryAnimalsArgs = {\n    ids?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    species?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    gender?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    breed?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    after?: Maybe<Scalars['String']>;\n    first?: Maybe<Scalars['Int']>;\n    before?: Maybe<Scalars['String']>;\n    last?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryAnimalOwnerArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryBreedsArgs = {\n    species: Scalars['String'];\n    language: Scalars['String'];\n};\n\nexport type QueryChipCompaniesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryChipInstallPlacesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryColorsArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryEventsArgs = {\n    animalId?: Maybe<Scalars['Int']>;\n    groups?: Maybe<Array<Maybe<EventGroup>>>;\n};\n\nexport type QueryGendersArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryOrganizationTaskArgs = {\n    id?: Maybe<Scalars['Int']>;\n};\n\nexport type QuerySpeciesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryStatusesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryUserArgs = {\n    id: Scalars['String'];\n};\n\nexport enum RegistrationStatus {\n    Active = 'Active',\n    Inactive = 'Inactive',\n}\n\n/** Represents an user role. */\nexport type Role = {\n    __typename?: 'Role';\n    /** Organization id */\n    organizationId: Scalars['Int'];\n    /** User role in organization */\n    roleType?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Species = {\n    __typename?: 'Species';\n    /** Species id */\n    id: Scalars['String'];\n    /** Species name */\n    value: Scalars['String'];\n};\n\n/** Represents a status. */\nexport type Status = {\n    __typename?: 'Status';\n    /** Status id */\n    id: Scalars['String'];\n    /** Status name */\n    value: Scalars['String'];\n};\n\nexport type Subscription = {\n    __typename?: 'Subscription';\n    organizationCreated?: Maybe<Organization>;\n};\n\nexport type UpdateAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization?: Maybe<Scalars['Int']>;\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image File */\n    image?: Maybe<Scalars['Upload']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration?: Maybe<AnimalRegistrationInput>;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<UpdateAnimalMicrochipInput>;\n};\n\nexport type UpdateAnimalMicrochipInput = {\n    /** Chip company code (255 characters max) */\n    chipCompanyCode?: Maybe<Scalars['Int']>;\n    /** Install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Install place */\n    installPlaceId?: Maybe<Scalars['Int']>;\n    /** Microchip status ('Implanted' or 'Removed') */\n    status?: Maybe<MicrochipStatus>;\n};\n\nexport type UpdateAnimalOwnerInput = {\n    /** Animal owner ID, e.g., 1 */\n    id: Scalars['Int'];\n    /** Animal owner name (255 characters max) */\n    name?: Maybe<Scalars['Name']>;\n    /** Animal owner surname (255 characters max) */\n    surname?: Maybe<Scalars['Surname']>;\n    /** Animal owner phone number (+370XXXXXXXX) */\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type UpdateGivenAwayEventInput = {\n    /** Event id */\n    id: Scalars['Int'];\n    /** Former owner id */\n    formerOwnerId?: Maybe<Scalars['Int']>;\n    /** Event date in YYYY-MM-DD format */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id, e.g. 2 */\n    animalId?: Maybe<Scalars['Int']>;\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n    /** Author */\n    author: Scalars['String'];\n};\n\nexport type UpdateOrganizationInput = {\n    /** Organization id, for example 2 */\n    id: Scalars['Int'];\n    /** Organization name (255 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone (64 characters max) */\n    phone?: Maybe<Scalars['String']>;\n};\n\n/** Represents an user. */\nexport type User = {\n    __typename?: 'User';\n    /** User id, for example 2 */\n    id: Scalars['String'];\n    /** User username */\n    username: Scalars['String'];\n    /** User name */\n    name?: Maybe<Scalars['String']>;\n    /** User surname */\n    surname?: Maybe<Scalars['String']>;\n    /** User email */\n    email?: Maybe<Scalars['String']>;\n    /** User roles */\n    roles?: Maybe<Array<Maybe<Role>>>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n};\n\nexport type UserInput = {\n    /** User id  (255 characters max) */\n    id: Scalars['String'];\n    /** User username (128 characters max) */\n    username?: Maybe<Scalars['String']>;\n    /** User name (255 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** User surname (255 characters max) */\n    surname?: Maybe<Scalars['String']>;\n    /** User email (255 characters max) */\n    email?: Maybe<Scalars['String']>;\n};\n\nexport type Municipality = {\n    __typename?: 'municipality';\n    id: Scalars['Int'];\n    name: Scalars['String'];\n};\n","import { Event } from '../graphql/types';\n\nexport const sortEventsByDate = (event1: Event, event2: Event, descending = true) => {\n    if (!event1 || !event2) {\n        return 0;\n    }\n\n    const date1 = parseInt(event1.dateTime as string, 10);\n    const date2 = parseInt(event2.dateTime as string, 10);\n\n    return descending ? date2 - date1 : date1 - date2;\n};\n\nexport const getEventDetails = (event: Event) => [\n    {\n        title: 'Comments',\n        value: event.details?.comments || '-',\n    },\n    {\n        title: 'Author',\n        value: '-',\n    },\n];\n","import React from 'react';\n\nimport { Box, makeStyles, Typography } from '@material-ui/core';\n\nexport default function ParamTable({ details }: ParamTableProps) {\n    const classes = useStyles();\n\n    return (\n        <>\n            {details &&\n                details.map((item, index) => (\n                    <Box key={index} display=\"flex\" justifyContent=\"space-between\" className={classes.item} p={1}>\n                        <Typography className={classes.title} color=\"textPrimary\">\n                            {item.title}\n                        </Typography>\n                        <Typography className={classes.value} color=\"textSecondary\">\n                            {item.value}\n                        </Typography>\n                    </Box>\n                ))}\n        </>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    item: {\n        borderBottom: `1px solid ${theme.palette.grey['400']}`,\n        flexDirection: 'column',\n        [theme.breakpoints.up('sm')]: {\n            flexDirection: 'row',\n        },\n    },\n    title: {\n        flex: 1,\n        fontWeight: theme.typography.fontWeightBold,\n    },\n    value: {\n        flex: 1,\n        textAlign: 'left',\n        [theme.breakpoints.up('sm')]: {\n            flex: 3,\n            textAlign: 'right',\n        },\n    },\n}));\n\ninterface ParamTableProps {\n    details?: { title: string; value: string | number }[];\n}\n","import React, { useState } from 'react';\n\nimport { Card, CardContent, CardHeader, Collapse, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Event } from '../../../graphql/types';\nimport { getFormattedDate } from '../../../utils/date';\nimport { getEventDetails } from '../../../utils/events';\nimport ParamTable from '../ParamTable';\n\nexport default function EventCard({ event }: AnimalCardProps) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const eventName = event.type || '';\n    const header = `Event type - ${eventName}`;\n    const subHeader = `${event.dateTime ? getFormattedDate(event.dateTime) : '-'} / Author`;\n    const eventDetails = getEventDetails(event);\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        <LocalHospitalIcon />\n                    </Avatar>\n                }\n                title={\n                    <Typography component=\"h6\" className={classes.headerText} noWrap>\n                        {header}\n                    </Typography>\n                }\n                subheader={subHeader}\n                action={\n                    <IconButton aria-label=\"settings\">\n                        <MoreVertIcon />\n                    </IconButton>\n                }\n                onClick={() => setExpanded(!expanded)}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <ParamTable details={eventDetails} />\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    headerText: {\n        maxWidth: 150,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n        fontSize: 20,\n        lineHeight: '24px',\n        fontWeight: 600,\n    },\n    content: {\n        wordBreak: 'break-word',\n    },\n    label: {\n        fontWeight: theme.typography.fontWeightBold,\n    },\n}));\n\ninterface AnimalCardProps {\n    event: Event;\n}\n","import { format as formatFn } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nexport const getFormattedDate = (timestampString: string, format = 'yyyy-MM-dd'): string => {\n    const timestamp = Number.parseInt(timestampString, 10);\n\n    if (Number.isNaN(timestamp)) {\n        return '';\n    }\n\n    return formatFn(timestamp, format, { locale: ltLocale });\n};\n","import React from 'react';\n\nimport { Box, List, ListItem, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Event } from '../../../graphql/types';\nimport EventCard from './EventCard';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n    })\n);\n\ninterface AnimalEventListProps {\n    events: Event[];\n}\n\nfunction AnimalEventList({ events }: AnimalEventListProps) {\n    const classes = useStyles();\n\n    if (!events?.length) {\n        return (\n            <Box mt={2}>\n                <Typography variant=\"body1\">No events found.</Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <List className={classes.root}>\n            {events.map(event => (\n                <ListItem key={event.id} disableGutters>\n                    <EventCard event={event} />\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AnimalEventList;\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    })\n);\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const classes = useStyles();\n\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import React from 'react';\n\nimport { Box, IconButton, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nfunction AnimalDetailsHeader({ animalName, gender, species, color, breed, onBack }: AnimalDetailsHeaderProps) {\n    const classes = useStyles();\n\n    return (\n        <Box>\n            <Box display=\"flex\" alignItems=\"center\">\n                <IconButton className={classes.backButton} onClick={onBack}>\n                    <ArrowBackIcon className={classes.backIcon} />\n                </IconButton>\n                <Box display=\"flex\" flexGrow=\"1\" flexShrink=\"1\" flexBasis=\"auto\">\n                    {animalName && (\n                        <Typography variant=\"h3\" className={classes.innerName} noWrap>\n                            {animalName}\n                        </Typography>\n                    )}\n                </Box>\n                <IconButton aria-label=\"settings\">\n                    <MoreVertIcon className={classes.moreVertIcon} />\n                </IconButton>\n            </Box>\n            <Box display=\"flex\" flexWrap=\"wrap\" className={classes.mainParams}>\n                {species && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {species}\n                    </Typography>\n                )}\n                {gender && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {gender}\n                    </Typography>\n                )}\n                {color && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {color}\n                    </Typography>\n                )}\n                {breed && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {breed}\n                    </Typography>\n                )}\n            </Box>\n        </Box>\n    );\n}\n\nexport default AnimalDetailsHeader;\n\nconst useStyles = makeStyles(theme => ({\n    backButton: {\n        backgroundColor: theme.palette.primary.main,\n        '&:hover,&:focus': {\n            backgroundColor: theme.palette.primary.dark,\n        },\n        marginRight: theme.spacing(2),\n        height: '36px',\n        width: '36px',\n        [theme.breakpoints.up('md')]: {\n            height: '48px',\n            width: '48px',\n        },\n    },\n    backIcon: {\n        color: theme.palette.tertiary.light,\n    },\n    innerName: {\n        fontWeight: 500,\n        maxWidth: 180,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 340,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 480,\n        },\n    },\n    moreVertIcon: {\n        color: '#202020',\n    },\n    mainParams: {\n        padding: '8px 0',\n        fontSize: '12px',\n        [theme.breakpoints.up('md')]: {\n            padding: '12px 0',\n            fontSize: '14px',\n        },\n    },\n    property: {\n        color: '#666666',\n        fontSize: '12px',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '14px',\n        },\n        '&:not(:last-child)': {\n            paddingRight: theme.spacing(2),\n            marginRight: theme.spacing(2),\n            position: 'relative',\n            '&::after': {\n                color: '#999999',\n                content: '\"/\"',\n                display: 'block',\n                position: 'absolute',\n                top: 0,\n                right: 0,\n            },\n        },\n    },\n}));\n\ninterface AnimalDetailsHeaderProps {\n    animalName?: string | null;\n    species?: string | null;\n    gender?: string | null;\n    color?: string | null;\n    breed?: string | null;\n    onBack?: () => void;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    useMediaQuery,\n    useTheme,\n} from '@material-ui/core';\nimport { Event } from '../../../graphql/types';\n\ninterface AnimalEventDialogProps {\n    dialogOpen: boolean;\n    categoryOptions: string[];\n    typeOptions: string[];\n    onCancel: (showDialog: boolean) => void;\n    onCreate: (eventObject: Event) => void;\n}\n\nexport default function AnimalEventDialog({\n    dialogOpen,\n    categoryOptions,\n    typeOptions,\n    onCancel,\n    onCreate,\n}: AnimalEventDialogProps) {\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n    const { id: animalID } = useParams<{ id: string }>();\n\n    const [type, setType] = useState('');\n    const [category, setCategory] = useState('');\n    const [expenses, setExpenses] = useState('');\n    const [comment, setComment] = useState('');\n    const [date, setDate] = useState('');\n    const [typeError, setTypeError] = useState(false);\n    const [categoryError, setCategoryError] = useState(false);\n    const [expensesError, setExpensesError] = useState(false);\n    const [commentsError, setCommentsError] = useState(false);\n    const [dateError, setDateError] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        if (!typeError && !categoryError && !expensesError && !commentsError && !dateError) {\n            setError(false);\n        }\n    }, [typeError, categoryError, expensesError, commentsError, dateError]);\n\n    const handleEventTypeChange = event => {\n        setTypeError(false);\n        setType(event.target.value);\n    };\n\n    const handleEventCategoryChange = event => {\n        setCategoryError(false);\n        setCategory(event.target.value);\n    };\n\n    const handleEventExpensesChange = event => {\n        setExpensesError(false);\n        setExpenses(event.target.value);\n    };\n\n    const handleEventCommentsChange = event => {\n        setCommentsError(false);\n        setComment(event.target.value);\n    };\n\n    const handleEventDateChange = event => {\n        setDateError(false);\n        setDate(event.target.value);\n    };\n\n    const handleCreate = () => {\n        if (!type || !category || !expenses || !comment || !date) {\n            setError(true);\n            if (!type) {\n                setTypeError(true);\n            }\n            if (!category) {\n                setCategoryError(true);\n            }\n            if (!expenses) {\n                setExpensesError(true);\n            }\n            if (!comment) {\n                setCommentsError(true);\n            }\n            if (!date) {\n                setDateError(true);\n            }\n            return;\n        }\n        const newEventObject = createEvent(type, category, expenses, comment, date);\n        onCreate(newEventObject);\n        cleanup();\n    };\n\n    const handleCancel = () => {\n        cleanup();\n    };\n\n    const cleanup = () => {\n        setType('');\n        setCategory('');\n        setExpenses('');\n        setComment('');\n        setDate('');\n        setTypeError(false);\n        setCategoryError(false);\n        setExpensesError(false);\n        setCommentsError(false);\n        setDateError(false);\n        setError(false);\n        onCancel(false);\n    };\n\n    const createEvent = (_type, _group, _expenses, _comment, _date): Event => {\n        return {\n            author: {\n                id: '1',\n            },\n            createTime: '',\n            id: 123456,\n            animalId: +animalID,\n            group: _group,\n            type: _type,\n            details: {\n                comments: _comment,\n            },\n            dateTime: Date.parse(_date).toString(),\n        };\n    };\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={dialogOpen}\n            onClose={handleCancel}\n            fullScreen={fullScreen}\n            aria-labelledby=\"event-dialog-title\"\n        >\n            <DialogTitle id=\"event-dialog-title\">Create new event</DialogTitle>\n            <DialogContent>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <FormControl variant=\"outlined\" color=\"secondary\" fullWidth size=\"small\">\n                        <InputLabel id=\"type\">Type</InputLabel>\n                        <Select\n                            labelId=\"type\"\n                            label=\"Type\"\n                            value={type}\n                            onChange={handleEventTypeChange}\n                            error={typeError}\n                        >\n                            {typeOptions.map((option, index) => (\n                                <MenuItem key={index} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <FormControl variant=\"outlined\" color=\"secondary\" fullWidth size=\"small\">\n                        <InputLabel id=\"category\">Category</InputLabel>\n                        <Select\n                            labelId=\"category\"\n                            label=\"Category\"\n                            value={category}\n                            onChange={handleEventCategoryChange}\n                            error={categoryError}\n                        >\n                            {categoryOptions.map((option, index) => (\n                                <MenuItem key={index} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"expenses\"\n                        label=\"Expenses $\"\n                        value={expenses}\n                        onChange={handleEventExpensesChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        type=\"number\"\n                        error={expensesError}\n                        size=\"small\"\n                    />\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"comment\"\n                        label=\"Comments\"\n                        value={comment}\n                        onChange={handleEventCommentsChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        multiline\n                        rows={4}\n                        rowsMax={8}\n                        error={commentsError}\n                    />\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"date\"\n                        label=\"Date\"\n                        value={date}\n                        onChange={handleEventDateChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        type=\"date\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        error={dateError}\n                        size=\"small\"\n                    />\n                </Box>\n            </DialogContent>\n            <Box marginBottom={2} marginRight={2}>\n                <DialogActions>\n                    <Box flex=\"1\" marginLeft={2}>\n                        {error && (\n                            <Typography variant=\"body1\" color=\"error\">\n                                Please fill in all blank fields\n                            </Typography>\n                        )}\n                    </Box>\n\n                    <Button variant=\"outlined\" onClick={handleCancel} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleCreate} color=\"secondary\" variant=\"contained\">\n                        Create\n                    </Button>\n                </DialogActions>\n            </Box>\n        </Dialog>\n    );\n}\n","import React from 'react';\n\nimport { Chip, Grid, makeStyles } from '@material-ui/core';\nimport { EventGroup } from '../../../graphql/types';\n\nexport const EVENT_FILTER_ALL = 'All';\n\nexport type EventCategory = EventGroup | 'All';\n\nconst useStyles = makeStyles(() => ({\n    button: {\n        border: 'none',\n        backgroundColor: 'transparent',\n    },\n}));\n\nexport default function AnimalEventFilters({ activeFilter, onChange }: AnimalEventFiltersProps) {\n    return (\n        <Grid container spacing={2}>\n            <Filter\n                label={EVENT_FILTER_ALL}\n                active={activeFilter === EVENT_FILTER_ALL}\n                onClick={() => onChange(EVENT_FILTER_ALL)}\n            />\n            {Object.keys(EventGroup).map(category => (\n                <Filter\n                    key={category}\n                    label={category}\n                    active={activeFilter === EventGroup[category]}\n                    onClick={() => onChange(EventGroup[category])}\n                />\n            ))}\n        </Grid>\n    );\n}\n\nfunction Filter({ label, active, onClick }: FilterProps) {\n    const classes = useStyles();\n\n    return (\n        <Grid item>\n            <button className={classes.button} type=\"button\" onClick={() => onClick(label as any)}>\n                <Chip label={label} clickable color={active ? 'primary' : 'default'} />\n            </button>\n        </Grid>\n    );\n}\n\ninterface AnimalEventFiltersProps {\n    activeFilter: EventCategory;\n    onChange: (value: EventCategory) => void;\n}\n\ninterface FilterProps {\n    label: string;\n    active: boolean;\n    onClick: (value: EventCategory) => void;\n}\n","import React from 'react';\n\nimport { Box, Typography } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport SortIcon from '@material-ui/icons/Sort';\n\nexport default function AnimalEventSorting({ sortingMode, onChange }: AnimalEventSortingProps) {\n    const handleClick = () => {\n        if (sortingMode === EventSortingMode.DESCENDING) {\n            onChange(EventSortingMode.ASCENDING);\n        } else {\n            onChange(EventSortingMode.DESCENDING);\n        }\n    };\n\n    return (\n        <Box mt={1} display=\"flex\" alignItems=\"center\">\n            <IconButton aria-label=\"Sort button\" onClick={handleClick}>\n                <SortIcon />\n            </IconButton>\n            <Typography variant=\"subtitle1\">Sort by date ({sortingMode})</Typography>\n        </Box>\n    );\n}\n\ninterface AnimalEventSortingProps {\n    sortingMode: EventSortingMode;\n    onChange: (value: EventSortingMode) => void;\n}\n\nexport enum EventSortingMode {\n    DESCENDING = 'descending',\n    ASCENDING = 'ascending',\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Box, Button, makeStyles, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Event } from '../../../graphql/types';\nimport AnimalEventDialog from './AnimalEventDialog';\nimport AnimalEventFilters, { EVENT_FILTER_ALL, EventCategory } from './AnimalEventFilters';\nimport AnimalEventList from './AnimalEventList';\nimport AnimalEventSorting, { EventSortingMode } from './AnimalEventSorting';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        backgroundColor: theme.palette.tertiary.main,\n        // Full bleed effect on mobile\n        marginTop: theme.spacing(2),\n        marginLeft: -theme.spacing(2),\n        marginRight: -theme.spacing(2),\n        [theme.breakpoints.up('lg')]: {\n            margin: 0,\n        },\n    },\n}));\n\nconst TYPE_OPTIONS = [\n    'Ženklinimas ir įregistravimas',\n    'Laikytojo pasikeitimas',\n    'Laikymo vietos pasikeitimas',\n    'Savininko pasikeitimas',\n    'Dingimas',\n    'Suradimas',\n    'Nugaišimas',\n    'Nugaišinimas',\n    'Išvežimas',\n    'Vakcinavimas',\n    'Augintinio agresyvumas',\n];\n\nconst CATEGORY_OPTIONS = ['General', 'Medical'];\n\nexport default function AnimalEvents({ events }: AnimalEventsProps) {\n    const classes = useStyles();\n    const [activeFilter, setActiveFilter] = useState<EventCategory>(EVENT_FILTER_ALL);\n    const [activeSort, setActiveSort] = useState<EventSortingMode>(EventSortingMode.DESCENDING);\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    const handleDialogOpen = () => {\n        setDialogOpen(true);\n    };\n\n    const sortByDateComparator = useCallback(\n        (event1: Event, event2: Event) => {\n            if (!event1 || !event2) {\n                return 0;\n            }\n\n            const date1 = parseInt(event1.dateTime as string, 10);\n            const date2 = parseInt(event2.dateTime as string, 10);\n            if (activeSort === EventSortingMode.DESCENDING) {\n                return date2 - date1;\n            }\n            return date1 - date2;\n        },\n        [activeSort]\n    );\n\n    const memoizedEvents = useMemo(() => {\n        return [...events].sort(sortByDateComparator);\n    }, [events, sortByDateComparator]);\n\n    const [filteredEvents, setFilteredEvents] = useState(memoizedEvents);\n\n    const handleFilterChange = (value: EventCategory) => {\n        setActiveFilter(value);\n    };\n\n    const handleSortChange = (sortingMode: EventSortingMode) => {\n        setActiveSort(sortingMode);\n    };\n\n    useEffect(() => {\n        setFilteredEvents(\n            memoizedEvents.filter(event => event.group === activeFilter || activeFilter === EVENT_FILTER_ALL)\n        );\n    }, [activeFilter, memoizedEvents]);\n\n    return (\n        <Box className={classes.root}>\n            <Box mb={2} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"h5\" component=\"h3\">\n                    Events\n                </Typography>\n                <Button color=\"primary\" variant=\"contained\" startIcon={<AddIcon />} onClick={handleDialogOpen}>\n                    Create\n                </Button>\n                <AnimalEventDialog\n                    dialogOpen={dialogOpen}\n                    categoryOptions={CATEGORY_OPTIONS}\n                    typeOptions={TYPE_OPTIONS}\n                    onCancel={showDialog => {\n                        setDialogOpen(showDialog);\n                    }}\n                    onCreate={eventObject => {\n                        setFilteredEvents([...filteredEvents, eventObject]);\n                    }}\n                />\n            </Box>\n            <AnimalEventFilters activeFilter={activeFilter} onChange={handleFilterChange} />\n            <AnimalEventSorting sortingMode={activeSort} onChange={handleSortChange} />\n            <AnimalEventList events={filteredEvents} />\n        </Box>\n    );\n}\n\ninterface AnimalEventsProps {\n    events: Event[];\n}\n","import { loader } from 'graphql.macro';\nimport Image from 'material-ui-image';\nimport React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport { Animal, Event } from '../../graphql/types';\nimport { getAnimalDetails } from '../../utils/animal';\nimport LayoutMultiColRow from '../layout/LayoutMultiColRow';\nimport AnimalDetailsHeader from './details/AnimalDetailsHeader';\nimport AnimalEvents from './events/AnimalEvents';\nimport ParamTable from './ParamTable';\n\nconst GET_ANIMAL_DETAILS = loader('../../graphql/queries/animal-details.graphql');\n\ninterface RouterParams {\n    id: string;\n}\n\ninterface Response {\n    animal: Animal;\n    events: Event[];\n}\n\ninterface AnimalDetailsProps {\n    onLoad?: (animal: Animal) => void;\n}\n\nfunction AnimalDetails({ onLoad }: AnimalDetailsProps) {\n    const params: RouterParams = useParams();\n    const { id } = params;\n    const classes = useStyles();\n    const history = useHistory();\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n        onCompleted: ({ animal }) => (onLoad ? onLoad(animal) : undefined),\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height=\"70vh\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal, events = [] } = data;\n    const animalDetails = getAnimalDetails(animal);\n\n    return (\n        <div className={classes.root}>\n            <LayoutMultiColRow>\n                <>\n                    <AnimalDetailsHeader\n                        animalName={animal.name}\n                        gender={animal.details?.gender?.value}\n                        species={animal.details?.species?.value}\n                        color={animal.details?.color?.value}\n                        onBack={() => history.goBack()}\n                        breed={animal.details?.breed?.value}\n                    />\n                    <Image src={animal.imageUrl!} aspectRatio={3 / 2} cover />\n                    {animal.details && (\n                        <>\n                            <Box mt={3} mb={2}>\n                                {animal.microchip && (\n                                    <Typography variant=\"body1\" className={classes.secondaryProperty}>\n                                        {`Microchip Id - ${animal.microchip}`}\n                                    </Typography>\n                                )}\n                                {animal.registration && (\n                                    <Typography variant=\"body1\" className={classes.secondaryProperty}>\n                                        {`Registration No - ${animal.registration?.registrationNo}`}\n                                    </Typography>\n                                )}\n                            </Box>\n                            <Box mt={3} mb={2}>\n                                <ParamTable details={animalDetails} />\n                            </Box>\n                        </>\n                    )}\n                    <Box mt={1}>\n                        <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                    </Box>\n                </>\n                <Box className={classes.eventsContainer} py={3} px={2}>\n                    <AnimalEvents events={events} />\n                </Box>\n            </LayoutMultiColRow>\n        </div>\n    );\n}\n\nexport default AnimalDetails;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    animalName: {\n        color: theme.palette.primary.dark,\n    },\n    animalMeta: {\n        color: theme.palette.grey[600],\n    },\n    secondaryProperty: {\n        marginBottom: theme.spacing(2),\n        fontWeight: 500,\n    },\n    eventsHeader: {\n        fontWeight: 400,\n    },\n    eventsContainer: {\n        backgroundColor: theme.palette.tertiary.main,\n    },\n}));\n","import React from 'react';\n\nimport { Fade } from '@material-ui/core';\nimport AnimalDetails from '../components/animal/AnimalDetails';\nimport Page from './Page';\n\nfunction AnimalDetailsPage() {\n    return (\n        <Fade in timeout={600}>\n            <Page>\n                <AnimalDetails />\n            </Page>\n        </Fade>\n    );\n}\n\nexport default AnimalDetailsPage;\n"],"sourceRoot":""}