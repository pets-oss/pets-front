{"version":3,"sources":["utils/string.ts","graphql/types.ts","components/layout/LayoutAlignCenterBox.tsx","logo.svg","components/form/Selector.tsx","components/form/DynamicSelector.tsx","components/form/TextInput.tsx","components/animal/create/RichTextEditor.tsx","components/animal/create/DetailsStep.tsx","components/animal/create/MicrochipStep.tsx","components/animal/create/RegistrationStep.tsx","components/animal/create/AnimalForm.tsx","pages/NewAnimalPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","AnimalStatus","EventGroup","EventType","MicrochipStatus","RegistrationStatus","LayoutAlignCenterBox","props","children","display","justifyContent","width","Selector","options","name","defaultValue","disabled","optionsLimit","label","required","useFormContext","control","errors","formState","limitOptions","opts","state","createFilterOptions","rules","render","Autocomplete","field","filterOptions","getOptionLabel","option","getOptionSelected","id","onChange","_","renderInput","params","TextField","variant","color","margin","error","helperText","message","DynamicSelector","gqlOptions","data","useQuery","query","variables","skip","type","TextInput","placeholder","fullWidth","rightHelperText","showLettersCount","maxLength","InputLabelProps","classes","useStyles","register","useState","setValue","undefined","setError","useEffect","includes","split","obj","property","fieldRegister","e","val","target","length","trim","inputRef","ref","Typography","className","rightHelper","makeStyles","position","right","bottom","RichTextEditor","focused","setFocused","theme","focusedTheme","defaultTheme","stateToHTML","getCurrentContent","inlineToolbar","controls","onFocus","onBlur","FormHelperText","formHelperText","createMuiTheme","Object","assign","overrides","MUIRichTextEditor","root","border","borderRadius","padding","editor","height","wordBreak","top","left","palette","text","secondary","fontSize","fontWeight","transition","GET_SPECIES","GET_GENDERS","GET_BREEDS","GET_COLORS","GET_STATUSES","DetailsStep","history","useHistory","specie","useWatch","Grid","container","spacing","item","xs","sm","clsx","relative","language","species","shrink","Divider","style","Button","onClick","push","form","maxWidth","minWidth","memo","AnimalIncomingType","DEFAULT_VALUES","registration","incomingType","RESCUED","status","Active","createEvent","chip","Implanted","AnimalForm","methods","useForm","defaultValues","handleSubmit","formRef","useRef","alignItems","component","onSubmit","console","log","TopSection","Box","flexDirection","imageWrapper","src","logo","alt","image","fill","primary","dark","marginBottom","backgroundColor","light","breakpoints","up","NewAnimalPage","Fade","in","timeout","Page","topSection"],"mappings":"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","file":"static/js/15.290ddb0f.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n    /** Date scalar type is string matching `YYYY-MM-DD` format */\n    Date: any;\n    /** Name scalar is string maxLength: 255 */\n    Name: any;\n    /** Phone scalar is string pattern: /^\\+(370|371)\\d{8,10}$/ */\n    Phone: any;\n    /** Surname scalar is string maxLength: 255 */\n    Surname: any;\n    /** The `Upload` scalar type represents a file upload. */\n    Upload: any;\n};\n\n/** Represents an animal. */\nexport type Animal = {\n    __typename?: 'Animal';\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /**\n     * Animal status by language.\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n    /** Image URL */\n    imageUrl?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n    /** Animal active registration info */\n    registration?: Maybe<AnimalRegistration>;\n    /** Animal implanted microchip info */\n    microchip?: Maybe<AnimalMicrochip>;\n    /** Animal details */\n    details?: Maybe<AnimalDetails>;\n    /** Flag to determine if the current user has marked the animal as one of her/his favorites */\n    isFavorite?: Maybe<Scalars['Boolean']>;\n};\n\n/** Represents an animal. */\nexport type AnimalStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetails = {\n    __typename?: 'AnimalDetails';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /**\n     * Animal breed by language.\n     * Examples: breed(language: \"en\") or just breed - will return default language (\"lt\") translation\n     */\n    breed?: Maybe<Breed>;\n    /**\n     * Animal species by language\n     * Examples: species(language: \"en\") or just species - will return default language (\"lt\") translation\n     */\n    species?: Maybe<Species>;\n    /**\n     * Animal gender by language.\n     * Examples: gender(language: \"en\") or just gender - will return default language (\"lt\") translation\n     */\n    gender?: Maybe<Gender>;\n    /**\n     * Animal color by language\n     * Examples: color(language: \"en\") or just color - will return default language (\"lt\") translation\n     */\n    color?: Maybe<Color>;\n    /** Animal date of birth */\n    birthDate?: Maybe<Scalars['String']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Float']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsBreedArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsSpeciesArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsGenderArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsColorArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalDetailsInput = {\n    /** Animal breed id (any value from 'breeds' query) */\n    breedId?: Maybe<Scalars['Int']>;\n    /** Animal gender (any value from 'genders' query) */\n    genderId?: Maybe<Scalars['Int']>;\n    /** Animal color (any value from 'colors' query) */\n    colorId?: Maybe<Scalars['Int']>;\n    /** Animal date of birth (year) */\n    birthDate?: Maybe<Scalars['Date']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Int']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\n/** An edge in a connection. */\nexport type AnimalEdge = {\n    __typename?: 'AnimalEdge';\n    /** The item at the end of the edge */\n    node?: Maybe<Animal>;\n    /** A cursor for use in pagination */\n    cursor: Scalars['String'];\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochip = {\n    __typename?: 'AnimalMicrochip';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /** Microchip id */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Microchip install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Microchip install place */\n    installPlaceId: Scalars['Int'];\n    /**\n     * Microchip status ('Implanted' or 'Removed') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochipStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents a animal owner. */\nexport type AnimalOwner = {\n    __typename?: 'AnimalOwner';\n    /** Animal owner ID, e.g., 1 */\n    id: Scalars['Int'];\n    name: Scalars['Name'];\n    surname?: Maybe<Scalars['Surname']>;\n    phone?: Maybe<Scalars['Phone']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistration = {\n    __typename?: 'AnimalRegistration';\n    /** Registration number */\n    registrationNo: Scalars['String'];\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /**\n     * Registration status ('Active' or 'Inactive') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistrationStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalRegistrationInput = {\n    /** Registration number (255 characters max) */\n    registrationNo: Scalars['String'];\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration status ('Active' or 'Inactive') */\n    status?: Maybe<RegistrationStatus>;\n};\n\nexport enum AnimalStatus {\n    Healthy = 'healthy',\n    Vaccinated = 'vaccinated',\n    Sick = 'sick',\n    Adopted = 'adopted',\n}\n\n/** A connection to animals. */\nexport type AnimalsConnection = {\n    __typename?: 'AnimalsConnection';\n    /** Information for pagination. */\n    pageInfo: PageInfo;\n    /** A list of animal edges. */\n    edges: Array<AnimalEdge>;\n};\n\n/** Represents an app user */\nexport type Author = {\n    __typename?: 'Author';\n    /** id */\n    id: Scalars['String'];\n    /** User name */\n    name?: Maybe<Scalars['String']>;\n    /** User surname */\n    surname?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Breed = {\n    __typename?: 'Breed';\n    /** Breed id */\n    id: Scalars['Int'];\n    /** Breed abbreviation */\n    abbreviation: Scalars['String'];\n    /** Breed name */\n    value: Scalars['String'];\n};\n\nexport type CheckIn = Event & {\n    __typename?: 'CheckIn';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: CheckInDetails;\n};\n\nexport type CheckInDetails = EventDetails & {\n    __typename?: 'CheckInDetails';\n    registrationData: AnimalRegistration;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type CheckOut = Event & {\n    __typename?: 'CheckOut';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: CheckOutDetails;\n};\n\nexport type CheckOutDetails = EventDetails & {\n    __typename?: 'CheckOutDetails';\n    temporary: Scalars['Boolean'];\n    newOwner: Scalars['String'];\n    /** Will be used similar object as FormerAnimalOwner */\n    document?: Maybe<Document>;\n    comments?: Maybe<Scalars['String']>;\n};\n\n/** Represents a chip company. */\nexport type ChipCompany = {\n    __typename?: 'ChipCompany';\n    /** Chip company id */\n    id: Scalars['String'];\n    /** Chip company value */\n    value: Scalars['String'];\n};\n\n/** Represents a chip install place. */\nexport type ChipInstallPlace = {\n    __typename?: 'ChipInstallPlace';\n    /** Chip install place id */\n    id: Scalars['String'];\n    /** Chip install place value */\n    value: Scalars['String'];\n};\n\n/** Represents a color. */\nexport type Color = {\n    __typename?: 'Color';\n    /** Color id */\n    id: Scalars['Int'];\n    /** Color name */\n    value: Scalars['String'];\n};\n\nexport type CreateAnimalInput = {\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image File */\n    image?: Maybe<Scalars['Upload']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration: AnimalRegistrationInput;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<CreateAnimalMicrochipInput>;\n};\n\nexport type CreateAnimalMicrochipInput = {\n    /** Microchip id (255 characters max) */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Install date (UTC timestamp) */\n    installDate?: Maybe<Scalars['String']>;\n    /** Install place */\n    installPlaceId: Scalars['Int'];\n    /** Microchip status ('Implanted' or 'Removed') */\n    status: MicrochipStatus;\n};\n\nexport type CreateAnimalOwnerInput = {\n    name: Scalars['Name'];\n    surname?: Maybe<Scalars['Surname']>;\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type CreateGiveawayEventInput = {\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: Maybe<Scalars['String']>;\n    /** Former owner id */\n    formerOwnerId: Scalars['Int'];\n    /** Event date in YYYY-MM-DD format */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id, e.g. 2 */\n    animalId: Scalars['Int'];\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganisationInput = {\n    /** Organization name (255 characters max) */\n    name: Scalars['Name'];\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone (64 characters max) */\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type DeleteAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n};\n\nexport type Document = {\n    __typename?: 'Document';\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Event = {\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: EventDetails;\n};\n\nexport type EventDetails = {\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport enum EventGroup {\n    General = 'General',\n    Medical = 'Medical',\n    Registration = 'Registration',\n}\n\nexport enum EventType {\n    Giveaway = 'Giveaway',\n    Streetfind = 'Streetfind',\n    CheckIn = 'CheckIn',\n    CheckOut = 'CheckOut',\n    Died = 'Died',\n    TemporaryCare = 'TemporaryCare',\n    Microchipping = 'Microchipping',\n    LocationChange = 'LocationChange',\n    Medication = 'Medication',\n    Prophylaxis = 'Prophylaxis',\n    Surgery = 'Surgery',\n    GenderElimination = 'GenderElimination',\n    Inspection = 'Inspection',\n}\n\n/** Represents a favorite animal. */\nexport type FavoriteAnimal = {\n    __typename?: 'FavoriteAnimal';\n    /** Animal id */\n    animalId: Scalars['Int'];\n    /** User id */\n    userId: Scalars['String'];\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n};\n\n/** Represents a gender. */\nexport type Gender = {\n    __typename?: 'Gender';\n    /** Gender id */\n    id: Scalars['String'];\n    /** Gender name */\n    value: Scalars['String'];\n};\n\nexport type Giveaway = Event & {\n    __typename?: 'Giveaway';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: GiveawayDetails;\n};\n\nexport type GiveawayDetails = EventDetails & {\n    __typename?: 'GiveawayDetails';\n    registrationDate?: Maybe<Scalars['String']>;\n    registrationNo?: Maybe<Scalars['String']>;\n    formerOwner: AnimalOwner;\n    reason?: Maybe<Scalars['String']>;\n    comments?: Maybe<Scalars['String']>;\n};\n\n/** Represents Giveaway event */\nexport type GiveawayEvent = {\n    __typename?: 'GiveawayEvent';\n    /** Event id */\n    id: Scalars['Int'];\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: Maybe<Scalars['String']>;\n    /** Former owner id */\n    formerOwnerId: Scalars['Int'];\n    /** Event date */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id */\n    animalId: Scalars['Int'];\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n    /** Author */\n    author: Author;\n};\n\nexport type LocationChange = Event & {\n    __typename?: 'LocationChange';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: LocationChangeDetails;\n};\n\nexport type LocationChangeDetails = EventDetails & {\n    __typename?: 'LocationChangeDetails';\n    location: Scalars['String'];\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type Medication = Event & {\n    __typename?: 'Medication';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: MedicationDetails;\n};\n\nexport type MedicationDetails = EventDetails & {\n    __typename?: 'MedicationDetails';\n    treatment: Scalars['String'];\n    expenses?: Maybe<Scalars['Float']>;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport enum MicrochipStatus {\n    Implanted = 'Implanted',\n    Removed = 'Removed',\n}\n\nexport type Microchipping = Event & {\n    __typename?: 'Microchipping';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: MicrochippingDetails;\n};\n\nexport type MicrochippingDetails = EventDetails & {\n    __typename?: 'MicrochippingDetails';\n    microchip: AnimalMicrochip;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    /** Created animal */\n    createAnimal?: Maybe<Animal>;\n    /** Updated animal */\n    updateAnimal?: Maybe<Animal>;\n    /** Deleted animal */\n    deleteAnimal?: Maybe<Animal>;\n    /** Delete animal details */\n    deleteAnimalDetails?: Maybe<AnimalDetails>;\n    /** Deleted microchip */\n    deleteAnimalMicrochip?: Maybe<AnimalMicrochip>;\n    createAnimalOwner?: Maybe<AnimalOwner>;\n    updateAnimalOwner?: Maybe<AnimalOwner>;\n    /** Delete animal registration */\n    deleteAnimalRegistration?: Maybe<AnimalRegistration>;\n    /** Create Giveaway event */\n    createGiveawayEvent?: Maybe<GiveawayEvent>;\n    /** Update Giveaway event */\n    updateGiveawayEvent?: Maybe<GiveawayEvent>;\n    createStreetfindEvent?: Maybe<StreetfindEvent>;\n    /** Added animal to favorite animals */\n    createFavoriteAnimal?: Maybe<FavoriteAnimal>;\n    /** Removed animal from favorite animals */\n    deleteFavoriteAnimal?: Maybe<FavoriteAnimal>;\n    _empty?: Maybe<Scalars['String']>;\n    createOrganization?: Maybe<Organization>;\n    updateOrganization?: Maybe<Organization>;\n    deleteOrganization?: Maybe<Organization>;\n    createUser?: Maybe<User>;\n    updateUser?: Maybe<User>;\n    deleteUser?: Maybe<User>;\n};\n\nexport type MutationCreateAnimalArgs = {\n    input: CreateAnimalInput;\n};\n\nexport type MutationUpdateAnimalArgs = {\n    input: UpdateAnimalInput;\n};\n\nexport type MutationDeleteAnimalArgs = {\n    input: DeleteAnimalInput;\n};\n\nexport type MutationDeleteAnimalDetailsArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationDeleteAnimalMicrochipArgs = {\n    animalId: Scalars['Int'];\n    microchipId: Scalars['String'];\n};\n\nexport type MutationCreateAnimalOwnerArgs = {\n    input: CreateAnimalOwnerInput;\n};\n\nexport type MutationUpdateAnimalOwnerArgs = {\n    input: UpdateAnimalOwnerInput;\n};\n\nexport type MutationDeleteAnimalRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateGiveawayEventArgs = {\n    input: CreateGiveawayEventInput;\n};\n\nexport type MutationUpdateGiveawayEventArgs = {\n    input: UpdateGiveawayEventInput;\n};\n\nexport type MutationCreateStreetfindEventArgs = {\n    input: StreetfindEventInput;\n};\n\nexport type MutationCreateFavoriteAnimalArgs = {\n    animalId: Scalars['Int'];\n};\n\nexport type MutationDeleteFavoriteAnimalArgs = {\n    animalId: Scalars['Int'];\n};\n\nexport type MutationCreateOrganizationArgs = {\n    input: CreateOrganisationInput;\n};\n\nexport type MutationUpdateOrganizationArgs = {\n    input: UpdateOrganizationInput;\n};\n\nexport type MutationDeleteOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationDeleteUserArgs = {\n    id: Scalars['String'];\n};\n\nexport type Organization = {\n    __typename?: 'Organization';\n    id: Scalars['Int'];\n    name?: Maybe<Scalars['Name']>;\n    country?: Maybe<Scalars['String']>;\n    city?: Maybe<Scalars['String']>;\n    streetAddress?: Maybe<Scalars['String']>;\n    phone?: Maybe<Scalars['Phone']>;\n    modTime: Scalars['String'];\n    deleteTime?: Maybe<Scalars['String']>;\n};\n\nexport type OrganizationTask = {\n    __typename?: 'OrganizationTask';\n    id: Scalars['Int'];\n    title?: Maybe<Scalars['String']>;\n    description?: Maybe<Scalars['String']>;\n    organization: Scalars['Int'];\n    isDone?: Maybe<Scalars['Boolean']>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n    __typename?: 'PageInfo';\n    /** When paginating forwards, are there more items? */\n    hasNextPage: Scalars['Boolean'];\n    /** When paginating backwards, are there more items? */\n    hasPreviousPage: Scalars['Boolean'];\n    /** When paginating backwards, the cursor to continue. */\n    startCursor?: Maybe<Scalars['String']>;\n    /** When paginating forwards, the cursor to continue. */\n    endCursor?: Maybe<Scalars['String']>;\n    totalCount: Scalars['Int'];\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    /**\n     * Lookup an animal.\n     *\n     * Examples:\n     *\n     * animal(id: 1)\n     */\n    animal?: Maybe<Animal>;\n    /**\n     * Get all animals or animals filtered by animal ids, species, gender and breed ids.\n     *\n     * Examples:\n     *\n     * animals\n     * animals(ids: [1, 2, 3])\n     * animals(species: [1, 4], gender: [1, 2], breed: [205, 51])\n     * animals(first: 5)\n     */\n    animals?: Maybe<AnimalsConnection>;\n    /**\n     * Get all animal owners.\n     *\n     * Examples:\n     *\n     * animalOwners\n     */\n    animalOwners?: Maybe<Array<Maybe<AnimalOwner>>>;\n    /**\n     * Get a animal owner with a specific ID.\n     *\n     * Examples:\n     *\n     * animalOwner(id: 1)\n     */\n    animalOwner?: Maybe<AnimalOwner>;\n    registration?: Maybe<AnimalRegistration>;\n    /**\n     * Get all breeds.\n     *\n     * Examples:\n     *\n     * breeds(species: \"2\", language: \"lt\")\n     */\n    breeds?: Maybe<Array<Maybe<Breed>>>;\n    /**\n     * Get all chipCompanies.\n     *\n     * Examples:\n     *\n     * chipCompanies(language: \"lt\")\n     */\n    chipCompanies?: Maybe<Array<Maybe<ChipCompany>>>;\n    /**\n     * Get all chipInstallPlaces.\n     *\n     * Examples:\n     *\n     * chipInstallPlaces(language: \"lt\")\n     */\n    chipInstallPlaces?: Maybe<Array<Maybe<ChipInstallPlace>>>;\n    /**\n     * Get all colors.\n     *\n     * Examples:\n     *\n     * colors(language: \"lt\")\n     */\n    colors?: Maybe<Array<Maybe<Color>>>;\n    /**\n     * Get all events\n     *\n     * Example:\n     * events\n     * events(animalId: 1)\n     */\n    events?: Maybe<Array<Maybe<Event>>>;\n    streetfindEvents?: Maybe<Array<Maybe<StreetfindEvent>>>;\n    /**\n     * Get all favorite animals.\n     *\n     * Examples:\n     *\n     * favoriteAnimals\n     */\n    favoriteAnimals?: Maybe<Array<Maybe<Animal>>>;\n    /**\n     * Get all genders.\n     *\n     * Examples:\n     *\n     * genders(language: \"lt\")\n     */\n    genders?: Maybe<Array<Maybe<Gender>>>;\n    municipalities?: Maybe<Array<Maybe<Municipality>>>;\n    /**\n     * Lookup an organization.\n     *\n     * Examples:\n     *\n     * organization(id: 1)\n     */\n    organization?: Maybe<Organization>;\n    /**\n     * Get all organizations.\n     *\n     * Examples:\n     *\n     * organizations\n     */\n    organizations?: Maybe<Array<Maybe<Organization>>>;\n    organizationTasks?: Maybe<Array<Maybe<OrganizationTask>>>;\n    organizationTask?: Maybe<OrganizationTask>;\n    _empty?: Maybe<Scalars['String']>;\n    /**\n     * Get all species.\n     *\n     * Examples:\n     *\n     * species(language: \"lt\")\n     */\n    species?: Maybe<Array<Maybe<Species>>>;\n    /**\n     * Get all statuses.\n     *\n     * Examples:\n     *\n     * statuses(language: \"lt\")\n     */\n    statuses?: Maybe<Array<Maybe<Status>>>;\n    /**\n     * Lookup an user.\n     *\n     * Examples:\n     *\n     * user(id: 1)\n     */\n    user?: Maybe<User>;\n    /**\n     * Get all users.\n     *\n     * Examples:\n     *\n     * users\n     */\n    users?: Maybe<Array<Maybe<User>>>;\n};\n\nexport type QueryAnimalArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryAnimalsArgs = {\n    ids?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    species?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    gender?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    breed?: Maybe<Array<Maybe<Scalars['Int']>>>;\n    isFavoriteOnly?: Maybe<Scalars['Boolean']>;\n    after?: Maybe<Scalars['String']>;\n    first?: Maybe<Scalars['Int']>;\n    before?: Maybe<Scalars['String']>;\n    last?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryAnimalOwnerArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryBreedsArgs = {\n    species: Scalars['String'];\n    language: Scalars['String'];\n};\n\nexport type QueryChipCompaniesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryChipInstallPlacesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryColorsArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryEventsArgs = {\n    animalId?: Maybe<Scalars['Int']>;\n    groups?: Maybe<Array<Maybe<EventGroup>>>;\n};\n\nexport type QueryGendersArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryOrganizationTaskArgs = {\n    id?: Maybe<Scalars['Int']>;\n};\n\nexport type QuerySpeciesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryStatusesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryUserArgs = {\n    id: Scalars['String'];\n};\n\nexport enum RegistrationStatus {\n    Active = 'Active',\n    Inactive = 'Inactive',\n}\n\n/** Represents an user role. */\nexport type Role = {\n    __typename?: 'Role';\n    organizationId: Scalars['Int'];\n    roleType?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Species = {\n    __typename?: 'Species';\n    /** Species id */\n    id: Scalars['String'];\n    /** Species name */\n    value: Scalars['String'];\n};\n\n/** Represents a status. */\nexport type Status = {\n    __typename?: 'Status';\n    /** Status id */\n    id: Scalars['String'];\n    /** Status name */\n    value: Scalars['String'];\n};\n\nexport type Streetfind = Event & {\n    __typename?: 'Streetfind';\n    id: Scalars['Int'];\n    animalId: Scalars['Int'];\n    group: EventGroup;\n    type: EventType;\n    dateTime: Scalars['String'];\n    createTime: Scalars['String'];\n    author: Author;\n    details: StreetfindDetails;\n};\n\nexport type StreetfindDetails = EventDetails & {\n    __typename?: 'StreetfindDetails';\n    registrationDate?: Maybe<Scalars['String']>;\n    registrationNo?: Maybe<Scalars['String']>;\n    street?: Maybe<Scalars['String']>;\n    houseNo?: Maybe<Scalars['String']>;\n    municipalityId: Scalars['Int'];\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type StreetfindEvent = {\n    __typename?: 'StreetfindEvent';\n    id: Scalars['Int'];\n    street: Scalars['String'];\n    houseNo?: Maybe<Scalars['String']>;\n    municipalityId: Scalars['Int'];\n    date?: Maybe<Scalars['Date']>;\n    animalId: Scalars['Int'];\n    author: Author;\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type StreetfindEventInput = {\n    /** Max 255 characters */\n    street: Scalars['String'];\n    /** Max 8 characters */\n    houseNo?: Maybe<Scalars['String']>;\n    /** Any id from municipalities query */\n    municipalityId: Scalars['Int'];\n    date?: Maybe<Scalars['Date']>;\n    animalId: Scalars['Int'];\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport type Subscription = {\n    __typename?: 'Subscription';\n    organizationCreated?: Maybe<Organization>;\n};\n\nexport type UpdateAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image File */\n    image?: Maybe<Scalars['Upload']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration?: Maybe<AnimalRegistrationInput>;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<UpdateAnimalMicrochipInput>;\n};\n\nexport type UpdateAnimalMicrochipInput = {\n    /** Chip company code (255 characters max, any id from query chipCompanies) */\n    chipCompanyCode?: Maybe<Scalars['Int']>;\n    /** Install date */\n    installDate?: Maybe<Scalars['Date']>;\n    /** Install place (any id from query chipInstallPlaces) */\n    installPlaceId?: Maybe<Scalars['Int']>;\n    /** Microchip status ('Implanted' or 'Removed') */\n    status?: Maybe<MicrochipStatus>;\n};\n\nexport type UpdateAnimalOwnerInput = {\n    /** Animal owner ID, e.g., 1 */\n    id: Scalars['Int'];\n    name?: Maybe<Scalars['Name']>;\n    surname?: Maybe<Scalars['Surname']>;\n    phone?: Maybe<Scalars['Phone']>;\n};\n\nexport type UpdateGiveawayEventInput = {\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: Maybe<Scalars['String']>;\n    /** Event id */\n    id: Scalars['Int'];\n    /** Former owner id */\n    formerOwnerId?: Maybe<Scalars['Int']>;\n    /** Event date in YYYY-MM-DD format */\n    date?: Maybe<Scalars['Date']>;\n    /** Animal id, e.g. 2 */\n    animalId?: Maybe<Scalars['Int']>;\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateOrganizationInput = {\n    id: Scalars['Int'];\n    name?: Maybe<Scalars['Name']>;\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    phone?: Maybe<Scalars['Phone']>;\n};\n\n/** Represents an user. */\nexport type User = {\n    __typename?: 'User';\n    id: Scalars['String'];\n    username: Scalars['String'];\n    name?: Maybe<Scalars['Name']>;\n    surname?: Maybe<Scalars['Surname']>;\n    email?: Maybe<Scalars['String']>;\n    roles?: Maybe<Array<Maybe<Role>>>;\n    modTime?: Maybe<Scalars['String']>;\n};\n\nexport type UserInput = {\n    /** User id  (255 characters max) */\n    id: Scalars['String'];\n    /** User username (128 characters max) */\n    username?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['Name']>;\n    surname?: Maybe<Scalars['Surname']>;\n    /** User email (255 characters max) */\n    email?: Maybe<Scalars['String']>;\n};\n\nexport type Municipality = {\n    __typename?: 'municipality';\n    id: Scalars['Int'];\n    name: Scalars['String'];\n};\n","import React from 'react';\n\nimport { Box } from '@material-ui/core';\n\ninterface Props {\n    children: React.ReactElement;\n}\n\nexport default function LayoutAlignCenterBox(props: Props) {\n    const { children } = props;\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" width=\"100%\">\n            {children}\n        </Box>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/logo.22754045.svg\";","import React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { capitalizeFirstLetter } from '../../utils/string';\n\nconst OPTIONS_LIMIT = 100;\n\nexport default function Selector({\n    options,\n    name,\n    defaultValue,\n    disabled,\n    optionsLimit = OPTIONS_LIMIT,\n    label,\n    required = false,\n}: SelectorProps) {\n    const {\n        control,\n        formState: { errors },\n    } = useFormContext();\n\n    const limitOptions = (opts, state) =>\n        createFilterOptions<DynamicSelectorOption | string>()(opts, state).slice(0, optionsLimit);\n\n    return (\n        <Controller\n            defaultValue={defaultValue ?? null}\n            rules={{ required: required ? 'Required' : false }}\n            render={props => (\n                <Autocomplete<DynamicSelectorOption | string>\n                    {...props}\n                    value={props.field.value ?? null}\n                    options={options ?? []}\n                    filterOptions={limitOptions}\n                    getOptionLabel={option => (typeof option === 'string' ? option : option.value)}\n                    getOptionSelected={(option, value) =>\n                        typeof option === 'string'\n                            ? option === value\n                            : (option as DynamicSelectorOption)?.id === (value as DynamicSelectorOption)?.id\n                    }\n                    onChange={(_, option) => {\n                        props.field.onChange(option);\n                    }}\n                    disabled={disabled}\n                    renderInput={params => (\n                        <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            color=\"secondary\"\n                            margin=\"dense\"\n                            error={!!errors[name]}\n                            label={label ?? capitalizeFirstLetter(name)}\n                            helperText={errors[name]?.message ?? required ? 'Required' : 'Optional'}\n                        />\n                    )}\n                />\n            )}\n            name={name}\n            control={control}\n        />\n    );\n}\n\nexport interface SelectorProps {\n    options?: string[] | DynamicSelectorOption[];\n    name: string;\n    disabled?: boolean;\n    defaultValue?: string | undefined;\n    optionsLimit?: number;\n    label?: string;\n    helperText?: string;\n    required?: boolean;\n}\n\nexport interface DynamicSelectorOption {\n    id: string;\n    value: string;\n}\n","import { DocumentNode } from 'graphql';\nimport React from 'react';\n\nimport { useQuery } from '@apollo/client';\nimport Selector, { DynamicSelectorOption, SelectorProps } from './Selector';\n\nexport default function DynamicSelector({\n    gqlOptions,\n    name,\n    defaultValue,\n    disabled,\n    helperText,\n    required,\n    label,\n}: DynamicSelectorProps) {\n    const { data } = useQuery<GqlResponse>(gqlOptions.query, {\n        variables: gqlOptions.variables,\n        skip: disabled,\n    });\n\n    return (\n        <Selector\n            options={data ? data[gqlOptions.type] : []}\n            name={name}\n            helperText={helperText}\n            defaultValue={defaultValue}\n            disabled={disabled}\n            required={required}\n            label={label}\n        />\n    );\n}\n\nexport interface DynamicSelectorProps extends SelectorProps {\n    gqlOptions: { query: DocumentNode; variables?: Record<string, any>; type: string };\n}\n\ninterface GqlResponse {\n    options: DynamicSelectorOption[];\n}\n","import React, { useEffect, useState } from 'react';\nimport { FieldError, useFormContext } from 'react-hook-form';\n\nimport { BaseTextFieldProps } from '@material-ui/core';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function TextInput({\n    label,\n    id,\n    name,\n    placeholder,\n    defaultValue,\n    fullWidth = false,\n    rightHelperText,\n    showLettersCount = false,\n    maxLength = 25,\n    required = false,\n    type = 'text',\n    InputLabelProps,\n}: TextInputProps) {\n    const classes = useStyles();\n    const {\n        register,\n        formState: { errors },\n    } = useFormContext();\n\n    const [value, setValue] = useState('');\n    const [error, setError] = useState<FieldError | undefined>(undefined);\n\n    const handleChange = (val: string) => {\n        if (val.length <= maxLength) {\n            setValue(val.trim());\n        }\n    };\n\n    useEffect(() => {\n        if (!name.includes('.')) {\n            setError(errors[name]);\n            return;\n        }\n        const [obj, property] = name.split('.');\n        setError(errors[obj] ? errors[obj][property] : undefined);\n    }, [errors, name]);\n\n    const fieldRegister = register(name, { required });\n\n    return (\n        <>\n            <TextField\n                label={label}\n                id={id}\n                type={type}\n                color=\"secondary\"\n                placeholder={placeholder}\n                variant=\"outlined\"\n                fullWidth={fullWidth}\n                margin=\"dense\"\n                name={name}\n                error={!!error}\n                helperText={error?.message ?? required ? 'Required' : 'Optional'}\n                InputLabelProps={InputLabelProps}\n                value={value}\n                onChange={e => handleChange(e.target.value)}\n                defaultValue={defaultValue}\n                inputRef={fieldRegister.ref}\n            />\n            {(showLettersCount || rightHelperText) && (\n                <Typography variant=\"caption\" color=\"textSecondary\" className={classes.rightHelper}>\n                    {rightHelperText ?? `${value.length}/${maxLength}`}\n                </Typography>\n            )}\n        </>\n    );\n}\n\nconst useStyles = makeStyles(() => ({\n    rightHelper: {\n        position: 'absolute',\n        right: 12,\n        bottom: 12,\n    },\n}));\n\ninterface TextInputProps extends BaseTextFieldProps {\n    name: string;\n    showLettersCount?: boolean;\n    maxLength?: number;\n    rightHelperText?: string;\n    required?: boolean;\n}\n","import { stateToHTML } from 'draft-js-export-html';\nimport MUIRichTextEditor from 'mui-rte';\nimport React, { useState } from 'react';\nimport { Controller } from 'react-hook-form';\n\nimport { FormHelperText, makeStyles } from '@material-ui/core';\nimport { createMuiTheme, MuiThemeProvider, Theme } from '@material-ui/core/styles';\n\nexport default function RichTextEditor({ name, maxLength }: RichTextEditorProps) {\n    const [focused, setFocused] = useState(false);\n\n    const classes = useStyles();\n    return (\n        <>\n            <Controller\n                name={name}\n                render={props => (\n                    <MuiThemeProvider theme={focused ? focusedTheme : defaultTheme}>\n                        <MUIRichTextEditor\n                            onChange={state => props.field.onChange(stateToHTML(state.getCurrentContent()))}\n                            label=\"Type here your description\"\n                            inlineToolbar\n                            maxLength={maxLength}\n                            controls={['bold', 'italic', 'underline', 'strikethrough', 'highlight', 'clear']}\n                            onFocus={() => setFocused(true)}\n                            onBlur={() => setFocused(false)}\n                        />\n                    </MuiThemeProvider>\n                )}\n            />\n            <FormHelperText className={classes.formHelperText} id=\"component-helper-text\">\n                Optional\n            </FormHelperText>\n        </>\n    );\n}\n\nconst defaultTheme = createMuiTheme();\nObject.assign(defaultTheme, {\n    overrides: {\n        MUIRichTextEditor: {\n            root: {\n                width: '100%',\n                border: '1px #c7c2be solid',\n                '&:hover': {\n                    border: `1px solid #202020`,\n                },\n                borderRadius: '4px',\n                padding: '0 14px',\n                position: 'relative',\n            },\n            editor: {\n                height: '150px',\n                wordBreak: 'break-word',\n            },\n        },\n    },\n});\n\nconst focusedTheme = createMuiTheme();\nObject.assign(focusedTheme, {\n    overrides: {\n        MUIRichTextEditor: {\n            root: {\n                width: '100%',\n                border: '2px solid #13493B',\n                borderRadius: '4px',\n                padding: '0 14px',\n                position: 'relative',\n            },\n            editor: {\n                height: '150px',\n                wordBreak: 'break-word',\n            },\n        },\n    },\n});\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    formHelperText: {\n        position: 'relative',\n        top: 5,\n        left: 15,\n        color: theme.palette.text.secondary,\n        fontSize: `0.85em`,\n        fontWeight: 400,\n        transition: 'all 0.2s',\n    },\n}));\n\ninterface RichTextEditorProps {\n    name: string;\n    maxLength: number;\n}\n","import clsx from 'clsx';\nimport { loader } from 'graphql.macro';\nimport React, { memo, useEffect } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\n\nimport { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport { Species } from '../../../graphql/types';\nimport DynamicSelector from '../../form/DynamicSelector';\nimport TextInput from '../../form/TextInput';\nimport RichTextEditor from './RichTextEditor';\n\nconst GET_SPECIES = loader('../../../graphql/queries/species.graphql');\nconst GET_GENDERS = loader('../../../graphql/queries/genders.graphql');\nconst GET_BREEDS = loader('../../../graphql/queries/breeds.graphql');\nconst GET_COLORS = loader('../../../graphql/queries/colors.graphql');\nconst GET_STATUSES = loader('../../../graphql/queries/statuses.graphql');\n\nfunction DetailsStep() {\n    const classes = useStyles();\n    const { control, setValue } = useFormContext();\n    const history = useHistory();\n\n    const specie = useWatch({\n        control,\n        name: 'details.specie',\n        defaultValue: undefined,\n    });\n\n    useEffect(() => {\n        setValue('breed', undefined);\n    }, [specie, setValue]);\n\n    const handleCancel = () => {\n        history.push('/animal-list');\n    };\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n                <Grid item xs={12} sm={4} className={clsx(classes.name, classes.relative)}>\n                    <TextInput name=\"name\" label=\"Name\" id=\"name\" fullWidth showLettersCount />\n                </Grid>\n            </Grid>\n            <Grid item xs={12} container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"details.specie\"\n                        label=\"Specie\"\n                        gqlOptions={{ query: GET_SPECIES, variables: { language: 'lt' }, type: 'species' }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"details.gender\"\n                        label=\"Gender\"\n                        gqlOptions={{ query: GET_GENDERS, variables: { language: 'lt' }, type: 'genders' }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"details.breed\"\n                        label=\"Breed\"\n                        disabled={!specie}\n                        gqlOptions={{\n                            query: GET_BREEDS,\n                            variables: { species: (specie as Species | undefined)?.id, language: 'lt' },\n                            type: 'breeds',\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"details.color\"\n                        label=\"Color\"\n                        gqlOptions={{ query: GET_COLORS, variables: { language: 'lt' }, type: 'colors' }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextInput\n                        type=\"date\"\n                        name=\"details.birthDate\"\n                        id=\"birthDate\"\n                        label=\"Birth date\"\n                        fullWidth\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextInput type=\"file\" name=\"image\" id=\"image\" fullWidth />\n                </Grid>\n                <Grid item xs={12} className={classes.relative}>\n                    <RichTextEditor name=\"description\" maxLength={200} />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"status\"\n                        gqlOptions={{ query: GET_STATUSES, variables: { language: 'lt' }, type: 'statuses' }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextInput name=\"details.weight\" id=\"weight\" label=\"Weight, kg\" type=\"number\" fullWidth />\n                </Grid>\n            </Grid>\n            <Grid item container>\n                <Divider style={{ width: '100%' }} />\n            </Grid>\n            <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n                <Grid item>\n                    <Button color=\"secondary\" variant=\"outlined\" onClick={handleCancel}>\n                        Cancel\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button type=\"submit\" color=\"secondary\" variant=\"contained\">\n                        Submit\n                    </Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nconst useStyles = makeStyles(() => ({\n    form: {\n        maxWidth: 800,\n    },\n    name: {\n        minWidth: 300,\n    },\n    relative: {\n        position: 'relative',\n    },\n    fullWidth: {\n        width: '100%',\n    },\n}));\n\nexport default memo(DetailsStep);\n","import React, { memo } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport TextInput from '../../form/TextInput';\n\nexport enum MicrochipStatus {\n    Implanted = 'implanted',\n    Removed = 'removed',\n}\n\nfunction MicrochipStep({ onPrev, onNext }: MicrochipStepProps) {\n    const { control } = useFormContext();\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12} container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <TextInput name=\"chip.id\" label=\"Microchip ID\" id=\"chip.id\" fullWidth />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextInput name=\"chip.companyId\" label=\"Microchip company ID\" id=\"chip.companyId\" fullWidth />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextInput\n                        type=\"date\"\n                        name=\"chip.installDate\"\n                        id=\"chip.installDate\"\n                        label=\"Microchip installation date\"\n                        fullWidth\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextInput\n                        name=\"chip.installPrice\"\n                        label=\"Microchip install price\"\n                        id=\"chip.installPrice\"\n                        fullWidth\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Controller\n                        rules={{ required: true }}\n                        control={control}\n                        name=\"chip.status\"\n                        render={props => (\n                            <RadioGroup value={props.field.value} onChange={(e, val) => props.field.onChange(val)}>\n                                <FormControlLabel\n                                    value={MicrochipStatus.Implanted}\n                                    control={<Radio size=\"small\" />}\n                                    label=\"Implanted\"\n                                />\n                                <FormControlLabel\n                                    value={MicrochipStatus.Removed}\n                                    control={<Radio size=\"small\" />}\n                                    label=\"Removed\"\n                                />\n                            </RadioGroup>\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item container>\n                <Divider style={{ width: '100%' }} />\n            </Grid>\n            <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n                <Grid item>\n                    <Button color=\"secondary\" variant=\"outlined\" onClick={onPrev}>\n                        Back\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button color=\"secondary\" variant=\"contained\" onClick={onNext}>\n                        Next\n                    </Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default memo(MicrochipStep);\n\ninterface MicrochipStepProps {\n    onPrev: () => void;\n    onNext: () => void;\n}\n","import React, { memo } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport { RegistrationStatus } from '../../../graphql/types';\nimport TextInput from '../../form/TextInput';\n\nexport enum AnimalIncomingType {\n    RESCUED = 'rescued',\n    GIVEN_AWAY = 'given_away',\n}\n\nfunction RegistrationStep({ onPrev }: RegistrationStepProps) {\n    const classes = useStyles();\n    const { control, register } = useFormContext();\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12} container spacing={2}>\n                <Grid item xs={12}>\n                    <Controller\n                        rules={{ required: true }}\n                        control={control}\n                        name=\"registration.incomingType\"\n                        render={props => (\n                            <RadioGroup value={props.field.value} onChange={(e, val) => props.field.onChange(val)}>\n                                <FormControlLabel\n                                    value={AnimalIncomingType.RESCUED}\n                                    control={<Radio size=\"small\" />}\n                                    label=\"Rescued\"\n                                />\n                                <FormControlLabel\n                                    value={AnimalIncomingType.GIVEN_AWAY}\n                                    control={<Radio size=\"small\" />}\n                                    label=\"Given away\"\n                                />\n                            </RadioGroup>\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} className={classes.relative}>\n                    <TextInput\n                        name=\"registration.nr\"\n                        label=\"Registration No.\"\n                        id=\"registration.nr\"\n                        fullWidth\n                        showLettersCount\n                        required\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextInput\n                        type=\"date\"\n                        name=\"registration.date\"\n                        label=\"Registration date\"\n                        id=\"registration.date\"\n                        fullWidth\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Controller\n                        rules={{ required: true }}\n                        control={control}\n                        name=\"registration.status\"\n                        render={props => (\n                            <RadioGroup value={props.field.value} onChange={(e, val) => props.field.onChange(val)}>\n                                <FormControlLabel\n                                    value={RegistrationStatus.Active}\n                                    control={<Radio size=\"small\" />}\n                                    label=\"Active\"\n                                />\n                                <FormControlLabel\n                                    value={RegistrationStatus.Inactive}\n                                    control={<Radio size=\"small\" />}\n                                    label=\"Inactive\"\n                                />\n                            </RadioGroup>\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <FormControlLabel\n                        control={<Checkbox size=\"small\" />}\n                        label=\"Create rescue event\"\n                        name=\"createEvent\"\n                        inputRef={register}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item container>\n                <Divider style={{ width: '100%' }} />\n            </Grid>\n            <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n                <Grid item>\n                    <Button color=\"secondary\" variant=\"outlined\" onClick={onPrev}>\n                        Back\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button type=\"submit\" color=\"secondary\" variant=\"contained\">\n                        Submit\n                    </Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default memo(RegistrationStep);\n\ninterface RegistrationStepProps {\n    onPrev: () => void;\n}\n\nconst useStyles = makeStyles(() => ({\n    relative: {\n        position: 'relative',\n    },\n}));\n","import React, { useRef } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { Grid, GridProps } from '@material-ui/core';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport { Breed, Color, Gender, RegistrationStatus, Species, Status } from '../../../graphql/types';\nimport LayoutAlignCenterBox from '../../layout/LayoutAlignCenterBox';\nimport DetailsStep from './DetailsStep';\nimport { MicrochipStatus } from './MicrochipStep';\nimport { AnimalIncomingType } from './RegistrationStep';\n\nconst DEFAULT_VALUES: AnimalFormData = {\n    name: '',\n    registration: {\n        incomingType: AnimalIncomingType.RESCUED,\n        status: RegistrationStatus.Active,\n    },\n    createEvent: false,\n    chip: {\n        status: MicrochipStatus.Implanted,\n    },\n};\n\nexport default function AnimalForm() {\n    const classes = useStyles();\n    const methods = useForm({ defaultValues: DEFAULT_VALUES });\n    const { handleSubmit } = methods;\n    const formRef = useRef<HTMLFormElement>(null);\n\n    const onSubmit = (data: AnimalFormData) => {\n        // eslint-disable-next-line no-console\n        console.log('FORM DATA: ', data);\n    };\n\n    return (\n        <LayoutAlignCenterBox>\n            <FormProvider {...methods}>\n                <Grid\n                    container\n                    spacing={2}\n                    alignItems=\"center\"\n                    component=\"form\"\n                    className={classes.form}\n                    onSubmit={handleSubmit(onSubmit)}\n                    ref={formRef}\n                >\n                    <DetailsStep />\n                </Grid>\n            </FormProvider>\n        </LayoutAlignCenterBox>\n    );\n}\n\nexport function FormRow({ children, ...props }: GridProps) {\n    return (\n        <Grid item xs={12} container spacing={2} {...props}>\n            {children}\n        </Grid>\n    );\n}\n\nconst useStyles = makeStyles(() => ({\n    form: {\n        maxWidth: 800,\n    },\n}));\n\nexport interface AnimalFormData {\n    name?: string;\n    organizationId?: number;\n    status?: Status;\n    image?: string;\n    description?: string;\n    details?: Details;\n    registration?: Registration;\n    chip?: Chip;\n    createEvent?: boolean;\n}\n\ninterface Details {\n    specie?: Species;\n    breed?: Breed;\n    gender?: Gender;\n    color?: Color;\n    birthDate?: string;\n    weight?: number;\n    allergy?: string;\n    food?: string;\n}\n\ninterface Chip {\n    id?: string;\n    companyId?: string;\n    installDate?: string;\n    installPrice?: string;\n    status?: string;\n}\n\ninterface Registration {\n    incomingType?: AnimalIncomingType;\n    nr?: string;\n    date?: string;\n    status?: RegistrationStatus;\n}\n","import React from 'react';\n\nimport { Box, Fade } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport AnimalForm from '../components/animal/create/AnimalForm';\nimport logo from '../logo.svg';\nimport Page from './Page';\n\nfunction NewAnimalPage() {\n    return (\n        <Fade in timeout={600}>\n            <Page topSection={<TopSection />}>\n                <AnimalForm />\n            </Page>\n        </Fade>\n    );\n}\n\nfunction TopSection() {\n    const classes = useStyles();\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n            <Box className={classes.imageWrapper}>\n                <img src={logo} alt=\"paw\" className={classes.image} />\n            </Box>\n            <Typography variant=\"h5\">New Animal</Typography>\n        </Box>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    image: {\n        fill: theme.palette.primary.dark,\n        width: '100%',\n    },\n    imageWrapper: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        width: 64,\n        height: 64,\n        borderRadius: '50%',\n        backgroundColor: theme.palette.primary.light,\n        [theme.breakpoints.up('md')]: {\n            padding: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n            width: 100,\n            height: 100,\n        },\n    },\n}));\n\nexport default NewAnimalPage;\n"],"sourceRoot":""}