{"version":3,"sources":["utils/string.ts","utils/animal.ts","components/form/SelectFilesDialog.tsx","components/layout/LayoutMultiColRow.tsx","components/animal/details/AnimalDetailsHeader.tsx","components/animal/details/AnimalDetailsMenu.tsx","components/animal/events/AnimalEventDialog.tsx","graphql/types.ts","components/animal/events/AnimalEventFilters.tsx","components/animal/ParamTable.tsx","components/animal/events/EventCard.tsx","utils/date.ts","utils/events.ts","components/animal/events/AnimalEventList.tsx","components/animal/events/AnimalEventSorting.tsx","components/animal/events/AnimalEvents.tsx","components/animal/AnimalDetails.tsx","pages/AnimalDetailsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","getAnimalDetails","animal","animalDetails","details","birthDay","title","birthDate","otherDetails","Object","keys","filter","key","map","__typename","PREVIEW_IMAGE_TYPES","INIT_DIALOG_STATE","visible","loading","error","RenderSelected","multiple","files","theme","imageStyles","container","paddingTop","height","image","width","maxWidth","position","objectFit","borderWidth","borderRadius","shape","borderColor","palette","grey","includes","type","src","URL","createObjectURL","aspectRatio","cover","style","imageStyle","file","index","name","PREFIX","classes","dropZone","dropZoneDisabled","dropZoneSelected","placeHolder","submitButtonWrap","submitButtonSpinner","StyledDialog","styled","Dialog","cursor","justifyContent","display","flexDirection","alignItems","borderStyle","outline","transition","backgroundColor","pointerEvents","border","padding","spacing","textAlign","color","secondary","main","top","left","marginTop","marginLeft","SelectFilesDialog","props","ref","onSubmit","accept","useTheme","useState","setFiles","dialogState","setDialogState","FILES_SELECTED","length","useDropzone","onDrop","selected","getRootProps","getInputProps","updateState","currentState","dialogEvents","setVisible","setLoading","setError","useImperativeHandle","onCancel","dropZoneClassname","clsx","fullWidth","open","TransitionProps","onExited","onClose","DialogTitle","id","DialogContent","Box","marginBottom","marginRight","className","Typography","variant","disabled","DialogActions","flex","Button","onClick","CircularProgress","size","forwardRef","LayoutMultiColRow","children","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","push","Grid","item","xs","sm","flexGrow","backButton","backIcon","innerName","mainParams","property","StyledBox","primary","dark","breakpoints","up","tertiary","light","fontWeight","fontSize","paddingRight","content","right","AnimalDetailsHeader","animalName","gender","species","breed","onBack","IconButton","flexShrink","flexBasis","noWrap","flexWrap","AnimalDetailsMenu","navigate","useNavigate","anchorEl","setAnchorEl","Boolean","handleClose","undefined","event","currentTarget","Menu","MenuListProps","TransitionComponent","Fade","MenuItem","AnimalEventDialog","dialogOpen","categoryOptions","typeOptions","onCreate","fullScreen","useMediaQuery","down","animalID","useParams","setType","category","setCategory","expenses","setExpenses","comment","setComment","date","setDate","typeError","setTypeError","categoryError","setCategoryError","expensesError","setExpensesError","commentsError","setCommentsError","dateError","setDateError","useEffect","handleCancel","cleanup","createEvent","_type","_group","_expenses","_comment","_date","author","createTime","animalId","group","comments","dateTime","parse","toString","FormControl","InputLabel","Select","labelId","label","onChange","target","option","TextField","multiline","rows","InputLabelProps","shrink","newEventObject","AnimalStatus","EventGroup","EventType","MicrochipStatus","RegistrationStatus","EVENT_FILTER_ALL","AnimalEventFilters","activeFilter","Filter","active","Chip","clickable","borderBottom","ParamTable","p","headerText","StyledCard","Card","wordBreak","EventCard","expanded","setExpanded","eventName","header","subHeader","timestampString","format","timestamp","parseInt","isNaN","formatFn","getFormattedDate","eventDetails","getEventDetails","CardHeader","avatar","Avatar","alt","component","subheader","action","Collapse","in","timeout","unmountOnExit","CardContent","StyledList","List","AnimalEventList","EventSortingMode","events","ListItem","disableGutters","mt","AnimalEventSorting","sortingMode","DESCENDING","ASCENDING","margin","TYPE_OPTIONS","CATEGORY_OPTIONS","AnimalEvents","setActiveFilter","activeSort","setActiveSort","setDialogOpen","sortByDateComparator","useCallback","event1","event2","date1","date2","memoizedEvents","useMemo","sort","filteredEvents","setFilteredEvents","mb","startIcon","showDialog","eventObject","GET_ANIMAL_DETAILS","UPDATE_ANIMAL_IMAGE","animalMeta","secondaryProperty","eventsHeader","eventsContainer","imageContainer","imageIcon","addImageButton","Root","AnimalDetails","onLoad","useMutation","updateAnimalImageMutation","uploadImageDialogRef","useRef","useQuery","variables","onCompleted","data","Skeleton","animation","onSelectedFilesSubmit","images","a","dialogRef","current","message","imageUrl","microchip","registration","registrationNo","dangerouslySetInnerHTML","__html","py","px","AnimalDetailsPage","Page"],"mappings":"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","file":"static/js/13.05ce5742.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { Animal } from '../graphql/types';\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n\nexport const sortAnimalsByDate = (animal1: Animal, animal2: Animal, descending = true) => {\n    if (!animal1 || !animal2) {\n        return 0;\n    }\n\n    const date1 = parseInt(animal1.modTime as string, 10);\n    const date2 = parseInt(animal2.modTime as string, 10);\n\n    return descending ? date2 - date1 : date1 - date2;\n};\n\nexport const getAnimalDetails = (animal: Animal) => {\n    const { details: animalDetails } = animal;\n\n    const birthDay = {\n        title: 'Birthday',\n        value: animalDetails?.birthDate ? getAnimalAge(animalDetails.birthDate) : '',\n    };\n\n    const weight = {\n        title: 'Weight',\n        value: animalDetails?.weight ? getAnimalWeight(animalDetails.weight) : '',\n    };\n\n    const otherDetails = animalDetails\n        ? Object.keys(animalDetails)\n              .filter(key => {\n                  return typeof animalDetails[key] === 'object' && animalDetails[key] !== null;\n              })\n              .map(key => {\n                  return { title: animalDetails[key].__typename, value: animalDetails[key].value };\n              })\n        : [];\n\n    return [birthDay, ...otherDetails, weight];\n};\n","import clsx from 'clsx';\nimport Image from 'mui-image';\nimport React, { forwardRef, Ref, useImperativeHandle, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nimport {\n    Box,\n    Button,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    styled,\n    Theme,\n    Typography,\n    useTheme,\n} from '@mui/material';\n\ninterface SelectFilesDialogProps {\n    multiple?: boolean;\n    title?: string;\n    accept?: string | string[];\n    onSubmit: (files: File[]) => void;\n}\n\ninterface RenderSelectedProps {\n    multiple: boolean;\n    files: File[];\n    theme?: Theme;\n}\n\ninterface DialogState {\n    visible: boolean;\n    loading: boolean;\n    error?: string | null;\n}\n\nexport interface DialogEventTypes {\n    setVisible: (value: boolean) => void;\n    setLoading: (value: boolean) => void;\n    setError: (value: string | null) => void;\n}\n\nconst PREVIEW_IMAGE_TYPES = ['image/gif', 'image/jpeg', 'image/png', 'image/jpg'];\nconst INIT_DIALOG_STATE = { visible: false, loading: false, error: null };\n\nconst RenderSelected = ({ multiple, files, theme }: RenderSelectedProps) => {\n    const imageStyles = {\n        container: {\n            paddingTop: 0,\n            height: 135,\n        },\n        image: {\n            height: 135,\n            width: 'auto',\n            maxWidth: '100%',\n            position: 'relative',\n            objectFit: 'contain',\n            borderWidth: 2,\n            borderRadius: theme?.shape?.borderRadius,\n            borderColor: theme?.palette?.grey?.['400'],\n        },\n    };\n\n    if (!multiple && files[0] && PREVIEW_IMAGE_TYPES.includes(files[0].type)) {\n        return (\n            <Image\n                src={URL.createObjectURL(files[0])}\n                aspectRatio={1}\n                cover={false}\n                style={imageStyles.container}\n                imageStyle={imageStyles.image}\n            />\n        );\n    }\n    return (\n        <ul>\n            {files.map((file: File, index) => (\n                <li key={`selected_${index}_${file.name}`}>{file.name}</li>\n            ))}\n        </ul>\n    );\n};\n\nconst PREFIX = 'SelectFilesDialog';\n\nconst classes = {\n    dropZone: `${PREFIX}-dropZone`,\n    dropZoneDisabled: `${PREFIX}-dropZoneDisabled`,\n    dropZoneSelected: `${PREFIX}-dropZoneSelected`,\n    placeHolder: `${PREFIX}-placeHolder`,\n    submitButtonWrap: `${PREFIX}-submitButtonWrap`,\n    submitButtonSpinner: `${PREFIX}-submitButtonSpinner`,\n};\n\nconst StyledDialog = styled(Dialog)(({ theme }) => ({\n    [classes.dropZone]: {\n        cursor: 'pointer',\n        position: 'relative',\n        width: '100%',\n        height: 135,\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        borderStyle: 'dashed',\n        borderWidth: 2,\n        borderRadius: theme.shape.borderRadius,\n        borderColor: theme.palette.grey['400'],\n        outline: 'none',\n        transition: 'background-color 222ms ease-in-out',\n        '&:hover': {\n            backgroundColor: theme.palette.grey['100'],\n        },\n    },\n    [classes.dropZoneDisabled]: {\n        pointerEvents: 'none',\n    },\n    [classes.dropZoneSelected]: {\n        pointerEvents: 'none',\n        border: 'none',\n    },\n    [classes.placeHolder]: {\n        padding: theme.spacing(1),\n        textAlign: 'center',\n        color: theme.palette.grey['400'],\n    },\n    [classes.submitButtonWrap]: {\n        position: 'relative',\n    },\n    [classes.submitButtonSpinner]: {\n        color: theme.palette.secondary.main,\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -10,\n        marginLeft: -10,\n    },\n}));\n\nfunction SelectFilesDialog(props: SelectFilesDialogProps, ref: Ref<unknown> | undefined) {\n    const { onSubmit, accept, multiple = false, title = 'Select file' } = props;\n\n    const theme = useTheme();\n\n    const [files, setFiles] = useState<File[]>([]);\n    const [dialogState, setDialogState] = useState<DialogState>(INIT_DIALOG_STATE);\n\n    const FILES_SELECTED = files.length !== 0;\n\n    const { getRootProps, getInputProps } = useDropzone({\n        accept,\n        multiple,\n        onDrop: selected => setFiles(selected),\n    });\n\n    const updateState = (key: string, value: boolean | string | null) =>\n        setDialogState(currentState => ({ ...currentState, [key]: value }));\n\n    const dialogEvents: DialogEventTypes = {\n        setVisible: value => updateState('visible', value),\n        setLoading: value => updateState('loading', value),\n        setError: value => updateState('error', value),\n    };\n\n    useImperativeHandle(ref, () => dialogEvents);\n\n    const cleanup = () => {\n        setFiles([]);\n        setDialogState(INIT_DIALOG_STATE);\n    };\n\n    const onCancel = () => dialogEvents.setVisible(false);\n\n    const handleSubmit = () => {\n        if (!files.length) {\n            return dialogEvents.setError('Please select a file');\n        }\n        return onSubmit(files);\n    };\n\n    const { loading, error } = dialogState;\n\n    const dropZoneClassname = clsx(classes.dropZone, {\n        [classes.dropZoneSelected]: FILES_SELECTED,\n        [classes.dropZoneDisabled]: loading,\n    });\n\n    return (\n        <StyledDialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={dialogState.visible}\n            TransitionProps={{\n                onExited: cleanup,\n            }}\n            onClose={onCancel}\n            aria-labelledby=\"file-upload-dialog-title\"\n        >\n            <DialogTitle id=\"file-upload-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <Box marginBottom={2} marginRight={2} {...getRootProps({ className: dropZoneClassname })}>\n                    {FILES_SELECTED ? (\n                        <RenderSelected multiple={multiple} files={files} theme={theme} />\n                    ) : (\n                        <Typography variant=\"body1\" className={classes.placeHolder}>\n                            Drag and drop an file here or click\n                        </Typography>\n                    )}\n                    <input {...getInputProps()} disabled={loading} />\n                </Box>\n            </DialogContent>\n            <Box marginBottom={2} marginRight={2}>\n                <DialogActions>\n                    <Box flex=\"1\" marginLeft={2}>\n                        {error && (\n                            <Typography variant=\"body1\" color=\"error\">\n                                {error}\n                            </Typography>\n                        )}\n                    </Box>\n                    <Button disabled={loading} variant=\"outlined\" onClick={onCancel} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <div className={classes.submitButtonWrap}>\n                        <Button disabled={loading} onClick={handleSubmit} color=\"secondary\" variant=\"contained\">\n                            Upload\n                        </Button>\n                        {loading && <CircularProgress size={20} className={classes.submitButtonSpinner} />}\n                    </div>\n                </DialogActions>\n            </Box>\n        </StyledDialog>\n    );\n}\n\nexport default forwardRef(SelectFilesDialog);\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@mui/material';\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div style={{ flexGrow: 1 }}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import React, { ReactNode } from 'react';\n\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { Box, IconButton, styled, Typography } from '@mui/material';\n\nconst PREFIX = 'AnimalDetailsHeader';\n\nconst classes = {\n    backButton: `${PREFIX}-backButton`,\n    backIcon: `${PREFIX}-backIcon`,\n    innerName: `${PREFIX}-innerName`,\n    mainParams: `${PREFIX}-mainParams`,\n    property: `${PREFIX}-property`,\n};\n\nconst StyledBox = styled(Box)(({ theme }) => ({\n    [classes.backButton]: {\n        backgroundColor: theme.palette.primary.main,\n        '&:hover,&:focus': {\n            backgroundColor: theme.palette.primary.dark,\n        },\n        marginRight: theme.spacing(2),\n        height: '36px',\n        width: '36px',\n        [theme.breakpoints.up('md')]: {\n            height: '48px',\n            width: '48px',\n        },\n    },\n    [classes.backIcon]: {\n        color: theme.palette.tertiary.light,\n    },\n    [classes.innerName]: {\n        fontWeight: 500,\n        maxWidth: 180,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 340,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 480,\n        },\n    },\n    [classes.mainParams]: {\n        padding: '8px 0',\n        fontSize: '12px',\n        [theme.breakpoints.up('md')]: {\n            padding: '12px 0',\n            fontSize: '14px',\n        },\n    },\n    [classes.property]: {\n        color: '#666666',\n        fontSize: '12px',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '14px',\n        },\n        '&:not(:last-child)': {\n            paddingRight: theme.spacing(2),\n            marginRight: theme.spacing(2),\n            position: 'relative',\n            '&::after': {\n                color: '#999999',\n                content: '\"/\"',\n                display: 'block',\n                position: 'absolute',\n                top: 0,\n                right: 0,\n            },\n        },\n    },\n}));\n\nfunction AnimalDetailsHeader({\n    animalName,\n    gender,\n    species,\n    color,\n    breed,\n    onBack,\n    children,\n}: AnimalDetailsHeaderProps) {\n    return (\n        <StyledBox>\n            <Box display=\"flex\" alignItems=\"center\">\n                <IconButton className={classes.backButton} onClick={onBack}>\n                    <ArrowBackIcon className={classes.backIcon} />\n                </IconButton>\n                <Box display=\"flex\" flexGrow=\"1\" flexShrink=\"1\" flexBasis=\"auto\">\n                    {animalName && (\n                        <Typography variant=\"h3\" className={classes.innerName} noWrap>\n                            {animalName}\n                        </Typography>\n                    )}\n                </Box>\n                {children}\n            </Box>\n            <Box display=\"flex\" flexWrap=\"wrap\" className={classes.mainParams}>\n                {species && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {species}\n                    </Typography>\n                )}\n                {gender && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {gender}\n                    </Typography>\n                )}\n                {color && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {color}\n                    </Typography>\n                )}\n                {breed && (\n                    <Typography variant=\"body2\" className={classes.property}>\n                        {breed}\n                    </Typography>\n                )}\n            </Box>\n        </StyledBox>\n    );\n}\n\nexport default AnimalDetailsHeader;\n\ninterface AnimalDetailsHeaderProps {\n    animalName?: string | null;\n    species?: string | null;\n    gender?: string | null;\n    color?: string | null;\n    breed?: string | null;\n    onBack?: () => void;\n    children: ReactNode;\n}\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { Fade, IconButton, Menu, MenuItem } from '@mui/material';\n\nfunction AnimalDetailsMenu({ id }) {\n    const navigate = useNavigate();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n    const handleClick = event => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    const handleEdit = () => {\n        navigate(`/animal/${id}/edit`);\n        handleClose();\n    };\n\n    return (\n        <>\n            <IconButton\n                aria-label=\"animal controls\"\n                aria-controls=\"animal-control-menu\"\n                aria-haspopup=\"true\"\n                aria-expanded={open ? 'true' : undefined}\n                onClick={handleClick}\n            >\n                <MoreVertIcon />\n            </IconButton>\n            <Menu\n                id=\"animal-control-menu\"\n                MenuListProps={{\n                    'aria-labelledby': 'fade-button',\n                }}\n                anchorEl={anchorEl}\n                open={open}\n                onClose={handleClose}\n                TransitionComponent={Fade}\n            >\n                <MenuItem onClick={handleEdit}>Edit</MenuItem>\n                <MenuItem onClick={handleClose}>...</MenuItem>\n            </Menu>\n        </>\n    );\n}\n\nexport default AnimalDetailsMenu;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    useMediaQuery,\n    useTheme,\n} from '@mui/material';\nimport { Event } from '../../../graphql/types';\n\ninterface AnimalEventDialogProps {\n    dialogOpen: boolean;\n    categoryOptions: string[];\n    typeOptions: string[];\n    onCancel: (showDialog: boolean) => void;\n    onCreate: (eventObject: Event) => void;\n}\n\nexport default function AnimalEventDialog({\n    dialogOpen,\n    categoryOptions,\n    typeOptions,\n    onCancel,\n    onCreate,\n}: AnimalEventDialogProps) {\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n    const { id: animalID } = useParams();\n\n    const [type, setType] = useState('');\n    const [category, setCategory] = useState('');\n    const [expenses, setExpenses] = useState('');\n    const [comment, setComment] = useState('');\n    const [date, setDate] = useState('');\n    const [typeError, setTypeError] = useState(false);\n    const [categoryError, setCategoryError] = useState(false);\n    const [expensesError, setExpensesError] = useState(false);\n    const [commentsError, setCommentsError] = useState(false);\n    const [dateError, setDateError] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        if (!typeError && !categoryError && !expensesError && !commentsError && !dateError) {\n            setError(false);\n        }\n    }, [typeError, categoryError, expensesError, commentsError, dateError]);\n\n    const handleEventTypeChange = event => {\n        setTypeError(false);\n        setType(event.target.value);\n    };\n\n    const handleEventCategoryChange = event => {\n        setCategoryError(false);\n        setCategory(event.target.value);\n    };\n\n    const handleEventExpensesChange = event => {\n        setExpensesError(false);\n        setExpenses(event.target.value);\n    };\n\n    const handleEventCommentsChange = event => {\n        setCommentsError(false);\n        setComment(event.target.value);\n    };\n\n    const handleEventDateChange = event => {\n        setDateError(false);\n        setDate(event.target.value);\n    };\n\n    const handleCreate = () => {\n        if (!type || !category || !expenses || !comment || !date) {\n            setError(true);\n            if (!type) {\n                setTypeError(true);\n            }\n            if (!category) {\n                setCategoryError(true);\n            }\n            if (!expenses) {\n                setExpensesError(true);\n            }\n            if (!comment) {\n                setCommentsError(true);\n            }\n            if (!date) {\n                setDateError(true);\n            }\n            return;\n        }\n        const newEventObject = createEvent(type, category, expenses, comment, date);\n        onCreate(newEventObject);\n        cleanup();\n    };\n\n    const handleCancel = () => {\n        cleanup();\n    };\n\n    const cleanup = () => {\n        setType('');\n        setCategory('');\n        setExpenses('');\n        setComment('');\n        setDate('');\n        setTypeError(false);\n        setCategoryError(false);\n        setExpensesError(false);\n        setCommentsError(false);\n        setDateError(false);\n        setError(false);\n        onCancel(false);\n    };\n\n    const createEvent = (_type, _group, _expenses, _comment, _date): Event => {\n        return {\n            author: {\n                id: '1',\n            },\n            createTime: '',\n            id: 123456,\n            animalId: +(animalID || 0),\n            group: _group,\n            type: _type,\n            details: {\n                comments: _comment,\n            },\n            dateTime: Date.parse(_date).toString(),\n        };\n    };\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={dialogOpen}\n            onClose={handleCancel}\n            fullScreen={fullScreen}\n            aria-labelledby=\"event-dialog-title\"\n        >\n            <DialogTitle id=\"event-dialog-title\">Create new event</DialogTitle>\n            <DialogContent>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <FormControl variant=\"outlined\" color=\"secondary\" fullWidth size=\"small\">\n                        <InputLabel id=\"type\">Type</InputLabel>\n                        <Select\n                            labelId=\"type\"\n                            label=\"Type\"\n                            value={type}\n                            onChange={handleEventTypeChange}\n                            error={typeError}\n                        >\n                            {typeOptions.map((option, index) => (\n                                <MenuItem key={index} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <FormControl variant=\"outlined\" color=\"secondary\" fullWidth size=\"small\">\n                        <InputLabel id=\"category\">Category</InputLabel>\n                        <Select\n                            labelId=\"category\"\n                            label=\"Category\"\n                            value={category}\n                            onChange={handleEventCategoryChange}\n                            error={categoryError}\n                        >\n                            {categoryOptions.map((option, index) => (\n                                <MenuItem key={index} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"expenses\"\n                        label=\"Expenses $\"\n                        value={expenses}\n                        onChange={handleEventExpensesChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        type=\"number\"\n                        error={expensesError}\n                        size=\"small\"\n                    />\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"comment\"\n                        label=\"Comments\"\n                        value={comment}\n                        onChange={handleEventCommentsChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        multiline\n                        rows={4}\n                        error={commentsError}\n                    />\n                </Box>\n                <Box marginTop={2.5} marginBottom={2.5}>\n                    <TextField\n                        id=\"date\"\n                        label=\"Date\"\n                        value={date}\n                        onChange={handleEventDateChange}\n                        variant=\"outlined\"\n                        fullWidth\n                        color=\"secondary\"\n                        type=\"date\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        error={dateError}\n                        size=\"small\"\n                    />\n                </Box>\n            </DialogContent>\n            <Box marginBottom={2} marginRight={2}>\n                <DialogActions>\n                    <Box flex=\"1\" marginLeft={2}>\n                        {error && (\n                            <Typography variant=\"body1\" color=\"error\">\n                                Please fill in all blank fields\n                            </Typography>\n                        )}\n                    </Box>\n\n                    <Button variant=\"outlined\" onClick={handleCancel} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleCreate} color=\"secondary\" variant=\"contained\">\n                        Create\n                    </Button>\n                </DialogActions>\n            </Box>\n        </Dialog>\n    );\n}\n","export type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n    /** Date scalar type is string matching `YYYY-MM-DD` format */\n    Date: any;\n    /** Email scalar is string maxLength: 255 pattern: /\\b[\\w.-]+@[\\w.-]+.\\w{2,4}\\b/ */\n    Email: any;\n    /** Name scalar is string maxLength: 255 */\n    Name: any;\n    /** Phone scalar is string pattern: /^\\+(370|371)\\d{8,10}$/ */\n    Phone: any;\n    /** Surname scalar is string maxLength: 255 */\n    Surname: any;\n    /** The `Upload` scalar type represents a file upload. */\n    Upload: any;\n};\n\n/** Represents an animal. */\nexport type Animal = {\n    __typename?: 'Animal';\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** Animal details */\n    details?: Maybe<AnimalDetails>;\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Image URL */\n    imageUrl?: Maybe<Scalars['String']>;\n    /** Flag to determine if the current user has marked the animal as one of her/his favorites */\n    isFavorite?: Maybe<Scalars['Boolean']>;\n    /** Animal implanted microchip info */\n    microchip?: Maybe<AnimalMicrochip>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n    /** Animal name */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /** Animal active registration info */\n    registration?: Maybe<AnimalRegistration>;\n    /**\n     * Animal status by language.\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal. */\nexport type AnimalStatusArgs = {\n    language?: InputMaybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetails = {\n    __typename?: 'AnimalDetails';\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /** Animal date of birth */\n    birthDate?: Maybe<Scalars['String']>;\n    /**\n     * Animal breed by language.\n     * Examples: breed(language: \"en\") or just breed - will return default language (\"lt\") translation\n     */\n    breed?: Maybe<Breed>;\n    /**\n     * Animal color by language\n     * Examples: color(language: \"en\") or just color - will return default language (\"lt\") translation\n     */\n    color?: Maybe<Color>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n    /**\n     * Animal gender by language.\n     * Examples: gender(language: \"en\") or just gender - will return default language (\"lt\") translation\n     */\n    gender?: Maybe<Gender>;\n    /**\n     * Animal species by language\n     * Examples: species(language: \"en\") or just species - will return default language (\"lt\") translation\n     */\n    species?: Maybe<Species>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Float']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsBreedArgs = {\n    language?: InputMaybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsColorArgs = {\n    language?: InputMaybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsGenderArgs = {\n    language?: InputMaybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsSpeciesArgs = {\n    language?: InputMaybe<Scalars['String']>;\n};\n\nexport type AnimalDetailsInput = {\n    /** Animal allergy */\n    allergy?: InputMaybe<Scalars['String']>;\n    /** Animal date of birth (year) */\n    birthDate?: InputMaybe<Scalars['Date']>;\n    /** Animal breed id (any value from 'breeds' query) */\n    breedId?: InputMaybe<Scalars['Int']>;\n    /** Animal color (any value from 'colors' query) */\n    colorId?: InputMaybe<Scalars['Int']>;\n    /** Animal food */\n    food?: InputMaybe<Scalars['String']>;\n    /** Animal gender (any value from 'genders' query) */\n    genderId?: InputMaybe<Scalars['Int']>;\n    /** Species breed id (any value from 'species' query) */\n    speciesId?: InputMaybe<Scalars['Int']>;\n    /** Animal weight (kg) */\n    weight?: InputMaybe<Scalars['Int']>;\n};\n\n/** An edge in a connection. */\nexport type AnimalEdge = {\n    __typename?: 'AnimalEdge';\n    /** A cursor for use in pagination */\n    cursor: Scalars['String'];\n    /** The item at the end of the edge */\n    node?: Maybe<Animal>;\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochip = {\n    __typename?: 'AnimalMicrochip';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Microchip install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Microchip install place */\n    installPlaceId: Scalars['Int'];\n    /** Microchip id */\n    microchipId: Scalars['String'];\n    /**\n     * Microchip status ('Implanted' or 'Removed') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochipStatusArgs = {\n    language?: InputMaybe<Scalars['String']>;\n};\n\n/** Represents a animal owner. */\nexport type AnimalOwner = {\n    __typename?: 'AnimalOwner';\n    /** Animal owner ID, e.g., 1 */\n    id: Scalars['Int'];\n    name: Scalars['Name'];\n    phone?: Maybe<Scalars['Phone']>;\n    surname?: Maybe<Scalars['Surname']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistration = {\n    __typename?: 'AnimalRegistration';\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration number */\n    registrationNo: Scalars['String'];\n    /**\n     * Registration status ('Active' or 'Inactive') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistrationStatusArgs = {\n    language?: InputMaybe<Scalars['String']>;\n};\n\nexport type AnimalRegistrationInput = {\n    registrationDate?: InputMaybe<Scalars['Date']>;\n    /** Registration number (255 characters max) */\n    registrationNo: Scalars['String'];\n    /** Registration status ('Active' or 'Inactive') */\n    status?: InputMaybe<RegistrationStatus>;\n};\n\nexport enum AnimalStatus {\n    Adopted = 'adopted',\n    Healthy = 'healthy',\n    Sick = 'sick',\n    Vaccinated = 'vaccinated',\n}\n\n/** A connection to animals. */\nexport type AnimalsConnection = {\n    __typename?: 'AnimalsConnection';\n    /** A list of animal edges. */\n    edges: Array<AnimalEdge>;\n    /** Information for pagination. */\n    pageInfo: PageInfo;\n};\n\n/** Represents an app user */\nexport type Author = {\n    __typename?: 'Author';\n    /** id */\n    id: Scalars['String'];\n    /** User name */\n    name?: Maybe<Scalars['String']>;\n    /** User surname */\n    surname?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Breed = {\n    __typename?: 'Breed';\n    /** Breed abbreviation */\n    abbreviation: Scalars['String'];\n    /** Breed id */\n    id: Scalars['Int'];\n    /** Breed name */\n    value: Scalars['String'];\n};\n\n/** Represents a breed with species. */\nexport type BreedWithSpecies = {\n    __typename?: 'BreedWithSpecies';\n    /** Breed abbreviation */\n    abbreviation: Scalars['String'];\n    /** Breed id */\n    id: Scalars['Int'];\n    /** Species id */\n    speciesId: Scalars['Int'];\n    /** Species name */\n    speciesValue: Scalars['String'];\n    /** Breed name */\n    value: Scalars['String'];\n};\n\nexport type CheckIn = Event & {\n    __typename?: 'CheckIn';\n    animalId: Scalars['Int'];\n    author: Author;\n    createTime: Scalars['String'];\n    dateTime: Scalars['String'];\n    details: CheckInDetails;\n    group: EventGroup;\n    id: Scalars['Int'];\n    type: EventType;\n};\n\nexport type CheckInDetails = EventDetails & {\n    __typename?: 'CheckInDetails';\n    comments?: Maybe<Scalars['String']>;\n    registrationData: AnimalRegistration;\n};\n\nexport type CheckOut = Event & {\n    __typename?: 'CheckOut';\n    animalId: Scalars['Int'];\n    author: Author;\n    createTime: Scalars['String'];\n    dateTime: Scalars['String'];\n    details: CheckOutDetails;\n    group: EventGroup;\n    id: Scalars['Int'];\n    type: EventType;\n};\n\nexport type CheckOutDetails = EventDetails & {\n    __typename?: 'CheckOutDetails';\n    comments?: Maybe<Scalars['String']>;\n    /** Will be used similar object as FormerAnimalOwner */\n    document?: Maybe<Document>;\n    newOwner: Scalars['String'];\n    temporary: Scalars['Boolean'];\n};\n\n/** Represents a chip company. */\nexport type ChipCompany = {\n    __typename?: 'ChipCompany';\n    /** Chip company id */\n    id: Scalars['String'];\n    /** Chip company value */\n    value: Scalars['String'];\n};\n\n/** Represents a chip install place. */\nexport type ChipInstallPlace = {\n    __typename?: 'ChipInstallPlace';\n    /** Chip install place id */\n    id: Scalars['String'];\n    /** Chip install place value */\n    value: Scalars['String'];\n};\n\n/** Represents a color. */\nexport type Color = {\n    __typename?: 'Color';\n    /** Color id */\n    id: Scalars['Int'];\n    /** Species Id */\n    speciesId?: Maybe<Scalars['Int']>;\n    /** Species Name */\n    speciesName?: Maybe<Scalars['String']>;\n    /** Color name */\n    value: Scalars['String'];\n};\n\nexport type CreateAnimalInput = {\n    /** Comments */\n    comments?: InputMaybe<Scalars['String']>;\n    /** AnimalDetails */\n    details?: InputMaybe<AnimalDetailsInput>;\n    /** Image File */\n    image?: InputMaybe<Scalars['Upload']>;\n    /** AnimalMicrochip */\n    microchip?: InputMaybe<CreateAnimalMicrochipInput>;\n    /** Animal name (128 characters max) */\n    name?: InputMaybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration?: InputMaybe<AnimalRegistrationInput>;\n    /** Status */\n    status?: InputMaybe<AnimalStatus>;\n};\n\nexport type CreateAnimalMicrochipInput = {\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Install date (UTC timestamp) */\n    installDate?: InputMaybe<Scalars['String']>;\n    /** Install place */\n    installPlaceId: Scalars['Int'];\n    /** Microchip id (255 characters max) */\n    microchipId: Scalars['String'];\n    /** Microchip status ('Implanted' or 'Removed') */\n    status: MicrochipStatus;\n};\n\nexport type CreateAnimalOwnerInput = {\n    name: Scalars['Name'];\n    phone?: InputMaybe<Scalars['Phone']>;\n    surname?: InputMaybe<Scalars['Surname']>;\n};\n\nexport type CreateGiveawayEventInput = {\n    /** Animal id, e.g. 2 */\n    animalId: Scalars['Int'];\n    /** Event date in YYYY-MM-DD format */\n    date?: InputMaybe<Scalars['Date']>;\n    /** Former owner id */\n    formerOwnerId: Scalars['Int'];\n    /** Event reason */\n    reason?: InputMaybe<Scalars['String']>;\n    /** Registration date */\n    registrationDate?: InputMaybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateOrganisationInput = {\n    /** City (128 characters max) */\n    city?: InputMaybe<Scalars['String']>;\n    /** Country (128 characters max) */\n    country?: InputMaybe<Scalars['String']>;\n    /** Organization name (255 characters max) */\n    name: Scalars['Name'];\n    /** Phone (64 characters max) */\n    phone?: InputMaybe<Scalars['Phone']>;\n    /** Street address (255 characters max) */\n    streetAddress?: InputMaybe<Scalars['String']>;\n};\n\nexport type DeleteAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n};\n\nexport type Document = {\n    __typename?: 'Document';\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Event = {\n    animalId: Scalars['Int'];\n    author: Author;\n    createTime: Scalars['String'];\n    dateTime: Scalars['String'];\n    details: EventDetails;\n    group: EventGroup;\n    id: Scalars['Int'];\n    type: EventType;\n};\n\nexport type EventDetails = {\n    comments?: Maybe<Scalars['String']>;\n};\n\nexport enum EventGroup {\n    General = 'General',\n    Medical = 'Medical',\n    Registration = 'Registration',\n}\n\nexport enum EventType {\n    CheckIn = 'CheckIn',\n    CheckOut = 'CheckOut',\n    Died = 'Died',\n    GenderElimination = 'GenderElimination',\n    Giveaway = 'Giveaway',\n    Inspection = 'Inspection',\n    LocationChange = 'LocationChange',\n    Medication = 'Medication',\n    Microchipping = 'Microchipping',\n    Prophylaxis = 'Prophylaxis',\n    Streetfind = 'Streetfind',\n    Surgery = 'Surgery',\n    TemporaryCare = 'TemporaryCare',\n}\n\n/** Represents a favorite animal. */\nexport type FavoriteAnimal = {\n    __typename?: 'FavoriteAnimal';\n    /** Animal id */\n    animalId: Scalars['Int'];\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n    /** User id */\n    userId: Scalars['String'];\n};\n\n/** Represents a gender. */\nexport type Gender = {\n    __typename?: 'Gender';\n    /** Gender id */\n    id: Scalars['Int'];\n    /** Gender name */\n    value: Scalars['String'];\n};\n\nexport type Giveaway = Event & {\n    __typename?: 'Giveaway';\n    animalId: Scalars['Int'];\n    author: Author;\n    createTime: Scalars['String'];\n    dateTime: Scalars['String'];\n    details: GiveawayDetails;\n    group: EventGroup;\n    id: Scalars['Int'];\n    type: EventType;\n};\n\nexport type GiveawayDetails = EventDetails & {\n    __typename?: 'GiveawayDetails';\n    comments?: Maybe<Scalars['String']>;\n    formerOwner: AnimalOwner;\n    reason?: Maybe<Scalars['String']>;\n    registrationDate?: Maybe<Scalars['String']>;\n    registrationNo?: Maybe<Scalars['String']>;\n};\n\n/** Represents Giveaway event */\nexport type GiveawayEvent = {\n    __typename?: 'GiveawayEvent';\n    /** Animal id */\n    animalId: Scalars['Int'];\n    /** Author */\n    author: Author;\n    /** Event date */\n    date?: Maybe<Scalars['Date']>;\n    /** Former owner id */\n    formerOwnerId: Scalars['Int'];\n    /** Event id */\n    id: Scalars['Int'];\n    /** Event reason */\n    reason?: Maybe<Scalars['String']>;\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: Maybe<Scalars['String']>;\n};\n\nexport type LocationChange = Event & {\n    __typename?: 'LocationChange';\n    animalId: Scalars['Int'];\n    author: Author;\n    createTime: Scalars['String'];\n    dateTime: Scalars['String'];\n    details: LocationChangeDetails;\n    group: EventGroup;\n    id: Scalars['Int'];\n    type: EventType;\n};\n\nexport type LocationChangeDetails = EventDetails & {\n    __typename?: 'LocationChangeDetails';\n    comments?: Maybe<Scalars['String']>;\n    location: Scalars['String'];\n};\n\nexport type Medication = Event & {\n    __typename?: 'Medication';\n    animalId: Scalars['Int'];\n    author: Author;\n    createTime: Scalars['String'];\n    dateTime: Scalars['String'];\n    details: MedicationDetails;\n    group: EventGroup;\n    id: Scalars['Int'];\n    type: EventType;\n};\n\nexport type MedicationDetails = EventDetails & {\n    __typename?: 'MedicationDetails';\n    comments?: Maybe<Scalars['String']>;\n    expenses?: Maybe<Scalars['Float']>;\n    treatment: Scalars['String'];\n};\n\nexport enum MicrochipStatus {\n    Implanted = 'Implanted',\n    Removed = 'Removed',\n}\n\nexport type Microchipping = Event & {\n    __typename?: 'Microchipping';\n    animalId: Scalars['Int'];\n    author: Author;\n    createTime: Scalars['String'];\n    dateTime: Scalars['String'];\n    details: MicrochippingDetails;\n    group: EventGroup;\n    id: Scalars['Int'];\n    type: EventType;\n};\n\nexport type MicrochippingDetails = EventDetails & {\n    __typename?: 'MicrochippingDetails';\n    comments?: Maybe<Scalars['String']>;\n    microchip: AnimalMicrochip;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    _empty?: Maybe<Scalars['String']>;\n    /** Created animal */\n    createAnimal?: Maybe<Animal>;\n    createAnimalOwner?: Maybe<AnimalOwner>;\n    /** Added animal to favorite animals */\n    createFavoriteAnimal?: Maybe<FavoriteAnimal>;\n    /** Create Giveaway event */\n    createGiveawayEvent?: Maybe<GiveawayEvent>;\n    createOrganization?: Maybe<Organization>;\n    createStreetfindEvent?: Maybe<StreetfindEvent>;\n    createUser?: Maybe<User>;\n    /** Deleted animal */\n    deleteAnimal?: Maybe<Animal>;\n    /** Delete animal details */\n    deleteAnimalDetails?: Maybe<AnimalDetails>;\n    /** Deleted microchip */\n    deleteAnimalMicrochip?: Maybe<AnimalMicrochip>;\n    /** Delete animal registration */\n    deleteAnimalRegistration?: Maybe<AnimalRegistration>;\n    /** Removed animal from favorite animals */\n    deleteFavoriteAnimal?: Maybe<FavoriteAnimal>;\n    deleteOrganization?: Maybe<Organization>;\n    deleteUser?: Maybe<User>;\n    /** Updated animal */\n    updateAnimal?: Maybe<Animal>;\n    updateAnimalOwner?: Maybe<AnimalOwner>;\n    /** Update Giveaway event */\n    updateGiveawayEvent?: Maybe<GiveawayEvent>;\n    updateOrganization?: Maybe<Organization>;\n    updateUser?: Maybe<User>;\n};\n\nexport type MutationCreateAnimalArgs = {\n    input: CreateAnimalInput;\n};\n\nexport type MutationCreateAnimalOwnerArgs = {\n    input: CreateAnimalOwnerInput;\n};\n\nexport type MutationCreateFavoriteAnimalArgs = {\n    animalId: Scalars['Int'];\n};\n\nexport type MutationCreateGiveawayEventArgs = {\n    input: CreateGiveawayEventInput;\n};\n\nexport type MutationCreateOrganizationArgs = {\n    input: CreateOrganisationInput;\n};\n\nexport type MutationCreateStreetfindEventArgs = {\n    input: StreetfindEventInput;\n};\n\nexport type MutationCreateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationDeleteAnimalArgs = {\n    input: DeleteAnimalInput;\n};\n\nexport type MutationDeleteAnimalDetailsArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationDeleteAnimalMicrochipArgs = {\n    animalId: Scalars['Int'];\n    microchipId: Scalars['String'];\n};\n\nexport type MutationDeleteAnimalRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationDeleteFavoriteAnimalArgs = {\n    animalId: Scalars['Int'];\n};\n\nexport type MutationDeleteOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationDeleteUserArgs = {\n    id: Scalars['String'];\n};\n\nexport type MutationUpdateAnimalArgs = {\n    input: UpdateAnimalInput;\n};\n\nexport type MutationUpdateAnimalOwnerArgs = {\n    input: UpdateAnimalOwnerInput;\n};\n\nexport type MutationUpdateGiveawayEventArgs = {\n    input: UpdateGiveawayEventInput;\n};\n\nexport type MutationUpdateOrganizationArgs = {\n    input: UpdateOrganizationInput;\n};\n\nexport type MutationUpdateUserArgs = {\n    input: UserInput;\n};\n\nexport type Organization = {\n    __typename?: 'Organization';\n    city?: Maybe<Scalars['String']>;\n    country?: Maybe<Scalars['String']>;\n    deleteTime?: Maybe<Scalars['String']>;\n    id: Scalars['Int'];\n    modTime: Scalars['String'];\n    name?: Maybe<Scalars['Name']>;\n    phone?: Maybe<Scalars['Phone']>;\n    streetAddress?: Maybe<Scalars['String']>;\n};\n\nexport type OrganizationTask = {\n    __typename?: 'OrganizationTask';\n    description?: Maybe<Scalars['String']>;\n    id: Scalars['Int'];\n    isDone?: Maybe<Scalars['Boolean']>;\n    organization: Scalars['Int'];\n    title?: Maybe<Scalars['String']>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n    __typename?: 'PageInfo';\n    /** When paginating forwards, the cursor to continue. */\n    endCursor?: Maybe<Scalars['String']>;\n    /** When paginating forwards, are there more items? */\n    hasNextPage: Scalars['Boolean'];\n    /** When paginating backwards, are there more items? */\n    hasPreviousPage: Scalars['Boolean'];\n    /** When paginating backwards, the cursor to continue. */\n    startCursor?: Maybe<Scalars['String']>;\n    totalCount: Scalars['Int'];\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    _empty?: Maybe<Scalars['String']>;\n    /**\n     * Lookup an animal.\n     *\n     * Examples:\n     *\n     * animal(id: 1)\n     */\n    animal?: Maybe<Animal>;\n    /**\n     * Get a animal owner with a specific ID.\n     *\n     * Examples:\n     *\n     * animalOwner(id: 1)\n     */\n    animalOwner?: Maybe<AnimalOwner>;\n    /**\n     * Get all animal owners.\n     *\n     * Examples:\n     *\n     * animalOwners\n     */\n    animalOwners?: Maybe<Array<Maybe<AnimalOwner>>>;\n    /**\n     * Get all animals or animals filtered by animal ids, species, gender and breed ids.\n     *\n     * Examples:\n     *\n     * animals\n     * animals(ids: [1, 2, 3])\n     * animals(species: [1, 4], gender: [1, 2], breed: [205, 51])\n     * animals(first: 5)\n     */\n    animals?: Maybe<AnimalsConnection>;\n    /**\n     * Get all breeds.\n     *\n     * Examples:\n     *\n     * breeds(species: \"2\", language: \"lt\")\n     */\n    breeds?: Maybe<Array<Maybe<BreedWithSpecies>>>;\n    /**\n     * Get all chipCompanies.\n     *\n     * Examples:\n     *\n     * chipCompanies(language: \"lt\")\n     */\n    chipCompanies?: Maybe<Array<Maybe<ChipCompany>>>;\n    /**\n     * Get all chipInstallPlaces.\n     *\n     * Examples:\n     *\n     * chipInstallPlaces(language: \"lt\")\n     */\n    chipInstallPlaces?: Maybe<Array<Maybe<ChipInstallPlace>>>;\n    /**\n     * Get all colors.\n     *\n     * Examples:\n     *\n     * colors(language: \"lt\")\n     */\n    colors?: Maybe<Array<Maybe<Color>>>;\n    /**\n     * Get all events\n     *\n     * Example:\n     * events\n     * events(animalId: 1)\n     */\n    events?: Maybe<Array<Maybe<Event>>>;\n    /**\n     * Get all favorite animals.\n     *\n     * Examples:\n     *\n     * favoriteAnimals\n     */\n    favoriteAnimals?: Maybe<Array<Maybe<Animal>>>;\n    /**\n     * Get all genders.\n     *\n     * Examples:\n     *\n     * genders(language: \"lt\")\n     */\n    genders?: Maybe<Array<Maybe<Gender>>>;\n    municipalities?: Maybe<Array<Maybe<Municipality>>>;\n    /**\n     * Lookup an organization.\n     *\n     * Examples:\n     *\n     * organization(id: 1)\n     */\n    organization?: Maybe<Organization>;\n    organizationTask?: Maybe<OrganizationTask>;\n    organizationTasks?: Maybe<Array<Maybe<OrganizationTask>>>;\n    /**\n     * Get all organizations.\n     *\n     * Examples:\n     *\n     * organizations\n     */\n    organizations?: Maybe<Array<Maybe<Organization>>>;\n    registration?: Maybe<AnimalRegistration>;\n    /**\n     * Get all species.\n     *\n     * Examples:\n     *\n     * species(language: \"lt\")\n     */\n    species?: Maybe<Array<Maybe<Species>>>;\n    /**\n     * Get all statuses.\n     *\n     * Examples:\n     *\n     * statuses(language: \"lt\")\n     */\n    statuses?: Maybe<Array<Maybe<Status>>>;\n    streetfindEvents?: Maybe<Array<Maybe<StreetfindEvent>>>;\n    /**\n     * Lookup an user.\n     *\n     * Examples:\n     *\n     * user(id: 1)\n     */\n    user?: Maybe<User>;\n    /**\n     * Get all users.\n     *\n     * Examples:\n     *\n     * users\n     */\n    users?: Maybe<Array<Maybe<User>>>;\n};\n\nexport type QueryAnimalArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryAnimalOwnerArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryAnimalsArgs = {\n    after?: InputMaybe<Scalars['String']>;\n    before?: InputMaybe<Scalars['String']>;\n    breed?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;\n    first?: InputMaybe<Scalars['Int']>;\n    gender?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;\n    ids?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;\n    isFavoriteOnly?: InputMaybe<Scalars['Boolean']>;\n    last?: InputMaybe<Scalars['Int']>;\n    species?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;\n};\n\nexport type QueryBreedsArgs = {\n    language: Scalars['String'];\n    species?: InputMaybe<Scalars['String']>;\n};\n\nexport type QueryChipCompaniesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryChipInstallPlacesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryColorsArgs = {\n    language: Scalars['String'];\n    speciesId?: InputMaybe<Scalars['Int']>;\n};\n\nexport type QueryEventsArgs = {\n    animalId?: InputMaybe<Scalars['Int']>;\n    groups?: InputMaybe<Array<InputMaybe<EventGroup>>>;\n};\n\nexport type QueryGendersArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryOrganizationTaskArgs = {\n    id?: InputMaybe<Scalars['Int']>;\n};\n\nexport type QueryRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QuerySpeciesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryStatusesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryUserArgs = {\n    id: Scalars['String'];\n};\n\nexport enum RegistrationStatus {\n    Active = 'Active',\n    Inactive = 'Inactive',\n}\n\n/** Represents an user role. */\nexport type Role = {\n    __typename?: 'Role';\n    organizationId: Scalars['Int'];\n    roleType?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Species = {\n    __typename?: 'Species';\n    /** Species id */\n    id: Scalars['Int'];\n    /** Species name */\n    value: Scalars['String'];\n};\n\n/** Represents a status. */\nexport type Status = {\n    __typename?: 'Status';\n    /** Status id */\n    id: Scalars['String'];\n    /** Status name */\n    value: Scalars['String'];\n};\n\nexport type Streetfind = Event & {\n    __typename?: 'Streetfind';\n    animalId: Scalars['Int'];\n    author: Author;\n    createTime: Scalars['String'];\n    dateTime: Scalars['String'];\n    details: StreetfindDetails;\n    group: EventGroup;\n    id: Scalars['Int'];\n    type: EventType;\n};\n\nexport type StreetfindDetails = EventDetails & {\n    __typename?: 'StreetfindDetails';\n    comments?: Maybe<Scalars['String']>;\n    houseNo?: Maybe<Scalars['String']>;\n    municipalityId: Scalars['Int'];\n    registrationDate?: Maybe<Scalars['String']>;\n    registrationNo?: Maybe<Scalars['String']>;\n    street?: Maybe<Scalars['String']>;\n};\n\nexport type StreetfindEvent = {\n    __typename?: 'StreetfindEvent';\n    animalId: Scalars['Int'];\n    author: Author;\n    comments?: Maybe<Scalars['String']>;\n    date?: Maybe<Scalars['Date']>;\n    houseNo?: Maybe<Scalars['String']>;\n    id: Scalars['Int'];\n    municipalityId: Scalars['Int'];\n    street: Scalars['String'];\n};\n\nexport type StreetfindEventInput = {\n    animalId: Scalars['Int'];\n    comments?: InputMaybe<Scalars['String']>;\n    date?: InputMaybe<Scalars['Date']>;\n    /** Max 8 characters */\n    houseNo?: InputMaybe<Scalars['String']>;\n    /** Any id from municipalities query */\n    municipalityId: Scalars['Int'];\n    /** Max 255 characters */\n    street: Scalars['String'];\n};\n\nexport type Subscription = {\n    __typename?: 'Subscription';\n    organizationCreated?: Maybe<Organization>;\n};\n\nexport type UpdateAnimalInput = {\n    /** Comments */\n    comments?: InputMaybe<Scalars['String']>;\n    /** AnimalDetails */\n    details?: InputMaybe<AnimalDetailsInput>;\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Image File */\n    image?: InputMaybe<Scalars['Upload']>;\n    /** AnimalMicrochip */\n    microchip?: InputMaybe<UpdateAnimalMicrochipInput>;\n    /** Animal name (128 characters max) */\n    name?: InputMaybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration?: InputMaybe<AnimalRegistrationInput>;\n    /** Status */\n    status?: InputMaybe<AnimalStatus>;\n};\n\nexport type UpdateAnimalMicrochipInput = {\n    /** Chip company code (255 characters max, any id from query chipCompanies) */\n    chipCompanyCode?: InputMaybe<Scalars['Int']>;\n    /** Install date */\n    installDate?: InputMaybe<Scalars['Date']>;\n    /** Install place (any id from query chipInstallPlaces) */\n    installPlaceId?: InputMaybe<Scalars['Int']>;\n    /** Microchip status ('Implanted' or 'Removed') */\n    status?: InputMaybe<MicrochipStatus>;\n};\n\nexport type UpdateAnimalOwnerInput = {\n    /** Animal owner ID, e.g., 1 */\n    id: Scalars['Int'];\n    name?: InputMaybe<Scalars['Name']>;\n    phone?: InputMaybe<Scalars['Phone']>;\n    surname?: InputMaybe<Scalars['Surname']>;\n};\n\nexport type UpdateGiveawayEventInput = {\n    /** Animal id, e.g. 2 */\n    animalId?: InputMaybe<Scalars['Int']>;\n    /** Event date in YYYY-MM-DD format */\n    date?: InputMaybe<Scalars['Date']>;\n    /** Former owner id */\n    formerOwnerId?: InputMaybe<Scalars['Int']>;\n    /** Event id */\n    id: Scalars['Int'];\n    /** Event reason */\n    reason?: InputMaybe<Scalars['String']>;\n    /** Registration date */\n    registrationDate?: InputMaybe<Scalars['Date']>;\n    /** Registration no */\n    registrationNo?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateOrganizationInput = {\n    /** City (128 characters max) */\n    city?: InputMaybe<Scalars['String']>;\n    /** Country (128 characters max) */\n    country?: InputMaybe<Scalars['String']>;\n    id: Scalars['Int'];\n    name?: InputMaybe<Scalars['Name']>;\n    phone?: InputMaybe<Scalars['Phone']>;\n    /** Street address (255 characters max) */\n    streetAddress?: InputMaybe<Scalars['String']>;\n};\n\n/** Represents an user. */\nexport type User = {\n    __typename?: 'User';\n    email: Scalars['String'];\n    id: Scalars['String'];\n    modTime?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['Name']>;\n    roles?: Maybe<Array<Maybe<Role>>>;\n    surname?: Maybe<Scalars['Surname']>;\n    username: Scalars['String'];\n};\n\nexport type UserInput = {\n    /** User valid email (255 characters max) */\n    email?: InputMaybe<Scalars['Email']>;\n    /** User id  (255 characters max) */\n    id: Scalars['String'];\n    name?: InputMaybe<Scalars['Name']>;\n    surname?: InputMaybe<Scalars['Surname']>;\n    /** User username (128 characters max) */\n    username?: InputMaybe<Scalars['String']>;\n};\n\nexport type Municipality = {\n    __typename?: 'municipality';\n    id: Scalars['Int'];\n    name: Scalars['String'];\n};\n","import React from 'react';\n\nimport { Chip, Grid } from '@mui/material';\nimport { EventGroup } from '../../../graphql/types';\n\nexport const EVENT_FILTER_ALL = 'All';\n\nexport type EventCategory = EventGroup | 'All';\n\nexport default function AnimalEventFilters({ activeFilter, onChange }: AnimalEventFiltersProps) {\n    return (\n        <Grid container spacing={2}>\n            <Filter\n                label={EVENT_FILTER_ALL}\n                active={activeFilter === EVENT_FILTER_ALL}\n                onClick={() => onChange(EVENT_FILTER_ALL)}\n            />\n            {Object.keys(EventGroup).map(category => (\n                <Filter\n                    key={category}\n                    label={category}\n                    active={activeFilter === EventGroup[category]}\n                    onClick={() => onChange(EventGroup[category])}\n                />\n            ))}\n        </Grid>\n    );\n}\n\nfunction Filter({ label, active, onClick }: FilterProps) {\n    return (\n        <Grid item>\n            <button\n                style={{\n                    border: 'none',\n                    backgroundColor: 'transparent',\n                }}\n                type=\"button\"\n                onClick={() => onClick(label as any)}\n            >\n                <Chip label={label} clickable color={active ? 'primary' : 'default'} />\n            </button>\n        </Grid>\n    );\n}\n\ninterface AnimalEventFiltersProps {\n    activeFilter: EventCategory;\n    onChange: (value: EventCategory) => void;\n}\n\ninterface FilterProps {\n    label: string;\n    active: boolean;\n    onClick: (value: EventCategory) => void;\n}\n","import React from 'react';\n\nimport { Box, styled, Typography } from '@mui/material';\n\nconst StyledBox = styled(Box)(({ theme }) => ({\n    borderBottom: `1px solid ${theme.palette.grey['400']}`,\n    flexDirection: 'column',\n    [theme.breakpoints.up('sm')]: {\n        flexDirection: 'row',\n    },\n}));\n\nexport default function ParamTable({ details }: ParamTableProps) {\n    return (\n        <>\n            {details &&\n                details.map((item, index) => (\n                    <StyledBox key={index} display=\"flex\" justifyContent=\"space-between\" p={1}>\n                        <Typography color=\"textPrimary\">{item.title}</Typography>\n                        <Typography color=\"textSecondary\">{item.value}</Typography>\n                    </StyledBox>\n                ))}\n        </>\n    );\n}\n\ninterface ParamTableProps {\n    details?: { title: string; value: string | number }[];\n}\n","import React, { useState } from 'react';\n\nimport LocalHospitalIcon from '@mui/icons-material/LocalHospital';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { Avatar, Card, CardContent, CardHeader, Collapse, IconButton, styled, Typography } from '@mui/material';\nimport { Event } from '../../../graphql/types';\nimport { getFormattedDate } from '../../../utils/date';\nimport { getEventDetails } from '../../../utils/events';\nimport ParamTable from '../ParamTable';\n\nconst PREFIX = 'EventCard';\nconst classes = {\n    headerText: `${PREFIX}-headerText`,\n    content: `${PREFIX}-content`,\n};\nconst StyledCard = styled(Card)(({ theme }) => ({\n    width: '100%',\n    [classes.headerText]: {\n        maxWidth: 150,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n        fontSize: 20,\n        lineHeight: '24px',\n        fontWeight: 600,\n    },\n    [classes.content]: {\n        wordBreak: 'break-word',\n    },\n}));\n\nexport default function EventCard({ event }: AnimalCardProps) {\n    const [expanded, setExpanded] = useState(false);\n    const eventName = event.type || '';\n    const header = `Event type - ${eventName}`;\n    const subHeader = `${event.dateTime ? getFormattedDate(event.dateTime) : '-'} / Author`;\n    const eventDetails = getEventDetails(event);\n\n    return (\n        <StyledCard>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        <LocalHospitalIcon />\n                    </Avatar>\n                }\n                title={\n                    <Typography component=\"h6\" className={classes.headerText} noWrap>\n                        {header}\n                    </Typography>\n                }\n                subheader={subHeader}\n                action={\n                    <IconButton aria-label=\"settings\">\n                        <MoreVertIcon />\n                    </IconButton>\n                }\n                onClick={() => setExpanded(!expanded)}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <ParamTable details={eventDetails} />\n                </CardContent>\n            </Collapse>\n        </StyledCard>\n    );\n}\n\ninterface AnimalCardProps {\n    event: Event;\n}\n","import { format as formatFn } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nexport const getFormattedDate = (timestampString: string, format = 'yyyy-MM-dd'): string => {\n    const timestamp = Number.parseInt(timestampString, 10);\n\n    if (Number.isNaN(timestamp)) {\n        return '';\n    }\n\n    return formatFn(timestamp, format, { locale: ltLocale });\n};\n","import { Event } from '../graphql/types';\n\nexport const sortEventsByDate = (event1: Event, event2: Event, descending = true) => {\n    if (!event1 || !event2) {\n        return 0;\n    }\n\n    const date1 = parseInt(event1.dateTime as string, 10);\n    const date2 = parseInt(event2.dateTime as string, 10);\n\n    return descending ? date2 - date1 : date1 - date2;\n};\n\nexport const getEventDetails = (event: Event) => [\n    {\n        title: 'Comments',\n        value: event.details?.comments || '-',\n    },\n    {\n        title: 'Author',\n        value: '-',\n    },\n];\n","import React from 'react';\n\nimport { Box, List, ListItem, styled, Typography } from '@mui/material';\nimport { Event } from '../../../graphql/types';\nimport EventCard from './EventCard';\n\nconst StyledList = styled(List)(() => ({\n    width: '100%',\n}));\n\ninterface AnimalEventListProps {\n    events: Event[];\n}\n\nfunction AnimalEventList({ events }: AnimalEventListProps) {\n    if (!events?.length) {\n        return (\n            <Box mt={2}>\n                <Typography variant=\"body1\">No events found.</Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <StyledList>\n            {events.map(event => (\n                <ListItem key={event.id} disableGutters>\n                    <EventCard event={event} />\n                </ListItem>\n            ))}\n        </StyledList>\n    );\n}\n\nexport default AnimalEventList;\n","import React from 'react';\n\nimport SortIcon from '@mui/icons-material/Sort';\nimport { Box, IconButton, Typography } from '@mui/material';\n\nexport default function AnimalEventSorting({ sortingMode, onChange }: AnimalEventSortingProps) {\n    const handleClick = () => {\n        if (sortingMode === EventSortingMode.DESCENDING) {\n            onChange(EventSortingMode.ASCENDING);\n        } else {\n            onChange(EventSortingMode.DESCENDING);\n        }\n    };\n\n    return (\n        <Box mt={1} display=\"flex\" alignItems=\"center\">\n            <IconButton aria-label=\"Sort button\" onClick={handleClick}>\n                <SortIcon />\n            </IconButton>\n            <Typography variant=\"subtitle1\">Sort by date ({sortingMode})</Typography>\n        </Box>\n    );\n}\n\ninterface AnimalEventSortingProps {\n    sortingMode: EventSortingMode;\n    onChange: (value: EventSortingMode) => void;\n}\n\nexport enum EventSortingMode {\n    DESCENDING = 'descending',\n    ASCENDING = 'ascending',\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport AddIcon from '@mui/icons-material/Add';\nimport { Box, Button, styled, Typography } from '@mui/material';\nimport { Event } from '../../../graphql/types';\nimport AnimalEventDialog from './AnimalEventDialog';\nimport AnimalEventFilters, { EVENT_FILTER_ALL, EventCategory } from './AnimalEventFilters';\nimport AnimalEventList from './AnimalEventList';\nimport AnimalEventSorting, { EventSortingMode } from './AnimalEventSorting';\n\nconst StyledBox = styled(Box)(({ theme }) => ({\n    backgroundColor: theme.palette.tertiary.main,\n    // Full bleed effect on mobile\n    marginTop: theme.spacing(2),\n    marginLeft: -theme.spacing(2),\n    marginRight: -theme.spacing(2),\n    [theme.breakpoints.up('lg')]: {\n        margin: 0,\n    },\n}));\n\nconst TYPE_OPTIONS = [\n    'Ženklinimas ir įregistravimas',\n    'Laikytojo pasikeitimas',\n    'Laikymo vietos pasikeitimas',\n    'Savininko pasikeitimas',\n    'Dingimas',\n    'Suradimas',\n    'Nugaišimas',\n    'Nugaišinimas',\n    'Išvežimas',\n    'Vakcinavimas',\n    'Augintinio agresyvumas',\n];\n\nconst CATEGORY_OPTIONS = ['General', 'Medical'];\n\nexport default function AnimalEvents({ events }: AnimalEventsProps) {\n    const [activeFilter, setActiveFilter] = useState<EventCategory>(EVENT_FILTER_ALL);\n    const [activeSort, setActiveSort] = useState<EventSortingMode>(EventSortingMode.DESCENDING);\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    const handleDialogOpen = () => {\n        setDialogOpen(true);\n    };\n\n    const sortByDateComparator = useCallback(\n        (event1: Event, event2: Event) => {\n            if (!event1 || !event2) {\n                return 0;\n            }\n\n            const date1 = parseInt(event1.dateTime as string, 10);\n            const date2 = parseInt(event2.dateTime as string, 10);\n            if (activeSort === EventSortingMode.DESCENDING) {\n                return date2 - date1;\n            }\n            return date1 - date2;\n        },\n        [activeSort]\n    );\n\n    const memoizedEvents = useMemo(() => {\n        return [...events].sort(sortByDateComparator);\n    }, [events, sortByDateComparator]);\n\n    const [filteredEvents, setFilteredEvents] = useState(memoizedEvents);\n\n    const handleFilterChange = (value: EventCategory) => {\n        setActiveFilter(value);\n    };\n\n    const handleSortChange = (sortingMode: EventSortingMode) => {\n        setActiveSort(sortingMode);\n    };\n\n    useEffect(() => {\n        setFilteredEvents(\n            memoizedEvents.filter(event => event.group === activeFilter || activeFilter === EVENT_FILTER_ALL)\n        );\n    }, [activeFilter, memoizedEvents]);\n\n    return (\n        <StyledBox>\n            <Box mb={2} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"h5\" component=\"h3\">\n                    Events\n                </Typography>\n                <Button color=\"primary\" variant=\"contained\" startIcon={<AddIcon />} onClick={handleDialogOpen}>\n                    Create\n                </Button>\n                <AnimalEventDialog\n                    dialogOpen={dialogOpen}\n                    categoryOptions={CATEGORY_OPTIONS}\n                    typeOptions={TYPE_OPTIONS}\n                    onCancel={showDialog => {\n                        setDialogOpen(showDialog);\n                    }}\n                    onCreate={eventObject => {\n                        setFilteredEvents([...filteredEvents, eventObject]);\n                    }}\n                />\n            </Box>\n            <AnimalEventFilters activeFilter={activeFilter} onChange={handleFilterChange} />\n            <AnimalEventSorting sortingMode={activeSort} onChange={handleSortChange} />\n            <AnimalEventList events={filteredEvents} />\n        </StyledBox>\n    );\n}\n\ninterface AnimalEventsProps {\n    events: Event[];\n}\n","import { loader } from 'graphql.macro';\nimport Image from 'mui-image';\nimport React, { useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport AddAPhotoIcon from '@mui/icons-material/AddAPhoto';\nimport { Box, IconButton, Skeleton, styled, Typography } from '@mui/material';\nimport { Animal, Event } from '../../graphql/types';\nimport { getAnimalDetails } from '../../utils/animal';\nimport SelectFilesDialog, { DialogEventTypes } from '../form/SelectFilesDialog';\nimport LayoutMultiColRow from '../layout/LayoutMultiColRow';\nimport AnimalDetailsHeader from './details/AnimalDetailsHeader';\nimport AnimalDetailsMenu from './details/AnimalDetailsMenu';\nimport AnimalEvents from './events/AnimalEvents';\nimport ParamTable from './ParamTable';\n\nconst GET_ANIMAL_DETAILS = loader('../../graphql/queries/animal-details.graphql');\nconst UPDATE_ANIMAL_IMAGE = loader('../../graphql/queries/update-animal-image.graphql');\n\ninterface Response {\n    animal: Animal;\n    events: Event[];\n}\n\ninterface AnimalDetailsProps {\n    onLoad?: (animal: Animal) => void;\n}\n\nconst PREFIX = 'AnimalDetails';\n\nconst classes = {\n    animalName: `${PREFIX}-animalName`,\n    animalMeta: `${PREFIX}-animalMeta`,\n    secondaryProperty: `${PREFIX}-secondaryProperty`,\n    eventsHeader: `${PREFIX}-eventsHeader`,\n    eventsContainer: `${PREFIX}-eventsContainer`,\n    imageContainer: `${PREFIX}-imageContainer`,\n    imageIcon: `${PREFIX}-imageIcon`,\n    addImageButton: `${PREFIX}-addImageButton`,\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    flexGrow: 1,\n    width: '100%',\n\n    [`& .${classes.animalName}`]: {\n        color: theme.palette.primary.dark,\n    },\n    [`& .${classes.animalMeta}`]: {\n        color: theme.palette.grey[600],\n    },\n    [`& .${classes.secondaryProperty}`]: {\n        marginBottom: theme.spacing(2),\n        fontWeight: 500,\n    },\n    [`& .${classes.eventsHeader}`]: {\n        fontWeight: 400,\n    },\n    [`& .${classes.eventsContainer}`]: {\n        backgroundColor: theme.palette.tertiary.main,\n    },\n    [`& .${classes.imageContainer}`]: {\n        position: 'relative',\n    },\n    [`& .${classes.imageIcon}`]: {\n        color: theme.palette.tertiary.light,\n        height: '18px',\n        width: '18px',\n        [theme.breakpoints.up('md')]: {\n            height: 'unset',\n            width: 'unset',\n        },\n    },\n    [`& .${classes.addImageButton}`]: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        backgroundColor: theme.palette.primary.main,\n        '&:hover,&:focus': {\n            backgroundColor: theme.palette.primary.dark,\n        },\n        height: '36px',\n        width: '36px',\n        [theme.breakpoints.up('md')]: {\n            height: '48px',\n            width: '48px',\n            right: theme.spacing(2),\n            top: theme.spacing(2),\n        },\n    },\n}));\n\nexport default function AnimalDetails({ onLoad }: AnimalDetailsProps) {\n    const { id } = useParams();\n    const navigate = useNavigate();\n\n    const [updateAnimalImageMutation] = useMutation(UPDATE_ANIMAL_IMAGE);\n    const uploadImageDialogRef = useRef<DialogEventTypes>(null);\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n        onCompleted: ({ animal }) => (onLoad ? onLoad(animal) : undefined),\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rectangular\" height=\"70vh\" width=\"100%\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal, events = [] } = data;\n    const animalDetails = getAnimalDetails(animal);\n\n    const onSelectedFilesSubmit = async (images: File[]) => {\n        const dialogRef = uploadImageDialogRef?.current;\n        if (!dialogRef) {\n            return;\n        }\n        try {\n            dialogRef.setLoading(true);\n            await updateAnimalImageMutation({\n                variables: { id: Number(id), image: images[0] },\n            });\n            dialogRef.setVisible(false);\n        } catch (updateError: any) {\n            dialogRef.setError(updateError.message);\n        } finally {\n            dialogRef.setLoading(false);\n        }\n    };\n\n    const showUploadImageDialog = () => {\n        uploadImageDialogRef.current?.setVisible(true);\n    };\n\n    return (\n        <Root>\n            <LayoutMultiColRow>\n                <>\n                    <AnimalDetailsHeader\n                        animalName={animal.name}\n                        gender={animal.details?.gender?.value}\n                        species={animal.details?.species?.value}\n                        color={animal.details?.color?.value}\n                        onBack={() => navigate(-1)}\n                        breed={animal.details?.breed?.value}\n                    >\n                        <AnimalDetailsMenu id={animal.id} />\n                    </AnimalDetailsHeader>\n                    <Box className={classes.imageContainer}>\n                        <Image src={animal.imageUrl!} aspectRatio={3 / 2} cover />\n                        <IconButton className={classes.addImageButton} onClick={showUploadImageDialog}>\n                            <AddAPhotoIcon className={classes.imageIcon} />\n                        </IconButton>\n                    </Box>\n                    {animal.details && (\n                        <>\n                            <Box mt={3} mb={2}>\n                                {animal.microchip && (\n                                    <Typography variant=\"body1\" className={classes.secondaryProperty}>\n                                        {`Microchip Id - ${animal.microchip}`}\n                                    </Typography>\n                                )}\n                                {animal.registration && (\n                                    <Typography variant=\"body1\" className={classes.secondaryProperty}>\n                                        {`Registration No - ${animal.registration?.registrationNo}`}\n                                    </Typography>\n                                )}\n                            </Box>\n                            <Box mt={3} mb={2}>\n                                <ParamTable details={animalDetails} />\n                            </Box>\n                        </>\n                    )}\n                    {animal.comments && (\n                        <Box mt={3} mb={2}>\n                            <Typography variant=\"body1\" dangerouslySetInnerHTML={{ __html: animal.comments }} />\n                        </Box>\n                    )}\n                    <Box mt={1}>\n                        <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                    </Box>\n                </>\n                <Box className={classes.eventsContainer} py={3} px={2}>\n                    <AnimalEvents events={events} />\n                </Box>\n            </LayoutMultiColRow>\n            <SelectFilesDialog\n                ref={uploadImageDialogRef}\n                title=\"Animal picture\"\n                accept=\"image/jpeg, image/jpg\"\n                onSubmit={onSelectedFilesSubmit}\n            />\n        </Root>\n    );\n}\n","import React from 'react';\n\nimport AnimalDetails from '../components/animal/AnimalDetails';\nimport Page from './Page';\n\nfunction AnimalDetailsPage() {\n    return (\n        <Page>\n            <AnimalDetails />\n        </Page>\n    );\n}\n\nexport default AnimalDetailsPage;\n"],"sourceRoot":""}