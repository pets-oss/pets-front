{"version":3,"sources":["utils/string.ts","utils/dateFormatters.ts","hooks/usePrevious.tsx","components/form/Selector.tsx","components/form/DynamicSelector.tsx","components/layout/LayoutAlignCenterBox.tsx","logo.svg","components/form/RichTextEditor.tsx","components/form/TextInput.tsx","components/animal/create-update/DetailsStep.tsx","components/animal/create-update/AnimalForm.tsx","pages/AnimalEditPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getYMDDateFromTS","timestamp","date","Date","parseInt","format","locale","ltLocale","getDateYMDFlexible","datestr","result","parse","isValid","usePrevious","ref","useRef","useEffect","current","Selector","options","name","defaultValue","disabled","optionsLimit","label","required","multiple","useFormContext","control","errors","formState","limitOptions","opts","state","createFilterOptions","rules","render","props","Autocomplete","field","filterOptions","getOptionLabel","option","onChange","_","renderInput","params","TextField","variant","color","margin","error","helperText","message","DynamicSelector","gqlOptions","data","useQuery","query","variables","skip","type","LayoutAlignCenterBox","children","display","justifyContent","width","hasCommandModifier","KeyBindingUtil","RichTextEditor","register","setValue","fieldValue","useWatch","markup","contentHTML","convertFromHTML","contentState","ContentState","createFromBlockArray","contentBlocks","entityMap","setEditorState","EditorState","createWithContent","content","rawContentState","convertToRaw","getCurrentContent","draftToHtml","React","useState","createEmpty","editorState","editor","Box","border","borderColor","borderRadius","Toolbar","onToggle","blockType","RichUtils","toggleBlockType","Divider","inlineStyle","toggleInlineStyle","pl","m","stripPastedStyles","customStyleMap","styleMap","handleKeyCommand","command","es","newState","keyBindingFn","e","keyCode","getDefaultKeyBinding","spellCheck","placeholder","FormHelperText","id","BLOCK_TYPES","style","icon","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","getType","className","ToggleButtonGroup","exclusive","map","ToggleButton","onMouseDown","preventDefault","handleMouseDown","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","StyledTypography","styled","Typography","position","right","bottom","theme","palette","main","TextInput","fullWidth","rightHelperText","showLettersCount","maxLength","validate","InputLabelProps","undefined","localValue","setLocalValue","setError","formValue","includes","split","obj","property","callback","target","handleChange","clsx","length","GET_SPECIES","GET_GENDERS","GET_BREEDS","GET_COLORS","PREFIX","classes","form","relative","StyledGrid","Grid","maxWidth","minWidth","DetailsStep","navigate","useNavigate","species","prevSpecies","speciesHasChangedInUi","container","spacing","item","xs","sm","language","toString","speciesId","input","Button","onClick","memo","AnimalForm","animal","submitCallback","methods","useForm","defaultValues","getDefaultFormValues","handleSubmit","reset","formRef","dispatch","useAppDispatch","onSubmit","formData","a","comments","details","birthDate","createOrUpdateAnimal","resultAction","fulfilled","match","payload","alignItems","component","now","GET_ANIMAL_DETAILS_ON_EDIT","image","imageWrapper","Root","fill","primary","dark","padding","marginBottom","height","backgroundColor","light","breakpoints","up","TopSection","flexDirection","src","logo","alt","AnimalEditPage","useParams","Number","loading","Page","topSection","Skeleton","animation","err","console"],"mappings":"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","file":"static/js/11.1711a9e7.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { format, getTime, isValid, parse } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nexport const getYMDDateFromTS = (timestamp: string | null = ''): string => {\n    if (timestamp) {\n        const date: Date = new Date(parseInt(timestamp, 10));\n        return format(date, 'yyyy-MM-dd', { locale: ltLocale });\n    }\n\n    return '';\n};\n\nexport const getTSDateFromYMD = (datestr: string | null = ''): string => {\n    if (datestr) {\n        const result = parse(datestr, 'yyyy-MM-dd', new Date());\n        return isValid(result) ? getTime(result).toString() : '';\n    }\n\n    return '';\n};\n\nexport const getTSDateFromYMDFlexible = (datestr: string | null = ''): string => {\n    if (datestr) {\n        const result = getDateYMDFlexible(datestr);\n        if (result === false) {\n            return '';\n        }\n        // incoming datestr is still a string, but adjusted/transformed to a valid date\n        const dateResult = Date.parse(datestr);\n        return getTime(dateResult).toString();\n    }\n\n    return '';\n};\n\nexport const getDateYMDFlexible = (datestr: string | null = ''): string | boolean => {\n    if (datestr) {\n        let result = parse(datestr, 'yyyy-MM-dd', new Date());\n        if (isValid(result)) {\n            return format(result, 'yyyy-MM-dd');\n        }\n        result = parse(datestr, 'yyyy-MM', new Date());\n        if (isValid(result)) {\n            return format(result, 'yyyy-MM-dd');\n        }\n        result = parse(datestr, 'yyyy', new Date());\n        if (isValid(result)) {\n            return format(result, 'yyyy-MM-dd');\n        }\n    }\n    return false;\n};\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious<T>(value: T): T | undefined {\n    const ref = useRef<T>();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n","import React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { Autocomplete, createFilterOptions, TextField } from '@mui/material';\nimport { capitalizeFirstLetter } from '../../utils/string';\n\nconst OPTIONS_LIMIT = 100;\n\nexport default function Selector({\n    options,\n    name,\n    defaultValue,\n    disabled,\n    optionsLimit = OPTIONS_LIMIT,\n    label,\n    required = false,\n    multiple = false,\n}: SelectorProps) {\n    const {\n        control,\n        formState: { errors },\n    } = useFormContext();\n\n    const limitOptions = (opts, state) =>\n        createFilterOptions<DynamicSelectorOption | string>()(opts, state).slice(0, optionsLimit);\n\n    return (\n        <Controller\n            defaultValue={defaultValue ?? null}\n            rules={{ required: required ? 'Required' : false }}\n            render={props => (\n                <Autocomplete<DynamicSelectorOption | string, boolean>\n                    {...props}\n                    value={props.field.value ?? null}\n                    options={options ?? []}\n                    filterOptions={limitOptions}\n                    getOptionLabel={option => (typeof option === 'string' ? option : option.value)}\n                    // getOptionSelected={(option, value) =>\n                    //     typeof option === 'string'\n                    //         ? option === value\n                    //         : (option as DynamicSelectorOption)?.id === (value as DynamicSelectorOption)?.id\n                    // }\n                    onChange={(_, option) => {\n                        props.field.onChange(option);\n                    }}\n                    disabled={disabled}\n                    multiple={multiple}\n                    renderInput={params => (\n                        <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            color=\"secondary\"\n                            margin=\"dense\"\n                            error={!!errors[name]}\n                            label={label ?? capitalizeFirstLetter(name)}\n                            helperText={errors[name]?.message ?? required ? 'Required' : 'Optional'}\n                        />\n                    )}\n                />\n            )}\n            name={name}\n            control={control}\n        />\n    );\n}\n\nexport interface SelectorProps {\n    options?: string[] | DynamicSelectorOption[];\n    name: string;\n    disabled?: boolean;\n    defaultValue?: string | undefined;\n    optionsLimit?: number;\n    label?: string;\n    helperText?: string;\n    required?: boolean;\n    multiple?: boolean;\n}\n\nexport interface DynamicSelectorOption {\n    id: string;\n    value: string;\n}\n","import { DocumentNode } from 'graphql';\nimport React from 'react';\n\nimport { useQuery } from '@apollo/client';\nimport Selector, { DynamicSelectorOption, SelectorProps } from './Selector';\n\nexport default function DynamicSelector({\n    gqlOptions,\n    name,\n    defaultValue,\n    multiple,\n    disabled,\n    helperText,\n    required,\n    label,\n}: DynamicSelectorProps) {\n    const { data } = useQuery<GqlResponse>(gqlOptions.query, {\n        variables: gqlOptions.variables,\n        skip: disabled,\n    });\n\n    return (\n        <Selector\n            options={data ? data[gqlOptions.type] : []}\n            name={name}\n            helperText={helperText}\n            defaultValue={defaultValue}\n            multiple={multiple}\n            disabled={disabled}\n            required={required}\n            label={label}\n        />\n    );\n}\n\nexport interface DynamicSelectorProps extends SelectorProps {\n    gqlOptions: { query: DocumentNode; variables?: Record<string, any>; type: string };\n}\n\ninterface GqlResponse {\n    options: DynamicSelectorOption[];\n}\n","import React from 'react';\n\nimport { Box } from '@mui/material';\n\ninterface Props {\n    children: React.ReactElement;\n}\n\nexport default function LayoutAlignCenterBox(props: Props) {\n    const { children } = props;\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" width=\"100%\">\n            {children}\n        </Box>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/logo.22754045.svg\";","import 'draft-js/dist/Draft.css';\nimport {\n    ContentState,\n    convertFromHTML,\n    convertToRaw,\n    Editor,\n    EditorState,\n    getDefaultKeyBinding,\n    KeyBindingUtil,\n    RichUtils,\n} from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport React, { useEffect } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\n\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport Looks3Icon from '@mui/icons-material/Looks3';\nimport LooksOneIcon from '@mui/icons-material/LooksOne';\nimport LooksTwoIcon from '@mui/icons-material/LooksTwo';\nimport StrikethroughSIcon from '@mui/icons-material/StrikethroughS';\nimport { Box, Divider, FormHelperText, ToggleButton, ToggleButtonGroup, Toolbar } from '@mui/material';\n\nconst { hasCommandModifier } = KeyBindingUtil;\n\n// const styles = ['BOLD', 'ITALIC', 'UNDERLINE', 'STRIKETHROUGH', 'CODE'];\n// const removeInlineStyles = editorState => {\n//     const contentState = editorState.getCurrentContent();\n//     const contentWithoutStyles = styles.reduce(\n//         (acc, style) => Modifier.removeInlineStyle(acc, editorState.getSelection(), style),\n//         contentState\n//     );\n//     return EditorState.push(editorState, contentWithoutStyles, 'change-inline-style');\n// };\n//\n// const removeEntities = editorState => {\n//     const contentState = editorState.getCurrentContent();\n//     const contentWithoutEntities = Modifier.applyEntity(contentState, editorState.getSelection(), null);\n//     return EditorState.push(editorState, contentWithoutEntities, 'apply-entity');\n// };\n//\n// const removeLists = editorState => {\n//     const contentState = editorState.getCurrentContent();\n//     let contentWithoutLists = contentState;\n//     const newEditorState = editorState;\n//     const blocksMap = contentState.getBlockMap();\n//\n//     blocksMap.forEach(block => {\n//         const blockType = block.getType();\n//         if (blockType === 'ordered-list-item' || blockType === 'unordered-list-item') {\n//             const selectionState = SelectionState.createEmpty(block.getKey());\n//             const updatedSelection = selectionState.merge({\n//                 focusOffset: 0,\n//                 anchorOffset: block.getText().length,\n//             });\n//\n//             contentWithoutLists = Modifier.setBlockType(contentWithoutLists, updatedSelection, 'unstyled');\n//         }\n//     });\n//\n//     return EditorState.push(newEditorState, contentWithoutLists, 'change-block-type');\n// };\n\nexport default function RichTextEditor({ name }: RichTextEditorProps) {\n    const { register, control, setValue } = useFormContext();\n    const fieldValue = useWatch({\n        control,\n        name: name,\n    });\n\n    useEffect(() => {\n        register(name);\n        const markup = typeof fieldValue === 'string' ? fieldValue : '';\n        const contentHTML = convertFromHTML(markup);\n        const contentState = ContentState.createFromBlockArray(contentHTML.contentBlocks, contentHTML.entityMap);\n        setEditorState(EditorState.createWithContent(contentState));\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [register, name]);\n\n    const onChange = content => {\n        const rawContentState = convertToRaw(content.getCurrentContent());\n\n        const markup = draftToHtml(rawContentState);\n        setValue(name, markup);\n\n        // console.log('onChange', markup, rawContentState);\n        // console.log(,convertToRaw(content));\n        setEditorState(content);\n    };\n\n    // const blocksFromHTML = convertFromHTML(typeof fieldValue === 'string' ? fieldValue : '');\n    // const state = ContentState.createFromBlockArray(blocksFromHTML.contentBlocks, blocksFromHTML.entityMap);\n\n    // const [editorState, setEditorState] = React.useState(() => EditorState.createWithContent(state));\n    const [editorState, setEditorState] = React.useState(() => EditorState.createEmpty());\n    const editor = React.useRef(null);\n\n    const toggleBlockType = blockType => {\n        onChange(RichUtils.toggleBlockType(editorState, blockType));\n    };\n\n    const toggleInlineStyle = inlineStyle => {\n        onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n    };\n\n    const myKeyBindingFn = (e): string | null => {\n        if (e.keyCode === 9 /* `TAB` key */ && hasCommandModifier(e)) {\n            return 'myeditor-tab';\n        }\n        return getDefaultKeyBinding(e);\n    };\n\n    const handleKeyCommand = (command, es) => {\n        if (command === 'myeditor-tab') {\n            return 'handled';\n        }\n\n        const newState = RichUtils.handleKeyCommand(es, command);\n        if (newState) {\n            onChange(newState);\n            return 'handled';\n        }\n\n        return 'not-handled';\n    };\n    // const handleClearClick = e => {\n    //     e.stopPropagation();\n    //\n    //     const newEditorState = [removeEntities, removeInlineStyles, removeLists].reduce(\n    //         (accumulator, currentValue) => currentValue(accumulator),\n    //         editorState\n    //     );\n    //\n    //     onChange(newEditorState);\n    // };\n\n    return (\n        <Box border={1} borderColor=\"grey.500\" borderRadius={2}>\n            <Toolbar>\n                <BlockStyleControls editorState={editorState} onToggle={toggleBlockType} />\n                <Divider variant=\"inset\" />\n                <InlineStyleControls editorState={editorState} onToggle={toggleInlineStyle} />\n                {/*<ToggleButton value={'clear'} onMouseDown={e => handleClearClick(e)}>*/}\n                {/*    clear*/}\n                {/*</ToggleButton>*/}\n            </Toolbar>\n            <Box pl={1} m={2}>\n                <Editor\n                    stripPastedStyles={true}\n                    ref={editor}\n                    customStyleMap={styleMap}\n                    editorState={editorState}\n                    handleKeyCommand={handleKeyCommand}\n                    onChange={onChange}\n                    keyBindingFn={myKeyBindingFn}\n                    spellCheck={true}\n                    placeholder=\"Type here your description\"\n                />\n                <FormHelperText id=\"component-helper-text\">Optional</FormHelperText>\n            </Box>\n        </Box>\n    );\n}\n\nconst BLOCK_TYPES = [\n    { label: 'H1', style: 'header-one', icon: <LooksOneIcon /> },\n    { label: 'H2', style: 'header-two', icon: <LooksTwoIcon /> },\n    { label: 'H3', style: 'header-three', icon: <Looks3Icon /> },\n    // { label: 'H4', style: 'header-four', icon: <Looks4Icon /> },\n    // { label: 'H5', style: 'header-five', icon: <Looks5Icon /> },\n    // { label: 'H6', style: 'header-six', icon: <Looks6Icon /> },\n    // { label: 'Blockquote', style: 'blockquote', icon: <FormatQuoteIcon /> },\n    { label: 'UL', style: 'unordered-list-item', icon: <FormatListBulletedIcon /> },\n    { label: 'OL', style: 'ordered-list-item', icon: <FormatListNumberedIcon /> },\n];\n\nconst BlockStyleControls = props => {\n    const { editorState } = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n\n    const handleMouseDown = (e, style) => {\n        e.preventDefault();\n        props.onToggle(style);\n    };\n\n    return (\n        <div className=\"RichEditor-controls\">\n            <ToggleButtonGroup value={blockType} exclusive>\n                {BLOCK_TYPES.map(type => (\n                    <ToggleButton key={type.label} value={type.style} onMouseDown={e => handleMouseDown(e, type.style)}>\n                        {type.icon}\n                    </ToggleButton>\n                    // <StyleButton\n                    //     key={type.label}\n                    //     active={type.style === blockType}\n                    //     label={type.label}\n                    //     onToggle={props.onToggle}\n                    //     style={type.style}\n                    //     icon={type.icon}\n                    // />\n                ))}\n            </ToggleButtonGroup>\n        </div>\n    );\n};\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n    // CODE: {\n    //     backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    //     fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    //     fontSize: 16,\n    //     padding: 2,\n    // },\n};\n\nconst INLINE_STYLES = [\n    { label: 'Bold', style: 'BOLD', icon: <FormatBoldIcon /> },\n    { label: 'Italic', style: 'ITALIC', icon: <FormatItalicIcon /> },\n    { label: 'Underline', style: 'UNDERLINE', icon: <FormatUnderlinedIcon /> },\n    { label: 'Strikethrough', style: 'STRIKETHROUGH', icon: <StrikethroughSIcon /> },\n    // { label: 'Monospace', style: 'CODE', icon: <CodeIcon /> },\n];\n\nconst InlineStyleControls = props => {\n    const currentStyle = props.editorState.getCurrentInlineStyle();\n\n    const handleMouseDown = (e, style) => {\n        e.preventDefault();\n        props.onToggle(style);\n    };\n\n    return (\n        <ToggleButtonGroup value={[...currentStyle]}>\n            {INLINE_STYLES.map(type => (\n                <ToggleButton key={type.label} value={type.style} onMouseDown={e => handleMouseDown(e, type.style)}>\n                    {type.icon}\n                </ToggleButton>\n            ))}\n        </ToggleButtonGroup>\n    );\n};\n\ninterface RichTextEditorProps {\n    name: string;\n    maxLength: number;\n}\n","import clsx from 'clsx';\nimport React, { useEffect, useState } from 'react';\nimport { Controller, FieldError, useFormContext, useWatch } from 'react-hook-form';\n\nimport { BaseTextFieldProps, styled, TextField, Typography } from '@mui/material';\n\nconst StyledTypography = styled(Typography)(({ theme }) => ({\n    position: 'absolute',\n    right: 12,\n    bottom: 12,\n    '&.Mui-error': {\n        color: theme.palette.error.main,\n    },\n}));\n\nexport default function TextInput({\n    label,\n    id,\n    name,\n    placeholder,\n    defaultValue,\n    fullWidth = false,\n    helperText,\n    rightHelperText,\n    showLettersCount = false,\n    maxLength = 25,\n    required = false,\n    validate,\n    type = 'text',\n    InputLabelProps,\n}: TextInputProps) {\n    const { control, formState } = useFormContext();\n\n    const [localValue, setLocalValue] = useState<string | undefined>(undefined);\n    const [error, setError] = useState<FieldError | undefined>(undefined);\n\n    const formValue = useWatch({\n        control,\n        name,\n        defaultValue: undefined,\n    });\n\n    useEffect(() => {\n        setLocalValue(formValue);\n    }, [formValue]);\n\n    useEffect(() => {\n        const { errors } = formState;\n        if (!name.includes('.')) {\n            setError(errors[name]);\n            return;\n        }\n\n        const [obj, property] = name.split('.');\n        setError(errors[obj] ? errors[obj][property] : undefined);\n    }, [formState, name]);\n\n    const handleChange = (e, callback) => {\n        const { value } = e.target;\n        setLocalValue(value);\n        callback(e);\n    };\n\n    return (\n        <>\n            <Controller\n                name={name}\n                control={control}\n                defaultValue={defaultValue}\n                rules={{ required: required ? 'Required' : false, maxLength, validate }}\n                render={({ field: { onChange, value } }) => (\n                    <TextField\n                        label={label}\n                        id={id}\n                        type={type}\n                        color=\"secondary\"\n                        placeholder={placeholder}\n                        variant=\"outlined\"\n                        fullWidth={fullWidth}\n                        margin=\"dense\"\n                        name={name}\n                        error={!!error}\n                        helperText={error?.message || helperText}\n                        InputLabelProps={InputLabelProps}\n                        value={value}\n                        onChange={e => {\n                            handleChange(e, onChange);\n                        }}\n                        defaultValue={defaultValue}\n                    />\n                )}\n            />\n            {(showLettersCount || rightHelperText) && (\n                <StyledTypography variant=\"caption\" color=\"textSecondary\" className={clsx({ ['Mui-error']: error })}>\n                    {rightHelperText ?? `${localValue?.length || 0}/${maxLength}`}\n                </StyledTypography>\n            )}\n        </>\n    );\n}\n\ninterface TextInputProps extends BaseTextFieldProps {\n    name: string;\n    showLettersCount?: boolean;\n    maxLength?: number;\n    rightHelperText?: string;\n    required?: boolean;\n    validate?: (input: string) => string | boolean;\n}\n","import clsx from 'clsx';\nimport { loader } from 'graphql.macro';\nimport React, { memo, useEffect } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Button, Divider, Grid, styled, Typography } from '@mui/material';\nimport { Species } from '../../../graphql/types';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { getDateYMDFlexible } from '../../../utils/dateFormatters';\nimport DynamicSelector from '../../form/DynamicSelector';\nimport RichTextEditor from '../../form/RichTextEditor';\nimport TextInput from '../../form/TextInput';\n\nconst GET_SPECIES = loader('../../../graphql/queries/species.graphql');\nconst GET_GENDERS = loader('../../../graphql/queries/genders.graphql');\nconst GET_BREEDS = loader('../../../graphql/queries/breeds.graphql');\nconst GET_COLORS = loader('../../../graphql/queries/colors.graphql');\n\nconst EMPTY_NAME = 'New Animal';\n\nconst PREFIX = 'DetailsStep';\n\nconst classes = {\n    form: `${PREFIX}-form`,\n    name: `${PREFIX}-name`,\n    relative: `${PREFIX}-relative`,\n    fullWidth: `${PREFIX}-fullWidth`,\n};\n\nconst StyledGrid = styled(Grid)(() => ({\n    form: {\n        maxWidth: 800,\n    },\n    name: {\n        minWidth: 300,\n    },\n    relative: {\n        position: 'relative',\n    },\n    fullWidth: {\n        width: '100%',\n    },\n}));\n\nfunction DetailsStep() {\n    const { control, setValue } = useFormContext();\n    const navigate = useNavigate();\n\n    const name = useWatch({\n        control,\n        name: 'name',\n    });\n\n    const species = useWatch({\n        control,\n        name: 'details.species',\n        defaultValue: null,\n    });\n\n    const prevSpecies = usePrevious({ species });\n\n    useEffect(() => {\n        const speciesHasChangedInUi =\n            prevSpecies !== undefined && prevSpecies.species !== null && prevSpecies.species !== species;\n        if (!species || speciesHasChangedInUi) {\n            setValue('details.breed', null);\n            setValue('details.color', null);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [species, setValue]);\n\n    const handleCancel = () => {\n        navigate('/animal-list');\n    };\n\n    const dateInputValidation = (input: string) => {\n        return false !== getDateYMDFlexible(input);\n    };\n\n    return (\n        <StyledGrid container spacing={2}>\n            <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n                {!!name ? (\n                    <Typography variant=\"h5\">{name}</Typography>\n                ) : (\n                    <Typography variant=\"h5\">{EMPTY_NAME}</Typography>\n                )}\n            </Grid>\n            <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n                <Grid item xs={12} sm={4} className={clsx(classes.name, classes.relative)}>\n                    <TextInput name=\"name\" label=\"Name\" required helperText=\" \" fullWidth showLettersCount />\n                </Grid>\n            </Grid>\n            <Grid item xs={12} container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"details.species\"\n                        label=\"Specie\"\n                        gqlOptions={{ query: GET_SPECIES, variables: { language: 'lt' }, type: 'species' }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"details.gender\"\n                        label=\"Gender\"\n                        gqlOptions={{ query: GET_GENDERS, variables: { language: 'lt' }, type: 'genders' }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"details.breed\"\n                        label=\"Breed\"\n                        disabled={!species}\n                        gqlOptions={{\n                            query: GET_BREEDS,\n                            variables: { species: (species as Species | undefined)?.id.toString(), language: 'lt' },\n                            type: 'breeds',\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DynamicSelector\n                        name=\"details.color\"\n                        label=\"Color\"\n                        gqlOptions={{\n                            query: GET_COLORS,\n                            variables: { language: 'lt', speciesId: (species as Species | undefined)?.id },\n                            type: 'colors',\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextInput\n                        name=\"details.birthDate\"\n                        id=\"birthDate\"\n                        label=\"Birth date\"\n                        placeholder=\"yyyy-mm-dd, yyyy-mm or yyyy\"\n                        helperText=\"Format date as a yyyy(-mm(-dd))\"\n                        validate={dateInputValidation}\n                        fullWidth\n                    />\n                </Grid>\n                <Grid item xs={12} className={classes.relative}>\n                    <RichTextEditor name=\"comments\" maxLength={200} />\n                </Grid>\n            </Grid>\n            <Grid item container>\n                <Divider style={{ width: '100%' }} />\n            </Grid>\n            <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n                <Grid item>\n                    <Button color=\"secondary\" variant=\"outlined\" onClick={handleCancel}>\n                        Cancel\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button type=\"submit\" color=\"secondary\" variant=\"contained\">\n                        Submit\n                    </Button>\n                </Grid>\n            </Grid>\n        </StyledGrid>\n    );\n}\n\nexport default memo(DetailsStep);\n","import React, { useEffect, useRef } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { Grid, GridProps } from '@mui/material';\nimport { Animal, AnimalDetails } from '../../../graphql/types';\nimport { useAppDispatch } from '../../../store';\nimport { createOrUpdateAnimal } from '../../../store/animals';\nimport { getDateYMDFlexible, getYMDDateFromTS } from '../../../utils/dateFormatters';\nimport LayoutAlignCenterBox from '../../layout/LayoutAlignCenterBox';\nimport DetailsStep from './DetailsStep';\n\nexport default function AnimalForm({ animal, submitCallback }: AnimalFormProps) {\n    const methods = useForm({ defaultValues: getDefaultFormValues(animal) });\n    const { handleSubmit, reset } = methods;\n    const formRef = useRef<HTMLFormElement>(null);\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        if (animal) {\n            reset(getDefaultFormValues(animal));\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [animal]);\n\n    const onSubmit = async (formData: AnimalFormData) => {\n        // filter/cleanup RichTextEditorField\n        if (formData.comments === '<p><br></p>') {\n            formData.comments = '';\n        }\n\n        // convert birthDate string to TS\n        if (formData.details?.birthDate) {\n            formData.details.birthDate = getDateYMDFlexible(formData.details?.birthDate) as string;\n        }\n\n        if (animal) {\n            formData.id = animal.id;\n        }\n        const resultAction = await dispatch(createOrUpdateAnimal(formData));\n\n        if (createOrUpdateAnimal.fulfilled.match(resultAction)) {\n            submitCallback(null);\n        } else {\n            // returns error message after bad insert\n            submitCallback(resultAction.payload);\n        }\n    };\n\n    return (\n        <LayoutAlignCenterBox>\n            <FormProvider {...methods}>\n                <Grid\n                    container\n                    spacing={2}\n                    alignItems=\"center\"\n                    component=\"form\"\n                    style={{ maxWidth: 800 }}\n                    onSubmit={handleSubmit(onSubmit)}\n                    ref={formRef}\n                >\n                    <DetailsStep />\n                </Grid>\n            </FormProvider>\n        </LayoutAlignCenterBox>\n    );\n}\n\nconst getDefaultFormValues = (animal?: Animal): AnimalFormData => {\n    // adjust birthData format to form string input\n    return animal\n        ? { ...animal, details: { ...animal.details, birthDate: getYMDDateFromTS(animal.details?.birthDate) } }\n        : { details: { birthDate: getYMDDateFromTS(Date.now().toString()) } };\n};\n\nexport function FormRow({ children, ...props }: GridProps) {\n    return (\n        <Grid item xs={12} container spacing={2} {...props}>\n            {children}\n        </Grid>\n    );\n}\n\ninterface AnimalFormProps {\n    animal?: Animal;\n    submitCallback: (error: any) => void;\n}\n\nexport interface AnimalFormData extends Partial<Omit<Animal, 'details'>> {\n    id?: number;\n    details?: Partial<AnimalDetails>;\n}\n\n// todo createEvent prop.\n","import { loader } from 'graphql.macro';\nimport React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { Box, Skeleton, styled } from '@mui/material';\nimport AnimalForm from '../components/animal/create-update/AnimalForm';\nimport { Animal } from '../graphql/types';\nimport logo from '../logo.svg';\nimport Page from './Page';\n\nconst GET_ANIMAL_DETAILS_ON_EDIT = loader('../graphql/queries/animal-details-on-edit.graphql');\n\nfunction AnimalEditPage() {\n    const navigate = useNavigate();\n    const { id } = useParams();\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS_ON_EDIT, {\n        variables: { id: Number(id) },\n        skip: !id,\n    });\n\n    const submitCallback = (err: any) => {\n        if (err === null) {\n            navigate('/animal-list');\n        } else {\n            // todo - should also show error on UI\n            console.error('AnimalForm', err);\n        }\n    };\n\n    return (\n        <Page topSection={<TopSection />}>\n            {error ? (\n                <p>Error!</p>\n            ) : loading ? (\n                <Skeleton animation=\"wave\" variant=\"rectangular\" height=\"70vh\" width=\"100%\" />\n            ) : (\n                <AnimalForm animal={data?.animal} submitCallback={submitCallback} />\n            )}\n        </Page>\n    );\n}\n\nconst PREFIX = 'TopSection';\n\nconst classes = {\n    image: `${PREFIX}-image`,\n    imageWrapper: `${PREFIX}-imageWrapper`,\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    [classes.image]: {\n        fill: theme.palette.primary.dark,\n        width: '100%',\n    },\n    [classes.imageWrapper]: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        width: 64,\n        height: 64,\n        borderRadius: '50%',\n        backgroundColor: theme.palette.primary.light,\n        [theme.breakpoints.up('md')]: {\n            padding: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n            width: 100,\n            height: 100,\n        },\n    },\n}));\n\nfunction TopSection() {\n    return (\n        <Root>\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                <Box className={classes.imageWrapper}>\n                    <img src={logo} alt=\"paw\" className={classes.image} />\n                </Box>\n            </Box>\n        </Root>\n    );\n}\n\nexport default AnimalEditPage;\n\ninterface Response {\n    animal: Animal;\n}\n"],"sourceRoot":""}